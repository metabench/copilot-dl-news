{
  "version": 3,
  "sources": ["../../../../shared/telemetry/telemetryRenderer.js", "../../components/TelemetryDisplay.js"],
  "sourcesContent": ["/**\r\n * Isomorphic telemetry rendering utilities\r\n * Can be used both server-side (SSR) and client-side\r\n * \r\n * @module shared/telemetry/telemetryRenderer\r\n */\r\n\r\n/**\r\n * Format a telemetry entry for display\r\n * @param {Object} entry - Telemetry entry\r\n * @param {string} entry.type - Event type (stage_transition, error, warning, info)\r\n * @param {string} entry.stage - Current stage\r\n * @param {string} entry.message - Human-readable message\r\n * @param {number} entry.timestamp - Unix timestamp\r\n * @param {Object} entry.context - Additional context\r\n * @returns {Object} Formatted telemetry data\r\n */\r\nexport function formatTelemetryEntry(entry) {\r\n  if (!entry || typeof entry !== 'object') {\r\n    const fallbackTimestamp = Date.now();\r\n    return {\r\n      type: 'info',\r\n      stage: 'unknown',\r\n      message: 'Invalid telemetry entry',\r\n      timestamp: fallbackTimestamp,\r\n      context: {},\r\n      severity: 'low',\r\n      icon: getIcon('info', 'low'),\r\n      relativeTime: formatRelativeTime(fallbackTimestamp),\r\n      formattedTimestamp: new Date(fallbackTimestamp).toISOString()\r\n    };\r\n  }\r\n\r\n  const rawType = entry.type || entry.event || 'info';\r\n  const normalizedTimestamp = normalizeTelemetryTimestamp(entry);\r\n  const severity = getSeverity(rawType);\r\n  const icon = getIcon(rawType, severity);\r\n  const relativeTime = formatRelativeTime(normalizedTimestamp);\r\n\r\n  return {\r\n    type: rawType,\r\n    stage: entry.stage || entry.context?.stage || entry.details?.stage || 'unknown',\r\n    message: entry.message || entry.details || '',\r\n    timestamp: normalizedTimestamp,\r\n    context: entry.context || entry.details || {},\r\n    severity,\r\n    icon,\r\n    relativeTime,\r\n    formattedTimestamp: new Date(normalizedTimestamp).toISOString()\r\n  };\r\n}\r\n\r\n/**\r\n * Get severity level from telemetry type\r\n * @param {string} type - Telemetry type\r\n * @returns {string} Severity level (critical, high, medium, low)\r\n */\r\nfunction getSeverity(type) {\r\n  const severityMap = {\r\n    error: 'critical',\r\n    failed: 'critical',\r\n    warning: 'high',\r\n    stage_transition: 'medium',\r\n    started: 'medium',\r\n    completed: 'low',\r\n    skipped: 'low',\r\n    info: 'low'\r\n  };\r\n  return severityMap[type] || 'low';\r\n}\r\n\r\n/**\r\n * Get icon for telemetry type\r\n * @param {string} type - Telemetry type\r\n * @param {string} severity - Severity level\r\n * @returns {string} Icon character\r\n */\r\nfunction getIcon(type, severity) {\r\n  const iconMap = {\r\n    error: '\u274C',\r\n    failed: '\u274C',\r\n    warning: '\u26A0\uFE0F',\r\n    started: '\uD83D\uDE80',\r\n    completed: '\u2705',\r\n    skipped: '\u23ED\uFE0F',\r\n    stage_transition: '\u27A1\uFE0F',\r\n    info: '\u2139\uFE0F'\r\n  };\r\n  return iconMap[type] || '\u2022';\r\n}\r\n\r\n/**\r\n * Normalize inbound telemetry timestamps to a numeric epoch value.\r\n * Accepts multiple field names and string/Date representations.\r\n *\r\n * @param {Object} entry - Raw telemetry entry\r\n * @returns {number} Timestamp in milliseconds\r\n */\r\nfunction normalizeTelemetryTimestamp(entry) {\r\n  const candidates = [\r\n    entry.timestamp,\r\n    entry.ts,\r\n    entry.time,\r\n    entry.date,\r\n    entry.createdAt,\r\n    entry.updatedAt\r\n  ];\r\n\r\n  for (const candidate of candidates) {\r\n    if (candidate === undefined || candidate === null) continue;\r\n\r\n    if (typeof candidate === 'number' && Number.isFinite(candidate)) {\r\n      return candidate;\r\n    }\r\n\r\n    if (candidate instanceof Date) {\r\n      const value = candidate.getTime();\r\n      if (Number.isFinite(value)) return value;\r\n      continue;\r\n    }\r\n\r\n    if (typeof candidate === 'string' && candidate.trim().length > 0) {\r\n      const parsed = Date.parse(candidate);\r\n      if (!Number.isNaN(parsed)) {\r\n        return parsed;\r\n      }\r\n    }\r\n  }\r\n\r\n  return Date.now();\r\n}\r\n\r\n/**\r\n * Format timestamp as relative time (e.g., \"2s ago\", \"just now\")\r\n * @param {number} timestamp - Unix timestamp\r\n * @returns {string} Relative time string\r\n */\r\nfunction formatRelativeTime(timestamp) {\r\n  if (!timestamp) return 'unknown time';\r\n  \r\n  const now = Date.now();\r\n  const diff = now - timestamp;\r\n  \r\n  if (diff < 1000) return 'just now';\r\n  if (diff < 60000) return `${Math.floor(diff / 1000)}s ago`;\r\n  if (diff < 3600000) return `${Math.floor(diff / 60000)}m ago`;\r\n  if (diff < 86400000) return `${Math.floor(diff / 3600000)}h ago`;\r\n  return `${Math.floor(diff / 86400000)}d ago`;\r\n}\r\n\r\n/**\r\n * Render telemetry entry to HTML string (isomorphic)\r\n * @param {Object} entry - Telemetry entry\r\n * @param {Object} options - Render options\r\n * @param {boolean} options.showTimestamp - Show timestamp (default: true)\r\n * @param {boolean} options.showIcon - Show icon (default: true)\r\n * @param {boolean} options.showStage - Show stage label (default: true)\r\n * @param {boolean} options.compact - Compact mode (default: false)\r\n * @returns {string} HTML string\r\n */\r\nexport function renderTelemetryEntry(entry, options = {}) {\r\n  const {\r\n    showTimestamp = true,\r\n    showIcon = true,\r\n    showStage = true,\r\n    compact = false\r\n  } = options;\r\n\r\n  const formatted = formatTelemetryEntry(entry);\r\n  const classes = [\r\n    'telemetry-entry',\r\n    `telemetry-entry--${formatted.type}`,\r\n    `telemetry-entry--${formatted.severity}`,\r\n    compact ? 'telemetry-entry--compact' : ''\r\n  ].filter(Boolean).join(' ');\r\n\r\n  const parts = [];\r\n\r\n  if (showIcon) {\r\n    parts.push(`<span class=\"telemetry-entry__icon\" aria-hidden=\"true\">${formatted.icon}</span>`);\r\n  }\r\n\r\n  if (showStage) {\r\n    parts.push(`<span class=\"telemetry-entry__stage\">${escapeHtml(formatted.stage)}</span>`);\r\n  }\r\n\r\n  parts.push(`<span class=\"telemetry-entry__message\">${escapeHtml(formatted.message)}</span>`);\r\n\r\n  if (showTimestamp) {\r\n    parts.push(`<span class=\"telemetry-entry__time\" title=\"${formatted.formattedTimestamp}\">${formatted.relativeTime}</span>`);\r\n  }\r\n\r\n  return `<div class=\"${classes}\">${parts.join('')}</div>`;\r\n}\r\n\r\n/**\r\n * Render multiple telemetry entries as HTML list\r\n * @param {Array<Object>} entries - Array of telemetry entries\r\n * @param {Object} options - Render options\r\n * @returns {string} HTML string\r\n */\r\nexport function renderTelemetryList(entries, options = {}) {\r\n  if (!Array.isArray(entries) || entries.length === 0) {\r\n    return '<div class=\"telemetry-list telemetry-list--empty\">No telemetry events yet.</div>';\r\n  }\r\n\r\n  const items = entries.map(entry => renderTelemetryEntry(entry, options)).join('\\n');\r\n  return `<div class=\"telemetry-list\">${items}</div>`;\r\n}\r\n\r\n/**\r\n * Get summary statistics from telemetry entries\r\n * @param {Array<Object>} entries - Array of telemetry entries\r\n * @returns {Object} Statistics\r\n */\r\nexport function getTelemetryStats(entries) {\r\n  if (!Array.isArray(entries)) {\r\n    return { total: 0, errors: 0, warnings: 0, stages: 0 };\r\n  }\r\n\r\n  return entries.reduce((stats, entry) => {\r\n    stats.total++;\r\n    if (entry.type === 'error' || entry.type === 'failed') stats.errors++;\r\n    if (entry.type === 'warning') stats.warnings++;\r\n    if (entry.type === 'stage_transition' || entry.type === 'started') stats.stages++;\r\n    return stats;\r\n  }, { total: 0, errors: 0, warnings: 0, stages: 0 });\r\n}\r\n\r\n/**\r\n * Filter telemetry entries by type\r\n * @param {Array<Object>} entries - Array of telemetry entries\r\n * @param {string|Array<string>} types - Type or array of types to filter\r\n * @returns {Array<Object>} Filtered entries\r\n */\r\nexport function filterTelemetryByType(entries, types) {\r\n  if (!Array.isArray(entries)) return [];\r\n  const typeArray = Array.isArray(types) ? types : [types];\r\n  return entries.filter(entry => typeArray.includes(entry.type));\r\n}\r\n\r\n/**\r\n * Get most recent telemetry entry by type\r\n * @param {Array<Object>} entries - Array of telemetry entries\r\n * @param {string} type - Type to filter\r\n * @returns {Object|null} Most recent entry or null\r\n */\r\nexport function getLatestTelemetryByType(entries, type) {\r\n  const filtered = filterTelemetryByType(entries, type);\r\n  if (filtered.length === 0) return null;\r\n  return filtered[filtered.length - 1];\r\n}\r\n\r\n/**\r\n * Escape HTML special characters\r\n * @param {string} str - String to escape\r\n * @returns {string} Escaped string\r\n */\r\nfunction escapeHtml(str) {\r\n  if (typeof str !== 'string') return '';\r\n  return str\r\n    .replace(/&/g, '&amp;')\r\n    .replace(/</g, '&lt;')\r\n    .replace(/>/g, '&gt;')\r\n    .replace(/\"/g, '&quot;')\r\n    .replace(/'/g, '&#039;');\r\n}\r\n\r\n/**\r\n * Parse telemetry from crawler console output\r\n * @param {string} line - Console line\r\n * @returns {Object|null} Parsed telemetry or null\r\n */\r\nexport function parseTelemetryFromConsole(line) {\r\n  if (typeof line !== 'string') return null;\r\n  \r\n  // Match: [TELEMETRY] {\"type\":\"...\",\"stage\":\"...\",\"message\":\"...\",...}\r\n  const match = line.match(/^\\[TELEMETRY\\]\\s*(.+)$/);\r\n  if (!match) return null;\r\n  \r\n  try {\r\n    return JSON.parse(match[1]);\r\n  } catch (err) {\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Format progress information from telemetry context\r\n * @param {Object} context - Telemetry context with progress info\r\n * @returns {Object|null} Progress info or null\r\n */\r\nexport function extractProgressFromTelemetry(context) {\r\n  if (!context || typeof context !== 'object') return null;\r\n  \r\n  const progress = {\r\n    current: context.current || context.processed || 0,\r\n    total: context.total || context.totalItems || 0,\r\n    percentage: 0,\r\n    isIndeterminate: false\r\n  };\r\n  \r\n  if (progress.total > 0) {\r\n    progress.percentage = Math.min(100, Math.max(0, (progress.current / progress.total) * 100));\r\n  } else {\r\n    progress.isIndeterminate = true;\r\n  }\r\n  \r\n  return progress;\r\n}\r\n", "/**\r\n * Telemetry Display Component\r\n * Client-side wrapper for isomorphic telemetry rendering\r\n * \r\n * Displays real-time telemetry events from crawlers with:\r\n * - Automatic updates from SSE events\r\n * - Severity-based filtering and styling\r\n * - Statistics summary\r\n * - Auto-scroll to latest events\r\n * \r\n * @module components/TelemetryDisplay\r\n */\r\n\r\nimport {\r\n  renderTelemetryList,\r\n  getTelemetryStats,\r\n  filterTelemetryByType,\r\n  parseTelemetryFromConsole\r\n} from '../../../shared/telemetry/telemetryRenderer.js';\r\n\r\n/**\r\n * Create a telemetry display component\r\n * @param {Object} options - Component options\r\n * @param {HTMLElement} options.container - Container element\r\n * @param {number} options.maxEntries - Maximum entries to keep (default: 100)\r\n * @param {boolean} options.autoScroll - Auto-scroll to latest (default: true)\r\n * @param {boolean} options.showStats - Show statistics summary (default: true)\r\n * @param {Array<string>} options.filterTypes - Filter to specific types (optional)\r\n * @returns {Object} Component API\r\n */\r\nexport function createTelemetryDisplay(options = {}) {\r\n  const {\r\n    container,\r\n    maxEntries = 100,\r\n    autoScroll = true,\r\n    showStats = true,\r\n    filterTypes = null\r\n  } = options;\r\n\r\n  if (!container || !(container instanceof HTMLElement)) {\r\n    throw new Error('TelemetryDisplay requires a valid container element');\r\n  }\r\n\r\n  // Component state\r\n  const state = {\r\n    entries: [],\r\n    isVisible: true,\r\n    isPaused: false\r\n  };\r\n\r\n  // Create structure\r\n  const wrapper = document.createElement('div');\r\n  wrapper.className = 'telemetry-display';\r\n  \r\n  let statsContainer = null;\r\n  if (showStats) {\r\n    statsContainer = document.createElement('div');\r\n    statsContainer.className = 'telemetry-stats';\r\n    wrapper.appendChild(statsContainer);\r\n  }\r\n\r\n  const listContainer = document.createElement('div');\r\n  listContainer.className = 'telemetry-list-container';\r\n  wrapper.appendChild(listContainer);\r\n\r\n  container.appendChild(wrapper);\r\n\r\n  /**\r\n   * Add a telemetry entry\r\n   * @param {Object} entry - Telemetry entry\r\n   */\r\n  function addEntry(entry) {\r\n    if (state.isPaused) return;\r\n\r\n    // Apply filtering if specified\r\n    if (filterTypes && !filterTypes.includes(entry.type)) {\r\n      return;\r\n    }\r\n\r\n    state.entries.push(entry);\r\n\r\n    // Limit entries\r\n    if (state.entries.length > maxEntries) {\r\n      state.entries = state.entries.slice(-maxEntries);\r\n    }\r\n\r\n    render();\r\n  }\r\n\r\n  /**\r\n   * Add multiple entries\r\n   * @param {Array<Object>} entries - Array of telemetry entries\r\n   */\r\n  function addEntries(entries) {\r\n    if (state.isPaused || !Array.isArray(entries)) return;\r\n\r\n    entries.forEach(entry => {\r\n      if (!filterTypes || filterTypes.includes(entry.type)) {\r\n        state.entries.push(entry);\r\n      }\r\n    });\r\n\r\n    // Limit entries\r\n    if (state.entries.length > maxEntries) {\r\n      state.entries = state.entries.slice(-maxEntries);\r\n    }\r\n\r\n    render();\r\n  }\r\n\r\n  /**\r\n   * Parse and add telemetry from console line\r\n   * @param {string} line - Console output line\r\n   */\r\n  function addFromConsole(line) {\r\n    const parsed = parseTelemetryFromConsole(line);\r\n    if (parsed) {\r\n      addEntry(parsed);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all entries\r\n   */\r\n  function clear() {\r\n    state.entries = [];\r\n    render();\r\n  }\r\n\r\n  /**\r\n   * Pause/resume updates\r\n   * @param {boolean} paused - Pause state\r\n   */\r\n  function setPaused(paused) {\r\n    state.isPaused = !!paused;\r\n  }\r\n\r\n  /**\r\n   * Show/hide component\r\n   * @param {boolean} visible - Visibility state\r\n   */\r\n  function setVisible(visible) {\r\n    state.isVisible = !!visible;\r\n    wrapper.style.display = visible ? '' : 'none';\r\n  }\r\n\r\n  /**\r\n   * Get current entries\r\n   * @returns {Array<Object>} Current entries\r\n   */\r\n  function getEntries() {\r\n    return [...state.entries];\r\n  }\r\n\r\n  /**\r\n   * Get filtered entries\r\n   * @param {string|Array<string>} types - Types to filter\r\n   * @returns {Array<Object>} Filtered entries\r\n   */\r\n  function getFilteredEntries(types) {\r\n    return filterTelemetryByType(state.entries, types);\r\n  }\r\n\r\n  /**\r\n   * Get statistics\r\n   * @returns {Object} Statistics\r\n   */\r\n  function getStats() {\r\n    return getTelemetryStats(state.entries);\r\n  }\r\n\r\n  /**\r\n   * Render telemetry list\r\n   */\r\n  function render() {\r\n    if (!state.isVisible) return;\r\n\r\n    // Render stats\r\n    if (showStats && statsContainer) {\r\n      const stats = getStats();\r\n      statsContainer.innerHTML = `\r\n        <div class=\"telemetry-stats__item\">\r\n          <span class=\"telemetry-stats__item-label\">Total:</span>\r\n          <span class=\"telemetry-stats__item-value\">${stats.total}</span>\r\n        </div>\r\n        <div class=\"telemetry-stats__item\">\r\n          <span class=\"telemetry-stats__item-label\">Stages:</span>\r\n          <span class=\"telemetry-stats__item-value\">${stats.stages}</span>\r\n        </div>\r\n        <div class=\"telemetry-stats__item\">\r\n          <span class=\"telemetry-stats__item-label\">Warnings:</span>\r\n          <span class=\"telemetry-stats__item-value\">${stats.warnings}</span>\r\n        </div>\r\n        <div class=\"telemetry-stats__item\">\r\n          <span class=\"telemetry-stats__item-label\">Errors:</span>\r\n          <span class=\"telemetry-stats__item-value\">${stats.errors}</span>\r\n        </div>\r\n      `;\r\n    }\r\n\r\n    // Render list\r\n    const html = renderTelemetryList(state.entries, {\r\n      showTimestamp: true,\r\n      showIcon: true,\r\n      showStage: true,\r\n      compact: false\r\n    });\r\n    listContainer.innerHTML = html;\r\n\r\n    // Auto-scroll to bottom\r\n    if (autoScroll) {\r\n      const listEl = listContainer.querySelector('.telemetry-list');\r\n      if (listEl) {\r\n        listEl.scrollTop = listEl.scrollHeight;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroy component\r\n   */\r\n  function destroy() {\r\n    wrapper.remove();\r\n    state.entries = [];\r\n  }\r\n\r\n  // Initial render\r\n  render();\r\n\r\n  // Return API\r\n  return {\r\n    addEntry,\r\n    addEntries,\r\n    addFromConsole,\r\n    clear,\r\n    setPaused,\r\n    setVisible,\r\n    getEntries,\r\n    getFilteredEntries,\r\n    getStats,\r\n    render,\r\n    destroy\r\n  };\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
