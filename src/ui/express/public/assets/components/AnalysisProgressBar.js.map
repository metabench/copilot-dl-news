{
  "version": 3,
  "sources": ["../../../../../../node_modules/lang-tools/node_modules/lang-mini/lang-mini.js", "../../../../../../node_modules/lang-tools/node_modules/lang-mini/lib-lang-mini.js", "../../../../../../node_modules/lang-tools/collective.js", "../../../../../../node_modules/lang-tools/Data_Model/Data_Model.js", "../../../../../../node_modules/lang-tools/Data_Model/new/tools.js", "../../../../../../node_modules/lang-tools/b-plus-tree/stiffarray.js", "../../../../../../node_modules/lang-tools/b-plus-tree/b-plus-tree.js", "../../../../../../node_modules/lang-tools/Data_Model/old/Data_Value.js", "../../../../../../node_modules/lang-tools/Data_Model/Mini_Context.js", "../../../../../../node_modules/lang-tools/Data_Model/old/Data_Object.js", "../../../../../../node_modules/lang-tools/sorted-kvs.js", "../../../../../../node_modules/lang-tools/Data_Model/old/Collection.js", "../../../../../../node_modules/lang-tools/Data_Model/Data_Object.js", "../../../../../../node_modules/lang-tools/Data_Model/new/Immutable_Data_Model.js", "../../../../../../node_modules/lang-tools/Data_Model/new/Validation_Result.js", "../../../../../../node_modules/lang-tools/Data_Model/new/Validation_Success.js", "../../../../../../node_modules/lang-tools/Data_Model/new/setup_base_data_value_value_property.js", "../../../../../../node_modules/lang-tools/Data_Model/new/Base_Data_Value.js", "../../../../../../node_modules/lang-tools/Data_Model/new/Value_Set_Attempt.js", "../../../../../../node_modules/lang-tools/Data_Model/new/Immutable_Base_Data_Value.js", "../../../../../../node_modules/lang-tools/Data_Model/new/Immutable_Data_Value.js", "../../../../../../node_modules/lang-tools/Data_Model/new/setup_data_value_data_type_set.js", "../../../../../../node_modules/lang-tools/Data_Model/new/Data_Value.js", "../../../../../../node_modules/lang-tools/Data_Model/Data_Value.js", "../../../../../../node_modules/lang-tools/doubly-linked-list.js", "../../../../../../node_modules/lang-tools/ordered-kvs.js", "../../../../../../node_modules/lang-tools/ordered-string-list.js", "../../../../../../node_modules/lang-tools/Data_Model/Collection.js", "../../../../../../node_modules/lang-tools/util.js", "../../../../../../node_modules/lang-tools/lang.js", "../../components/AnalysisProgressBar.js"],
  "sourcesContent": ["// Late 2023 - Should include field from obext as well?\r\n\r\n// Bring more data functionality to a lower level...?\r\n//   Have more of a platform to support Data_Model, Data_Value and Data_Object with.\r\n\r\n// data.schema?\r\n// data.model.schema???\r\n\r\n// Would be worth integrating various parts together here and with Data_Model, Data_Object, Data_Value\r\n\r\n\r\nconst running_in_browser = typeof window !== 'undefined';\r\nconst running_in_node = !running_in_browser;\r\nlet Readable_Stream, Writable_Stream, Transform_Stream;\r\nconst get_stream = () => {\r\n\tif (running_in_node) {\r\n\t\treturn (() => {\r\n\t\t\tconst str_libname = ('str') + ('eam');\r\n\t\t\tconst stream = require(str_libname);\r\n\t\t\tReadable_Stream = stream.Readable;\r\n\t\t\tWritable_Stream = stream.Writable;\r\n\t\t\tTransform_Stream = stream.Transform;\r\n\t\t\treturn stream;\r\n\t\t})();\r\n\t} else {\r\n\t\treturn undefined;\r\n\t}\r\n}\r\nconst stream = get_stream();\r\nconst each = (collection, fn, context) => {\r\n\tif (collection) {\r\n\t\tif (collection.__type == 'collection') {\r\n\t\t\treturn collection.each(fn, context);\r\n\t\t}\r\n\t\tlet ctu = true;\r\n\t\tlet stop = function () {\r\n\t\t\tctu = false;\r\n\t\t};\r\n\t\tif (is_array(collection)) {\r\n\t\t\tlet res = [],\r\n\t\t\t\tres_item;\r\n\t\t\tfor (let c = 0, l = collection.length; c < l; c++) {\r\n\t\t\t\tres_item;\r\n\t\t\t\tif (ctu == false) break;\r\n\t\t\t\tif (context) {\r\n\t\t\t\t\tres_item = fn.call(context, collection[c], c, stop);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tres_item = fn(collection[c], c, stop);\r\n\t\t\t\t}\r\n\t\t\t\tif (ctu == false) break; // If stop() was called, do not push current item\r\n\t\t\t\tres.push(res_item);\r\n\t\t\t}\r\n\t\t\treturn res;\r\n\t\t} else {\r\n\t\t\tlet name, res = {};\r\n\t\t\tfor (name in collection) {\r\n\t\t\t\tif (ctu === false) break;\r\n\t\t\t\tif (context) {\r\n\t\t\t\t\tres[name] = fn.call(context, collection[name], name, stop);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tres[name] = fn(collection[name], name, stop);\r\n\t\t\t\t}\r\n\t\t\t\tif (ctu === false) break; // If stop() was called, do not set current property\r\n\t\t\t}\r\n\t\t\treturn res;\r\n\t\t}\r\n\t}\r\n};\r\nconst is_array = Array.isArray;\r\nconst is_dom_node = function isDomNode(obj) {\r\n\treturn (!!obj && typeof obj.nodeType !== 'undefined' && typeof obj.childNodes !== 'undefined');\r\n};\r\nconst get_truth_map_from_arr = function (arr) {\r\n\tlet res = {};\r\n\teach(arr, function (v, i) {\r\n\t\tres[v] = true;\r\n\t});\r\n\treturn res;\r\n};\r\nconst get_arr_from_truth_map = function (truth_map) {\r\n\tlet res = [];\r\n\teach(truth_map, function (v, i) {\r\n\t\tres.push(i);\r\n\t});\r\n\treturn res;\r\n};\r\nconst get_map_from_arr = function (arr) {\r\n\tlet res = {};\r\n\tfor (let c = 0, l = arr.length; c < l; c++) {\r\n\t\tres[arr[c]] = c;\r\n\t}\r\n\treturn res;\r\n}\r\nconst arr_like_to_arr = function (arr_like) {\r\n\tlet res = new Array(arr_like.length);\r\n\tfor (let c = 0, l = arr_like.length; c < l; c++) {\r\n\t\tres[c] = arr_like[c];\r\n\t};\r\n\treturn res;\r\n};\r\nconst is_ctrl = function (obj) {\r\n\treturn (typeof obj !== 'undefined' && obj !== null && is_defined(obj.__type_name) && is_defined(obj.content) && is_defined(obj.dom));\r\n};\r\nconst map_loaded_type_fn_checks = {},\r\n\tmap_loaded_type_abbreviations = {\r\n\t\t'object': 'o',\r\n\t\t'number': 'n',\r\n\t\t'string': 's',\r\n\t\t'function': 'f',\r\n\t\t'boolean': 'b',\r\n\t\t'undefined': 'u',\r\n\t\t'null': 'N',\r\n\t\t'array': 'a',\r\n\t\t'arguments': 'A',\r\n\t\t'date': 'd',\r\n\t\t'regex': 'r',\r\n\t\t'error': 'e',\r\n\t\t'buffer': 'B',\r\n\t\t'promise': 'p',\r\n\t\t'observable': 'O',\r\n\t\t'readable_stream': 'R',\r\n\t\t'writable_stream': 'W',\r\n\t\t'data_value': 'V'\r\n\t};\r\nlet using_type_plugins = false;\r\nconst invert = (obj) => {\r\n\tif (!is_array(obj)) {\r\n\t\tlet res = {};\r\n\t\teach(obj, (v, k) => {\r\n\t\t\tres[v] = k;\r\n\t\t})\r\n\t\treturn res;\r\n\t} else {\r\n\t\tconsole.trace();\r\n\t\tthrow 'invert(obj) not supported on arrays'\r\n\t}\r\n}\r\nconst map_loaded_type_names = invert(map_loaded_type_abbreviations);\r\nconst load_type = (name, abbreviation, fn_detect_instance) => {\r\n\tmap_loaded_type_fn_checks[name] = fn_detect_instance;\r\n\tmap_loaded_type_names[abbreviation] = name;\r\n\tmap_loaded_type_abbreviations[name] = abbreviation;\r\n\tusing_type_plugins = true;\r\n}\r\nconst tof = (obj, t1) => {\r\n\tlet res = t1 || typeof obj;\r\n\tif (using_type_plugins) {\r\n\t\tlet res;\r\n\t\teach(map_loaded_type_fn_checks, (fn_check, name, stop) => {\r\n\t\t\tif (fn_check(obj)) {\r\n\t\t\t\tres = name;\r\n\t\t\t\tstop();\r\n\t\t\t}\r\n\t\t});\r\n\t\tif (res) {\r\n\t\t\treturn res;\r\n\t\t}\r\n\t}\r\n\tif (res === 'number' || res === 'string' || res === 'function' || res === 'boolean') {\r\n\t\treturn res;\r\n\t}\r\n\tif (res === 'object') {\r\n\t\tif (typeof obj !== 'undefined') {\r\n\t\t\tif (obj === null) {\r\n\t\t\t\treturn 'null';\r\n\t\t\t}\r\n\t\t\tif (obj.__type) {\r\n\t\t\t\treturn obj.__type;\r\n\t\t\t} else if (obj.__type_name) {\r\n\t\t\t\treturn obj.__type_name;\r\n\t\t\t} else {\r\n\t\t\t\tif (obj instanceof Promise) {\r\n\t\t\t\t\treturn 'promise';\r\n\t\t\t\t}\r\n\t\t\t\tif (is_ctrl(obj)) {\r\n\t\t\t\t\treturn 'control';\r\n\t\t\t\t}\r\n\t\t\t\tif (obj instanceof Date) {\r\n\t\t\t\t\treturn 'date';\r\n\t\t\t\t}\r\n\t\t\t\tif (is_array(obj)) {\r\n\t\t\t\t\treturn 'array';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (obj instanceof Error) {\r\n\t\t\t\t\t\tres = 'error';\r\n\t\t\t\t\t} else if (obj instanceof RegExp) res = 'regex';\r\n\t\t\t\t\tif (typeof window === 'undefined') {\r\n\t\t\t\t\t\tif (obj && obj.readInt8) res = 'buffer';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn res;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn 'undefined';\r\n\t\t}\r\n\t}\r\n\treturn res;\r\n};\r\nconst tf = (obj) => {\r\n\tlet res = typeof obj;\r\n\tif (using_type_plugins) {\r\n\t\tlet res;\r\n\t\teach(map_loaded_type_fn_checks, (fn_check, name, stop) => {\r\n\t\t\tif (fn_check(obj)) {\r\n\t\t\t\tres = map_loaded_type_abbreviations[name];\r\n\t\t\t\tstop();\r\n\t\t\t}\r\n\t\t});\r\n\t\tif (res) {\r\n\t\t\treturn res;\r\n\t\t}\r\n\t}\r\n\tif (res === 'number' || res === 'string' || res === 'function' || res === 'boolean' || res === 'undefined') {\r\n\t\treturn res[0];\r\n\t} else {\r\n\t\tif (obj === null) {\r\n\t\t\treturn 'N';\r\n\t\t} else {\r\n\t\t\tif (running_in_node) {\r\n\t\t\t\tif (obj instanceof Readable_Stream) {\r\n\t\t\t\t\treturn 'R';\r\n\t\t\t\t} else if (obj instanceof Writable_Stream) {\r\n\t\t\t\t\treturn 'W';\r\n\t\t\t\t} else if (obj instanceof Transform_Stream) {\r\n\t\t\t\t\treturn 'T';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (typeof Buffer !== 'undefined' && obj instanceof Buffer) {\r\n\t\t\t\treturn 'B';\r\n\t\t\t} else if (obj instanceof Promise) {\r\n\t\t\t\treturn 'p';\r\n\t\t\t} else if (obj instanceof Date) {\r\n\t\t\t\treturn 'd';\r\n\t\t\t} else if (is_array(obj)) {\r\n\t\t\t\treturn 'a';\r\n\t\t\t} else {\r\n\t\t\t\tif (obj._is_observable === true) {\r\n\t\t\t\t\treturn 'O';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (typeof obj.callee === 'function') {\r\n\t\t\t\t\t\treturn 'A';\r\n\t\t\t\t\t} else if (obj instanceof Error) {\r\n\t\t\t\t\t\treturn 'e';\r\n\t\t\t\t\t} else if (obj instanceof RegExp) return 'r';\r\n\t\t\t\t\treturn 'o';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn res;\r\n\t\t}\r\n\t}\r\n\tconsole.trace();\r\n\tconsole.log('item', item);\r\n\tthrow 'type not found';\r\n\treturn res;\r\n};\r\nconst atof = (arr) => {\r\n\tlet res = new Array(arr.length);\r\n\tfor (let c = 0, l = arr.length; c < l; c++) {\r\n\t\tres[c] = tof(arr[c]);\r\n\t}\r\n\treturn res;\r\n};\r\nconst is_defined = (value) => {\r\n\t\treturn typeof (value) != 'undefined';\r\n\t},\r\n\tisdef = is_defined;\r\nconst stringify = JSON.stringify;\r\n\r\n// Older version???\r\n\r\nlet _get_item_sig = (i, arr_depth) => {\r\n\tlet res;\r\n\tlet t1 = typeof i;\r\n\tif (t1 === 'string') {\r\n\t\tres = 's';\r\n\t} else if (t1 === 'number') {\r\n\t\tres = 'n';\r\n\t} else if (t1 === 'boolean') {\r\n\t\tres = 'b';\r\n\t} else if (t1 === 'function') {\r\n\t\tres = 'f';\r\n\t} else {\r\n\t\tlet t = tof(i, t1);\r\n\t\tif (t === 'array') {\r\n\t\t\tif (arr_depth) {\r\n\t\t\t\tres = '['\r\n\t\t\t\tfor (let c = 0, l = i.length; c < l; c++) {\r\n\t\t\t\t\tif (c > 0) res = res + ',';\r\n\t\t\t\t\tres = res + get_item_sig(i[c], arr_depth - 1);\r\n\t\t\t\t}\r\n\t\t\t\tres = res + ']';\r\n\t\t\t} else {\r\n\t\t\t\tres = 'a';\r\n\t\t\t}\r\n\t\t} else if (t === 'control') {\r\n\t\t\tres = 'c';\r\n\t\t} else if (t === 'date') {\r\n\t\t\tres = 'd';\r\n\t\t} else if (t === 'observable') {\r\n\t\t\tres = 'O';\r\n\t\t} else if (t === 'regex') {\r\n\t\t\tres = 'r';\r\n\t\t} else if (t === 'buffer') {\r\n\t\t\tres = 'B';\r\n\t\t} else if (t === 'readable_stream') {\r\n\t\t\tres = 'R';\r\n\t\t} else if (t === 'writable_stream') {\r\n\t\t\tres = 'W';\r\n\t\t} else if (t === 'object') {\r\n\t\t\tres = 'o';\r\n\t\t} else if (t === 'undefined') {\r\n\t\t\tres = 'u';\r\n\t\t} else {\r\n\t\t\tif (t === 'collection_index') {\r\n\t\t\t\treturn 'X';\r\n\t\t\t} else if (t === 'data_object') {\r\n\t\t\t\tif (i._abstract) {\r\n\t\t\t\t\tres = '~D';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tres = 'D';\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (t === 'data_value') {\r\n\t\t\t\t\tif (i._abstract) {\r\n\t\t\t\t\t\tres = '~V';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tres = 'V';\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (t === 'null') {\r\n\t\t\t\t\tres = '!';\r\n\t\t\t\t} else if (t === 'collection') {\r\n\t\t\t\t\tif (i._abstract) {\r\n\t\t\t\t\t\tres = '~C';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tres = 'C';\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tres = '?';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn res;\r\n};\r\nconst get_item_sig = (item, arr_depth) => {\r\n\tif (arr_depth) {\r\n\t\treturn _get_item_sig(item, arr_depth);\r\n\t}\r\n\tconst t = tof(item);\r\n\r\n\tif (map_loaded_type_abbreviations[t]) {\r\n\t\treturn map_loaded_type_abbreviations[t];\r\n\t} else {\r\n\t\tlet bt = typeof item;\r\n\t\tif (bt === 'object') {\r\n\t\t\tif (is_array(item)) {\r\n\t\t\t\treturn 'a';\r\n\t\t\t} else {\r\n\t\t\t\treturn 'o';\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconsole.log('map_loaded_type_abbreviations type name not found', t);\r\n\t\t\tconsole.log('bt', bt);\r\n\t\t\tconsole.trace();\r\n\t\t\tthrow 'stop';\r\n\t\t}\r\n\t}\r\n}\r\nconst get_a_sig = (a) => {\r\n\tlet c = 0,\r\n\t\tl = a.length;\r\n\r\n\t//console.log('is_array(a)', is_array(a));\r\n\t//console.log('a', a);\r\n\t//console.log('get_a_sig l', l);\r\n\tlet res = '[';\r\n\tlet first = true;\r\n\tfor (c = 0; c < l; c++) {\r\n\t\tif (!first) {\r\n\t\t\tres = res + ',';\r\n\t\t}\r\n\t\tfirst = false;\r\n\t\tres = res + get_item_sig(a[c]);\r\n\t}\r\n\tres = res + ']';\r\n\treturn res;\r\n}\r\nconst deep_sig = (item, max_depth = -1, depth = 0) => {\r\n\tconst t = tf(item);\r\n\tlet res = '';\r\n\tif (t === 'a') {\r\n\t\tconst l = item.length;\r\n\t\tif (max_depth === -1 || depth <= max_depth) {\r\n\t\t\tres = res + '[';\r\n\t\t\tlet first = true;\r\n\t\t\tfor (let c = 0; c < l; c++) {\r\n\t\t\t\tif (!first) res = res + ',';\r\n\t\t\t\tres = res + deep_sig(item[c], max_depth, depth + 1);\r\n\t\t\t\tfirst = false;\r\n\t\t\t}\r\n\t\t\tres = res + ']';\r\n\t\t} else {\r\n\t\t\treturn 'a';\r\n\t\t}\r\n\t} else if (t === 'A') {\r\n\t\tconst l = item.length;\r\n\t\tlet first = true;\r\n\t\tfor (let c = 0; c < l; c++) {\r\n\t\t\tif (!first) res = res + ',';\r\n\t\t\tres = res + deep_sig(item[c], max_depth, depth + 1);\r\n\t\t\tfirst = false;\r\n\t\t}\r\n\t} else if (t === 'o') {\r\n\t\tif (max_depth === -1 || depth <= max_depth) {\r\n\t\t\tlet res = '{';\r\n\t\t\tlet first = true;\r\n\t\t\teach(item, (v, k) => {\r\n\t\t\t\tif (!first) res = res + ',';\r\n\t\t\t\tres = res + '\"' + k + '\":' + deep_sig(v, max_depth, depth + 1);\r\n\t\t\t\tfirst = false;\r\n\t\t\t});\r\n\t\t\tres = res + '}';\r\n\t\t\treturn res;\r\n\t\t} else {\r\n\t\t\treturn 'o';\r\n\t\t}\r\n\t} else {\r\n\t\tres = res + t;\r\n\t}\r\n\treturn res;\r\n}\r\nconst trim_sig_brackets = function (sig) {\r\n\tif (tof(sig) === 'string') {\r\n\t\tif (sig.charAt(0) == '[' && sig.charAt(sig.length - 1) == ']') {\r\n\t\t\treturn sig.substring(1, sig.length - 1);\r\n\t\t} else {\r\n\t\t\treturn sig;\r\n\t\t}\r\n\t}\r\n};\r\nconst arr_trim_undefined = function (arr_like) {\r\n\tlet res = [];\r\n\tlet last_defined = -1;\r\n\tlet t, v;\r\n\tfor (let c = 0, l = arr_like.length; c < l; c++) {\r\n\t\tv = arr_like[c];\r\n\t\tt = tof(v);\r\n\t\tif (t == 'undefined') {} else {\r\n\t\t\tlast_defined = c;\r\n\t\t}\r\n\t}\r\n\tfor (let c = 0, l = arr_like.length; c < l; c++) {\r\n\t\tif (c <= last_defined) {\r\n\t\t\tres.push(arr_like[c]);\r\n\t\t}\r\n\t}\r\n\treturn res;\r\n};\r\n\r\n// Could see about simply integrating data types into fp....?\r\n//   That could mean habing get_item_sig return sigs for those data types.\r\n//     Would need to define signature abbreviations for them.\r\n\r\n\r\n\r\n\r\n\r\nconst functional_polymorphism = function (options, fn) {\r\n\tlet a0 = arguments;\r\n\tif (a0.length === 1) {\r\n\t\tfn = a0[0];\r\n\t\toptions = null;\r\n\t}\r\n\tlet arr_slice = Array.prototype.slice;\r\n\tlet arr, sig, a2, l, a;\r\n\treturn function () {\r\n\t\ta = arguments;\r\n\t\tl = a.length;\r\n\t\tif (l === 1) {\r\n\t\t\tsig = get_item_sig([a[0]], 1);\r\n\t\t\ta2 = [a[0]];\r\n\t\t\ta2.l = 1;\r\n\t\t\treturn fn.call(this, a2, sig);\r\n\t\t} else if (l > 1) {\r\n\t\t\tarr = arr_trim_undefined(arr_slice.call(a, 0));\r\n\t\t\tsig = get_item_sig(arr, 1);\r\n\t\t\tarr.l = arr.length;\r\n\t\t\treturn fn.call(this, arr, sig);\r\n\t\t} else if (a.length === 0) {\r\n\t\t\tarr = new Array(0);\r\n\t\t\tarr.l = 0;\r\n\t\t\treturn fn.call(this, arr, '[]');\r\n\t\t}\r\n\t}\r\n};\r\nconst fp = functional_polymorphism;\r\nconst parse_sig = (str_sig, opts = {}) => {\r\n\tconst sig2 = str_sig.split(', ').join(',');\r\n\tconst sig_items = sig2.split(',');\r\n\tconst res = [];\r\n\teach(sig_items, sig_item => {\r\n\t\tif (sig_item.length === 1) {\r\n\t\t\tlet type_name = map_loaded_type_names[sig_item];\r\n\t\t\tres.push({\r\n\t\t\t\tabbreviation: sig_item,\r\n\t\t\t\ttype_name: type_name\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tlet suffix_modifiers;\r\n\t\t\tlet zero_or_more = false;\r\n\t\t\tlet one_or_more = false;\r\n\t\t\tlet type_name = sig_item;\r\n\t\t\tconst obj_res = {\r\n\t\t\t\ttype_name: type_name\r\n\t\t\t}\r\n\t\t\tconst distil_suffix_modifiers = () => {\r\n\t\t\t\tlet last_char = type_name.substr(type_name.length - 1);\r\n\t\t\t\tif (last_char === '*') {\r\n\t\t\t\t\ttype_name = type_name.substr(0, type_name.length - 1);\r\n\t\t\t\t\tzero_or_more = true;\r\n\t\t\t\t\tobj_res.zero_or_more = true;\r\n\t\t\t\t\tobj_res.modifiers = obj_res.modifiers || [];\r\n\t\t\t\t\tobj_res.modifiers.push('*');\r\n\t\t\t\t\tdistil_suffix_modifiers();\r\n\t\t\t\t} else if (last_char === '+') {\r\n\t\t\t\t\ttype_name = type_name.substr(0, type_name.length - 1);\r\n\t\t\t\t\tone_or_more = true;\r\n\t\t\t\t\tobj_res.one_or_more = true;\r\n\t\t\t\t\tobj_res.modifiers = obj_res.modifiers || [];\r\n\t\t\t\t\tobj_res.modifiers.push('+');\r\n\t\t\t\t\tdistil_suffix_modifiers();\r\n\t\t\t\t} else {}\r\n\t\t\t}\r\n\t\t\tdistil_suffix_modifiers();\r\n\t\t\tobj_res.type_name = type_name;\r\n\t\t\tres.push(obj_res);\r\n\t\t}\r\n\t});\r\n\treturn res;\r\n}\r\nconst mfp_not_sigs = get_truth_map_from_arr(['pre', 'default', 'post']);\r\nconst mfp_unparse_sig = arr_sig => {\r\n\tlet res = '[';\r\n\tlet first = true;\r\n\teach(arr_sig, sig_item => {\r\n\t\tif (!first) {\r\n\t\t\tres = res + ',';\r\n\t\t}\r\n\t\tres = res + sig_item.abbreviation;\r\n\t\tfirst = false;\r\n\t})\r\n\tres = res + ']';\r\n\treturn res;\r\n}\r\nconst map_grammar_def_abbreviations = {\r\n\t'string': 's',\r\n\t'number': 'n',\r\n\t'boolean': 'b',\r\n\t's': 's',\r\n\t'n': 'n',\r\n\t'b': 'b'\r\n}\r\nconst log = () => {};\r\nconst combinations = (arr, arr_idxs_to_ignore) => {\r\n\tconst map_ignore_idxs = {};\r\n\tif (arr_idxs_to_ignore) {\r\n\t\teach(arr_idxs_to_ignore, idx_to_ignore => {\r\n\t\t\tmap_ignore_idxs[idx_to_ignore] = true;\r\n\t\t});\r\n\t}\r\n\r\n\t// Check for empty arrays in the input\r\n\tif (arr.some(subArray => subArray.length === 0)) {\r\n\t\treturn []; // Return an empty result if any sub-array is empty\r\n\t}\r\n\r\n\tconst res = [];\r\n\tconst l = arr.length;\r\n\tconst arr_idxs_num_options = new Uint32Array(l);\r\n\teach(arr, (arr_item1, i1) => {\r\n\t\tarr_idxs_num_options[i1] = arr_item1.length;\r\n\t});\r\n\tconst arr_current_option_idxs = (new Uint32Array(l)).fill(0);\r\n\tconst result_from_indexes = (arr, arg_indexes) => {\r\n\t\tconst res = new Array(l);\r\n\t\tif (arg_indexes.length === l) {\r\n\t\t\tfor (var c = 0; c < l; c++) {\r\n\t\t\t\tres[c] = arr[c][arg_indexes[c]];\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconsole.trace();\r\n\t\t\tthrow 'Arguments length mismatch';\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\tconst incr = () => {\r\n\t\tfor (c = l - 1; c >= 0; c--) {\r\n\t\t\tconst ival = arr_current_option_idxs[c];\r\n\t\t\tconst max = arr_idxs_num_options[c] - 1;\r\n\t\t\tif (ival < max) {\r\n\t\t\t\tarr_current_option_idxs[c]++;\r\n\t\t\t\tbreak;\r\n\t\t\t} else {\r\n\t\t\t\tif (c === 0) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tarr_current_option_idxs.fill(0, c);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tlet vals = result_from_indexes(arr, arr_current_option_idxs);\r\n\tres.push(vals);\r\n\twhile (incr()) {\r\n\t\tlet vals = result_from_indexes(arr, arr_current_option_idxs);\r\n\t\tres.push(vals);\r\n\t}\r\n\treturn res;\r\n}\r\nconst map_native_types = {\r\n\t'string': true,\r\n\t'boolean': true,\r\n\t'number': true,\r\n\t'object': true\r\n}\r\nconst map_native_type_sigs = {\r\n\t's': true,\r\n\t'n': true,\r\n\t'o': true,\r\n\t'a': true,\r\n\t'd': true\r\n}\r\n\r\n\r\n// Late 2023 - mfp may be a good basis to proceed with more data-type aware idioms.\r\n//   Want to use it for mid-level precise and concise code where possible.\r\n//     May use it or its conventions in implementing some higher level (incl mid level) things.\r\n\r\n// Would be worth setting up and testing (maybe also benchmarking) Data_Value objects that specifically represent numbers between\r\n//  -180 and 180. Also integrating such Data_Value objects within a Data_Object or other Data_Model.\r\n// Maybe want some kind of _, $, or dm or _dm type shorthand for things that are very useful.\r\n//   Though it does make sense to abstractify things that get used a lot to make it mroe concise.\r\n//     Also worth designing and then using the concise idioms.\r\n\r\n// mfp seems like some code that could be redone / changed and parts used elsewhere to implement the mid and high level\r\n//   APIs as wanted.\r\n\r\n\r\n\r\n\r\n\r\nconst mfp = function () {\r\n\r\n\t// mfp looks complex. may need to look into what it's for and can do.\r\n\t//   Looks like an old work-in-progress.\r\n\t//     Should look into benchmarking its usage in different places.\r\n\r\n\tconst a1 = arguments;\r\n\tconst sig1 = get_a_sig(a1);\r\n\tlet options = {};\r\n\tlet fn_pre, provided_map_sig_fns, inner_map_sig_fns = {},\r\n\t\tinner_map_parsed_sigs = {},\r\n\t\tarr_sig_parsed_sig_fns = [],\r\n\t\tfn_post;\r\n\tlet tm_sig_fns;\r\n\tlet fn_default;\r\n\tlet single_fn;\r\n\tlet req_sig_single_fn;\r\n\tif (sig1 === '[o]') {\r\n\t\tprovided_map_sig_fns = a1[0];\r\n\t} else if (sig1 === '[o,o]') {\r\n\t\toptions = a1[0];\r\n\t\tprovided_map_sig_fns = a1[1];\r\n\t} else if (sig1 === '[o,f]') {\r\n\t\toptions = a1[0];\r\n\t\tsingle_fn = a1[1];\r\n\t} else if (sig1 === '[o,s,f]') {\r\n\t\toptions = a1[0];\r\n\t\treq_sig_single_fn = a1[1];\r\n\t\tsingle_fn = a1[2];\r\n\t\tprovided_map_sig_fns = {};\r\n\t\tprovided_map_sig_fns[req_sig_single_fn] = single_fn;\r\n\t} else if (sig1 === '[f,o]') {\r\n\t\tsingle_fn = a1[0];\r\n\t\toptions = a1[1];\r\n\t} else if (sig1 === '[f]') {\r\n\t\tsingle_fn = a1[0];\r\n\t} else {\r\n\t\tconsole.log('sig1', sig1);\r\n\t\tconsole.trace();\r\n\t\tthrow 'mfp NYI';\r\n\t}\r\n\tlet {\r\n\t\tsingle,\r\n\t\tname,\r\n\t\tgrammar,\r\n\t\tverb,\r\n\t\tnoun,\r\n\t\treturn_type,\r\n\t\treturn_subtype,\r\n\t\tpure,\r\n\t\tmain,\r\n\t\tskip\r\n\t} = options;\r\n\tlet parsed_grammar;\r\n\tlet identify, validate;\r\n\tlet dsig = deep_sig;\r\n\t(() => {\r\n\t\tif (provided_map_sig_fns) {\r\n\t\t\tif (provided_map_sig_fns.default) fn_default = provided_map_sig_fns.default;\r\n\t\t\teach(provided_map_sig_fns, (fn, sig) => {\r\n\t\t\t\tif (typeof fn === 'function') {\r\n\t\t\t\t\tif (!mfp_not_sigs[sig]) {\r\n\t\t\t\t\t\tconst parsed_sig = parse_sig(sig);\r\n\t\t\t\t\t\tconst arr_args_with_modifiers = [];\r\n\t\t\t\t\t\tconst arr_args_all_modification_versions = [];\r\n\t\t\t\t\t\teach(parsed_sig, (arg, i) => {\r\n\t\t\t\t\t\t\tarr_args_all_modification_versions[i] = [];\r\n\t\t\t\t\t\t\tif (arg.modifiers) {\r\n\t\t\t\t\t\t\t\tconst arg_num_modifiers = arg.modifiers.length;\r\n\t\t\t\t\t\t\t\tif (arg_num_modifiers > 1) {\r\n\t\t\t\t\t\t\t\t\tthrow 'Use of more than 1 modifier is currently unsupported.';\r\n\t\t\t\t\t\t\t\t} else if (arg_num_modifiers === 1) {\r\n\t\t\t\t\t\t\t\t\tarr_args_with_modifiers.push([i, arg]);\r\n\t\t\t\t\t\t\t\t\tconst single_modifier = arg.modifiers[0];\r\n\t\t\t\t\t\t\t\t\tif (single_modifier === '*') {\r\n\t\t\t\t\t\t\t\t\t\tarr_args_all_modification_versions[i].push('');\r\n\t\t\t\t\t\t\t\t\t\tarr_args_all_modification_versions[i].push(arg.abbreviation || arg.type_name);\r\n\t\t\t\t\t\t\t\t\t\tconst plural_name = grammar.maps.sing_plur[arg.type_name];\r\n\t\t\t\t\t\t\t\t\t\tarr_args_all_modification_versions[i].push(plural_name);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif (single_modifier === '+') {\r\n\t\t\t\t\t\t\t\t\t\tarr_args_all_modification_versions[i].push(arg.abbreviation || arg.type_name);\r\n\t\t\t\t\t\t\t\t\t\tconst plural_name = grammar.maps.sing_plur[arg.type_name];\r\n\t\t\t\t\t\t\t\t\t\tarr_args_all_modification_versions[i].push(plural_name);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif (single_modifier === '?') {\r\n\t\t\t\t\t\t\t\t\t\tarr_args_all_modification_versions[i].push('');\r\n\t\t\t\t\t\t\t\t\t\tarr_args_all_modification_versions[i].push(arg.abbreviation || arg.type_name);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tarr_args_all_modification_versions[i].push(arg.abbreviation || arg.type_name);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tconst combo_args = combinations(arr_args_all_modification_versions);\r\n\t\t\t\t\t\tconst combo_sigs = [];\r\n\t\t\t\t\t\tlet i_first_of_last_undefined = -1;\r\n\t\t\t\t\t\teach(combo_args, arg_set => {\r\n\t\t\t\t\t\t\tlet combo_sig = '';\r\n\t\t\t\t\t\t\teach(arg_set, (arg, i) => {\r\n\t\t\t\t\t\t\t\tlet lsigb4 = combo_sig.length;\r\n\t\t\t\t\t\t\t\tif (i > 0) {\r\n\t\t\t\t\t\t\t\t\tcombo_sig = combo_sig + ',';\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (arg === '') {\r\n\t\t\t\t\t\t\t\t\tcombo_sig = combo_sig + 'u';\r\n\t\t\t\t\t\t\t\t\tif (i_first_of_last_undefined === -1) {\r\n\t\t\t\t\t\t\t\t\t\ti_first_of_last_undefined = lsigb4;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tcombo_sig = combo_sig + arg;\r\n\t\t\t\t\t\t\t\t\ti_first_of_last_undefined = -1;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\tif (i_first_of_last_undefined > 0) {\r\n\t\t\t\t\t\t\t\tconst combo_sig_no_last_undefined = combo_sig.substr(0, i_first_of_last_undefined);\r\n\t\t\t\t\t\t\t\tcombo_sigs.push(combo_sig_no_last_undefined);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcombo_sigs.push(combo_sig);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\tif (combo_sigs.length > 0) {\r\n\t\t\t\t\t\t\teach(combo_sigs, combo_sig => {\r\n\t\t\t\t\t\t\t\tinner_map_sig_fns[combo_sig] = fn;\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tinner_map_sig_fns[sig] = fn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tinner_map_parsed_sigs[sig] = parsed_sig;\r\n\t\t\t\t\t\tarr_sig_parsed_sig_fns.push([sig, parsed_sig, fn]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.log('ommiting, not parsing sig', sig);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log('fn', fn);\r\n\t\t\t\t\tconsole.trace();\r\n\t\t\t\t\tthrow 'Expected: function';\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t\t}\r\n\t\teach(inner_map_sig_fns, (fn, sig) => {\r\n\t\t\ttm_sig_fns = tm_sig_fns || {};\r\n\t\t\ttm_sig_fns[sig] = true;\r\n\t\t});\r\n\t})();\r\n\tconst res = function () {\r\n\t\tconst a2 = arguments;\r\n\t\tconst l2 = a2.length;\r\n\t\tconsole.log('');\r\n\t\tconsole.log('calling mfp function');\r\n\t\tconsole.log('--------------------');\r\n\t\tconsole.log('');\r\n\t\tlet mfp_fn_call_deep_sig;\r\n\t\tlet ltof = tof;\r\n\t\tconst lsig = dsig;\r\n\t\tlet ltf = tf;\r\n\t\tmfp_fn_call_deep_sig = lsig(a2);\r\n\t\tlet do_skip = false;\r\n\t\tif (skip) {\r\n\t\t\tif (skip(a2)) {\r\n\t\t\t\tdo_skip = true;\r\n\t\t\t} else {}\r\n\t\t}\r\n\t\tif (!do_skip) {\r\n\t\t\tif (inner_map_sig_fns[mfp_fn_call_deep_sig]) {\r\n\t\t\t\treturn inner_map_sig_fns[mfp_fn_call_deep_sig].apply(this, a2);\r\n\t\t\t} else {\r\n\t\t\t\tlet idx_last_fn = -1;\r\n\t\t\t\tlet idx_last_obj = -1;\r\n\t\t\t\teach(a2, (arg, i_arg) => {\r\n\t\t\t\t\ti_arg = parseInt(i_arg, 10);\r\n\t\t\t\t\tconst targ = tf(arg);\r\n\t\t\t\t\tif (targ === 'o') {\r\n\t\t\t\t\t\tidx_last_obj = i_arg;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (targ === 'f') {\r\n\t\t\t\t\t\tidx_last_fn = i_arg;\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tconst last_arg_is_fn = idx_last_fn > -1 && idx_last_fn === a2.length - 1;\r\n\t\t\t\tconst last_arg_is_obj = idx_last_obj > -1 && idx_last_obj === a2.length - 1;\r\n\t\t\t\tconst second_last_arg_is_obj = idx_last_obj > -1 && idx_last_obj === a2.length - 2;\r\n\t\t\t\tlet possible_options_obj;\r\n\t\t\t\tif (last_arg_is_obj) possible_options_obj = a2[idx_last_obj];\r\n\t\t\t\tconst new_args_arrangement = [];\r\n\t\t\t\tfor (let f = 0; f < idx_last_obj; f++) {\r\n\t\t\t\t\tnew_args_arrangement.push(a2[f]);\r\n\t\t\t\t}\r\n\t\t\t\teach(possible_options_obj, (value, key) => {\r\n\t\t\t\t\tnew_args_arrangement.push(value);\r\n\t\t\t\t});\r\n\t\t\t\tlet naa_sig = lsig(new_args_arrangement);\r\n\t\t\t\tnaa_sig = naa_sig.substring(1, naa_sig.length - 1);\r\n\t\t\t\tif (inner_map_sig_fns[naa_sig]) {\r\n\t\t\t\t\treturn inner_map_sig_fns[naa_sig].apply(this, new_args_arrangement);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (fn_default) {\r\n\t\t\t\t\t\treturn fn_default.call(this, a2, mfp_fn_call_deep_sig);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (single_fn) {\r\n\t\t\t\t\t\t\tconsole.log('pre apply single_fn');\r\n\t\t\t\t\t\t\treturn single_fn.apply(this, a2);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconsole.log('Object.keys(inner_map_parsed_sigs)', Object.keys(inner_map_parsed_sigs));\r\n\t\t\t\t\t\t\tconsole.trace();\r\n\t\t\t\t\t\t\tconsole.log('mfp_fn_call_deep_sig', mfp_fn_call_deep_sig);\r\n\t\t\t\t\t\t\tconsole.log('provided_map_sig_fns', provided_map_sig_fns);\r\n\t\t\t\t\t\t\tif (provided_map_sig_fns) log('Object.keys(provided_map_sig_fns)', Object.keys(provided_map_sig_fns));\r\n\t\t\t\t\t\t\tconsole.log('Object.keys(inner_map_sig_fns)', Object.keys(inner_map_sig_fns));\r\n\t\t\t\t\t\t\tconsole.trace();\r\n\t\t\t\t\t\t\tthrow 'no signature match found. consider using a default signature. mfp_fn_call_deep_sig: ' + mfp_fn_call_deep_sig;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tconst _ = {}\r\n\tif (name) _.name = name;\r\n\tif (single) _.single = single;\r\n\tif (skip) _.skip = skip;\r\n\tif (grammar) _.grammar = grammar;\r\n\tif (typeof options !== 'undefined' && options.async) _.async = options.async;\r\n\tif (main === true) _.main = true;\r\n\tif (return_type) _.return_type = return_type;\r\n\tif (return_subtype) _.return_subtype = return_subtype;\r\n\tif (pure) _.pure = pure;\r\n\tif (tm_sig_fns) _.map_sigs = tm_sig_fns;\r\n\tif (Object.keys(_).length > 0) {\r\n\t\tres._ = _;\r\n\t}\r\n\treturn res;\r\n}\r\nconst convert = (input, conversion_schema) => {}\r\nlet arrayify = fp(function (a, sig) {\r\n\tlet param_index, num_parallel = 1,\r\n\t\tdelay = 0,\r\n\t\tfn;\r\n\tlet res;\r\n\tlet process_as_fn = function () {\r\n\t\tres = function () {\r\n\t\t\tlet a = arr_like_to_arr(arguments),\r\n\t\t\t\tts = atof(a),\r\n\t\t\t\tt = this;\r\n\t\t\tlet last_arg = a[a.length - 1];\r\n\t\t\tif (tof(last_arg) == 'function') {\r\n\t\t\t\tif (typeof param_index !== 'undefined' && ts[param_index] == 'array') {\r\n\t\t\t\t\tlet res = [];\r\n\t\t\t\t\tlet fns = [];\r\n\t\t\t\t\teach(a[param_index], function (v, i) {\r\n\t\t\t\t\t\tlet new_params = a.slice(0, a.length - 1);\r\n\t\t\t\t\t\tnew_params[param_index] = v;\r\n\t\t\t\t\t\tfns.push([t, fn, new_params]);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tcall_multiple_callback_functions(fns, num_parallel, delay, (err, res) => {\r\n\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\tconsole.trace();\r\n\t\t\t\t\t\t\tthrow err;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tlet a = [];\r\n\t\t\t\t\t\t\ta = a.concat.apply(a, res);\r\n\t\t\t\t\t\t\tlet callback = last_arg;\r\n\t\t\t\t\t\t\tcallback(null, a);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn fn.apply(t, a);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (typeof param_index !== 'undefined' && ts[param_index] == 'array') {\r\n\t\t\t\t\tlet res = [];\r\n\t\t\t\t\tfor (let c = 0, l = a[param_index].length; c < l; c++) {\r\n\t\t\t\t\t\ta[param_index] = arguments[param_index][c];\r\n\t\t\t\t\t\tlet result = fn.apply(t, a);\r\n\t\t\t\t\t\tres.push(result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn res;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn fn.apply(t, a);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\tif (sig == '[o]') {\r\n\t\tlet res = [];\r\n\t\teach(a[0], function (v, i) {\r\n\t\t\tres.push([v, i]);\r\n\t\t});\r\n\t} else if (sig == '[f]') {\r\n\t\tparam_index = 0, fn = a[0];\r\n\t\tprocess_as_fn();\r\n\t} else if (sig == '[n,f]') {\r\n\t\tparam_index = a[0], fn = a[1];\r\n\t\tprocess_as_fn();\r\n\t} else if (sig == '[n,n,f]') {\r\n\t\tparam_index = a[0], num_parallel = a[1], fn = a[2];\r\n\t\tprocess_as_fn();\r\n\t} else if (sig == '[n,n,n,f]') {\r\n\t\tparam_index = a[0], num_parallel = a[1], delay = a[2], fn = a[3];\r\n\t\tprocess_as_fn();\r\n\t}\r\n\treturn res;\r\n});\r\nlet mapify = (target) => {\r\n\tlet tt = tof(target);\r\n\tif (tt == 'function') {\r\n\t\tlet res = fp(function (a, sig) {\r\n\t\t\tlet that = this;\r\n\t\t\tif (sig == '[o]') {\r\n\t\t\t\tlet map = a[0];\r\n\t\t\t\teach(map, function (v, i) {\r\n\t\t\t\t\ttarget.call(that, v, i);\r\n\t\t\t\t});\r\n\t\t\t} else if (sig == '[o,f]') {\r\n\t\t\t\tlet map = a[0];\r\n\t\t\t\tlet callback = a[1];\r\n\t\t\t\tlet fns = [];\r\n\t\t\t\teach(map, function (v, i) {\r\n\t\t\t\t\tfns.push([target, [v, i]]);\r\n\t\t\t\t});\r\n\t\t\t\tcall_multi(fns, function (err_multi, res_multi) {\r\n\t\t\t\t\tif (err_multi) {\r\n\t\t\t\t\t\tcallback(err_multi);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcallback(null, res_multi);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t} else if (a.length >= 2) {\r\n\t\t\t\ttarget.apply(this, a);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn res;\r\n\t} else if (tt == 'array') {\r\n\t\tlet res = {};\r\n\t\tif (arguments.length == 1) {\r\n\t\t\tif (is_arr_of_strs(target)) {\r\n\t\t\t\teach(target, function (v, i) {\r\n\t\t\t\t\tres[v] = true;\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\teach(target, function (v, i) {\r\n\t\t\t\t\tres[v[0]] = v[1];\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tlet by_property_name = arguments[1];\r\n\t\t\teach(target, function (v, i) {\r\n\t\t\t\tres[v[by_property_name]] = v;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n};\r\nlet clone = fp((a, sig) => {\r\n\tlet obj = a[0];\r\n\tif (a.l === 1) {\r\n\t\tif (obj && typeof obj.clone === 'function') {\r\n\t\t\treturn obj.clone();\r\n\t\t} else {\r\n\t\t\tlet t = tof(obj);\r\n\t\t\tif (t === 'array') {\r\n\t\t\t\tlet res = [];\r\n\t\t\t\teach(obj, v => {\r\n\t\t\t\t\tres.push(clone(v));\r\n\t\t\t\t});\r\n\t\t\t\treturn res;\r\n\t\t\t} else if (t === 'undefined') {\r\n\t\t\t\treturn undefined;\r\n\t\t\t} else if (t === 'string') {\r\n\t\t\t\treturn obj;\r\n\t\t\t} else if (t === 'number') {\r\n\t\t\t\treturn obj;\r\n\t\t\t} else if (t === 'function') {\r\n\t\t\t\treturn obj;\r\n\t\t\t} else if (t === 'boolean') {\r\n\t\t\t\treturn obj;\r\n\t\t\t} else if (t === 'null') {\r\n\t\t\t\treturn obj;\r\n\t\t\t} else {\r\n\t\t\t\treturn Object.assign({}, obj);\r\n\t\t\t}\r\n\t\t}\r\n\t} else if (a.l === 2 && tof(a[1]) === 'number') {\r\n\t\tlet res = [];\r\n\t\tfor (let c = 0; c < a[1]; c++) {\r\n\t\t\tres.push(clone(obj));\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n});\r\nlet set_vals = function (obj, map) {\r\n\teach(map, function (v, i) {\r\n\t\tobj[i] = v;\r\n\t});\r\n};\r\nlet ll_set = (obj, prop_name, prop_value) => {\r\n\tlet arr = prop_name.split('.');\r\n\tlet c = 0,\r\n\t\tl = arr.length;\r\n\tlet i = obj._ || obj,\r\n\t\ts;\r\n\twhile (c < l) {\r\n\t\ts = arr[c];\r\n\t\tif (typeof i[s] == 'undefined') {\r\n\t\t\tif (c - l == -1) {\r\n\t\t\t\ti[s] = prop_value;\r\n\t\t\t} else {\r\n\t\t\t\ti[s] = {};\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (c - l == -1) {\r\n\t\t\t\ti[s] = prop_value;\r\n\t\t\t}\r\n\t\t}\r\n\t\ti = i[s];\r\n\t\tc++;\r\n\t};\r\n\treturn prop_value;\r\n};\r\nlet ll_get = (a0, a1) => {\r\n\tif (a0 && a1) {\r\n\t\tlet i = a0._ || a0;\r\n\t\tif (a1 == '.') {\r\n\t\t\tif (typeof i['.'] == 'undefined') {\r\n\t\t\t\treturn undefined;\r\n\t\t\t} else {\r\n\t\t\t\treturn i['.'];\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tlet arr = a1.split('.');\r\n\t\t\tlet c = 0,\r\n\t\t\t\tl = arr.length,\r\n\t\t\t\ts;\r\n\t\t\twhile (c < l) {\r\n\t\t\t\ts = arr[c];\r\n\t\t\t\tif (typeof i[s] == 'undefined') {\r\n\t\t\t\t\tif (c - l == -1) {} else {\r\n\t\t\t\t\t\tthrow 'object ' + s + ' not found';\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (c - l == -1) {\r\n\t\t\t\t\t\treturn i[s];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\ti = i[s];\r\n\t\t\t\tc++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\nlet truth = function (value) {\r\n\treturn value === true;\r\n};\r\nlet iterate_ancestor_classes = (obj, callback) => {\r\n\tlet ctu = true;\r\n\tlet stop = () => {\r\n\t\tctu = false;\r\n\t}\r\n\tcallback(obj, stop);\r\n\tif (obj._superclass && ctu) {\r\n\t\titerate_ancestor_classes(obj._superclass, callback);\r\n\t}\r\n}\r\nlet is_arr_of_t = function (obj, type_name) {\r\n\tlet t = tof(obj),\r\n\t\ttv;\r\n\tif (t === 'array') {\r\n\t\tlet res = true;\r\n\t\teach(obj, function (v, i) {\r\n\t\t\ttv = tof(v);\r\n\t\t\tif (tv != type_name) res = false;\r\n\t\t});\r\n\t\treturn res;\r\n\t} else {\r\n\t\treturn false;\r\n\t}\r\n}\r\nlet is_arr_of_arrs = function (obj) {\r\n\treturn is_arr_of_t(obj, 'array');\r\n}\r\nlet is_arr_of_strs = function (obj) {\r\n\treturn is_arr_of_t(obj, 'string');\r\n}\r\nlet input_processors = {};\r\nlet output_processors = {};\r\nlet call_multiple_callback_functions = fp(function (a, sig) {\r\n\tlet arr_functions_params_pairs, callback, return_params = false;\r\n\tlet delay;\r\n\tlet num_parallel = 1;\r\n\tif (a.l === 1) {\r\n\t} else if (a.l === 2) {\r\n\t\tarr_functions_params_pairs = a[0];\r\n\t\tcallback = a[1];\r\n\t} else if (a.l === 3) {\r\n\t\tif (sig === '[a,n,f]') {\r\n\t\t\tarr_functions_params_pairs = a[0];\r\n\t\t\tnum_parallel = a[1];\r\n\t\t\tcallback = a[2];\r\n\t\t} else if (sig === '[n,a,f]') {\r\n\t\t\tarr_functions_params_pairs = a[1];\r\n\t\t\tnum_parallel = a[0];\r\n\t\t\tcallback = a[2];\r\n\t\t} else if (sig === '[a,f,b]') {\r\n\t\t\tarr_functions_params_pairs = a[0];\r\n\t\t\tcallback = a[1];\r\n\t\t\treturn_params = a[2];\r\n\t\t}\r\n\t} else if (a.l === 4) {\r\n\t\tif (sig === '[a,n,n,f]') {\r\n\t\t\tarr_functions_params_pairs = a[0];\r\n\t\t\tnum_parallel = a[1];\r\n\t\t\tdelay = a[2];\r\n\t\t\tcallback = a[3];\r\n\t\t} else if (sig == '[n,n,a,f]') {\r\n\t\t\tarr_functions_params_pairs = a[2];\r\n\t\t\tnum_parallel = a[0];\r\n\t\t\tdelay = a[1];\r\n\t\t\tcallback = a[3];\r\n\t\t}\r\n\t}\r\n\tlet res = [];\r\n\tlet l = arr_functions_params_pairs.length;\r\n\tlet c = 0;\r\n\tlet count_unfinished = l;\r\n\tlet num_currently_executing = 0;\r\n\tlet process = delay => {\r\n\t\tnum_currently_executing++;\r\n\t\tlet main = () => {\r\n\t\t\tlet pair = arr_functions_params_pairs[c];\r\n\t\t\tlet context;\r\n\t\t\tlet fn, params, fn_callback;\r\n\t\t\tlet pair_sig = get_item_sig(pair);\r\n\t\t\tlet t_pair = tof(pair);\r\n\t\t\tif (t_pair == 'function') {\r\n\t\t\t\tfn = pair;\r\n\t\t\t\tparams = [];\r\n\t\t\t} else {\r\n\t\t\t\tif (pair) {\r\n\t\t\t\t\tif (pair.length == 1) {}\r\n\t\t\t\t\tif (pair.length == 2) {\r\n\t\t\t\t\t\tif (tof(pair[1]) == 'function') {\r\n\t\t\t\t\t\t\tcontext = pair[0];\r\n\t\t\t\t\t\t\tfn = pair[1];\r\n\t\t\t\t\t\t\tparams = [];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tfn = pair[0];\r\n\t\t\t\t\t\t\tparams = pair[1];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (pair.length == 3) {\r\n\t\t\t\t\t\tif (tof(pair[0]) === 'function' && tof(pair[1]) === 'array' && tof(pair[2]) === 'function') {\r\n\t\t\t\t\t\t\tfn = pair[0];\r\n\t\t\t\t\t\t\tparams = pair[1];\r\n\t\t\t\t\t\t\tfn_callback = pair[2];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (tof(pair[1]) === 'function' && tof(pair[2]) === 'array') {\r\n\t\t\t\t\t\t\tcontext = pair[0];\r\n\t\t\t\t\t\t\tfn = pair[1];\r\n\t\t\t\t\t\t\tparams = pair[2];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (pair.length == 4) {\r\n\t\t\t\t\t\tcontext = pair[0];\r\n\t\t\t\t\t\tfn = pair[1];\r\n\t\t\t\t\t\tparams = pair[2];\r\n\t\t\t\t\t\tfn_callback = pair[3];\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {}\r\n\t\t\t}\r\n\t\t\tlet i = c;\r\n\t\t\tc++;\r\n\t\t\tlet cb = (err, res2) => {\r\n\t\t\t\tnum_currently_executing--;\r\n\t\t\t\tcount_unfinished--;\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tlet stack = new Error().stack;\r\n\t\t\t\t\tcallback(err);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (return_params) {\r\n\t\t\t\t\t\tres[i] = [params, res2];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tres[i] = res2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (fn_callback) {\r\n\t\t\t\t\t\tfn_callback(null, res2);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (c < l) {\r\n\t\t\t\t\t\tif (num_currently_executing < num_parallel) {\r\n\t\t\t\t\t\t\tprocess(delay);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (count_unfinished <= 0) {\r\n\t\t\t\t\t\t\tcallback(null, res);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tlet arr_to_call = params || [];\r\n\t\t\tarr_to_call.push(cb);\r\n\t\t\tif (fn) {\r\n\t\t\t\tif (context) {\r\n\t\t\t\t\tfn.apply(context, arr_to_call);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfn.apply(this, arr_to_call);\r\n\t\t\t\t}\r\n\t\t\t} else {}\r\n\t\t}\r\n\t\tif (arr_functions_params_pairs[c]) {\r\n\t\t\tif (delay) {\r\n\t\t\t\tsetTimeout(main, delay);\r\n\t\t\t} else {\r\n\t\t\t\tmain();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (arr_functions_params_pairs.length > 0) {\r\n\t\twhile ((c < l) && (num_currently_executing < num_parallel)) {\r\n\t\t\tif (delay) {\r\n\t\t\t\tprocess(delay * c);\r\n\t\t\t} else {\r\n\t\t\t\tprocess();\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\tif (callback) {}\r\n\t}\r\n});\r\nlet multi = call_multiple_callback_functions;\r\nlet call_multi = call_multiple_callback_functions;\r\nlet Fns = function (arr) {\r\n\tlet fns = arr || [];\r\n\tfns.go = function (parallel, delay, callback) {\r\n\t\tlet a = arguments;\r\n\t\tlet al = a.length;\r\n\t\tif (al == 1) {\r\n\t\t\tcall_multi(fns, a[0]);\r\n\t\t}\r\n\t\tif (al == 2) {\r\n\t\t\tcall_multi(parallel, fns, delay);\r\n\t\t}\r\n\t\tif (al == 3) {\r\n\t\t\tcall_multi(parallel, delay, fns, callback);\r\n\t\t}\r\n\t}\r\n\treturn fns;\r\n}\r\nlet native_constructor_tof = function (value) {\r\n\tif (value === String) {\r\n\t\treturn 'String';\r\n\t}\r\n\tif (value === Number) {\r\n\t\treturn 'Number';\r\n\t}\r\n\tif (value === Boolean) {\r\n\t\treturn 'Boolean';\r\n\t}\r\n\tif (value === Array) {\r\n\t\treturn 'Array';\r\n\t}\r\n\tif (value === Object) {\r\n\t\treturn 'Object';\r\n\t}\r\n}\r\nlet sig_match = function (sig1, sig2) {\r\n\tlet sig1_inner = sig1.substr(1, sig1.length - 2);\r\n\tlet sig2_inner = sig2.substr(1, sig2.length - 2);\r\n\tif (sig1_inner.indexOf('[') > -1 || sig1_inner.indexOf(']') > -1 || sig2_inner.indexOf('[') > -1 || sig2_inner.indexOf(']') > -1) {\r\n\t\tthrow 'sig_match only supports flat signatures.';\r\n\t}\r\n\tlet sig1_parts = sig1_inner.split(',');\r\n\tlet sig2_parts = sig2_inner.split(',');\r\n\tlet res = true;\r\n\tif (sig1_parts.length == sig2_parts.length) {\r\n\t\tlet c = 0,\r\n\t\t\tl = sig1_parts.length,\r\n\t\t\ti1, i2;\r\n\t\twhile (res && c < l) {\r\n\t\t\ti1 = sig1_parts[c];\r\n\t\t\ti2 = sig2_parts[c];\r\n\t\t\tif (i1 === i2) {} else {\r\n\t\t\t\tif (i1 !== '?') {\r\n\t\t\t\t\tres = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tc++;\r\n\t\t}\r\n\t\treturn res;\r\n\t} else {\r\n\t\treturn false;\r\n\t}\r\n}\r\nlet remove_sig_from_arr_shell = function (sig) {\r\n\tif (sig[0] == '[' && sig[sig.length - 1] == ']') {\r\n\t\treturn sig.substring(1, sig.length - 1);\r\n\t}\r\n\treturn sig;\r\n};\r\nlet str_arr_mapify = function (fn) {\r\n\tlet res = fp(function (a, sig) {\r\n\t\tif (a.l == 1) {\r\n\t\t\tif (sig == '[s]') {\r\n\t\t\t\tlet s_pn = a[0].split(' ');\r\n\t\t\t\tif (s_pn.length > 1) {\r\n\t\t\t\t\treturn res.call(this, s_pn);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn fn.call(this, a[0]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (tof(a[0]) == 'array') {\r\n\t\t\t\tlet res2 = {},\r\n\t\t\t\t\tthat = this;\r\n\t\t\t\teach(a[0], function (v, i) {\r\n\t\t\t\t\tres2[v] = fn.call(that, v);\r\n\t\t\t\t});\r\n\t\t\t\treturn res2;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\treturn res;\r\n};\r\nlet to_arr_strip_keys = (obj) => {\r\n\tlet res = [];\r\n\teach(obj, v => {\r\n\t\tres.push(v);\r\n\t});\r\n\treturn res;\r\n}\r\nlet arr_objs_to_arr_keys_values_table = (arr_objs) => {\r\n\tlet keys = Object.keys(arr_objs[0]);\r\n\tlet arr_items = [],\r\n\t\tarr_values;\r\n\teach(arr_objs, (item) => {\r\n\t\tarr_items.push(to_arr_strip_keys(item));\r\n\t});\r\n\treturn [keys, arr_items];\r\n}\r\nlet set_arr_tree_value = (arr_tree, arr_path, value) => {\r\n\tlet item_current = arr_tree;\r\n\tlet last_item_current, last_path_item;\r\n\teach(arr_path, (path_item) => {\r\n\t\tlast_item_current = item_current;\r\n\t\titem_current = item_current[path_item];\r\n\t\tlast_path_item = path_item;\r\n\t});\r\n\tlast_item_current[last_path_item] = value;\r\n}\r\nlet get_arr_tree_value = (arr_tree, arr_path) => {\r\n\tlet item_current = arr_tree;\r\n\teach(arr_path, (path_item) => {\r\n\t\titem_current = item_current[path_item];\r\n\t});\r\n\treturn item_current;\r\n}\r\nlet deep_arr_iterate = (arr, path = [], callback) => {\r\n\tif (arguments.length === 2) {\r\n\t\tcallback = path;\r\n\t\tpath = [];\r\n\t}\r\n\teach(arr, (item, i) => {\r\n\t\tlet c_path = clone(path);\r\n\t\tc_path.push(i);\r\n\t\tlet t = tof(item);\r\n\t\tif (t === 'array') {\r\n\t\t\tdeep_arr_iterate(item, c_path, callback);\r\n\t\t} else {\r\n\t\t\tcallback(c_path, item);\r\n\t\t}\r\n\t})\r\n}\r\nlet prom = (fn) => {\r\n\tlet fn_res = function () {\r\n\t\tconst a = arguments;\r\n\t\tconst t_a_last = typeof a[a.length - 1];\r\n\t\tif (t_a_last === 'function') {\r\n\t\t\tfn.apply(this, a);\r\n\t\t} else {\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\t[].push.call(a, (err, res) => {\r\n\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\treject(err);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tresolve(res);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tfn.apply(this, a);\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\treturn fn_res;\r\n}\r\nconst vectorify = n_fn => {\r\n\tlet fn_res = fp(function (a, sig) {\r\n\t\tif (a.l > 2) {\r\n\t\t\tthrow 'stop - need to check.'\r\n\t\t\tlet res = a[0];\r\n\t\t\tfor (let c = 1, l = a.l; c < l; c++) {\r\n\t\t\t\tres = fn_res(res, a[c]);\r\n\t\t\t}\r\n\t\t\treturn res;\r\n\t\t} else {\r\n\t\t\tif (sig === '[n,n]') {\r\n\t\t\t\treturn n_fn(a[0], a[1]);\r\n\t\t\t} else {\r\n\t\t\t\tconst ats = atof(a);\r\n\t\t\t\tif (ats[0] === 'array') {\r\n\t\t\t\t\tif (ats[1] === 'number') {\r\n\t\t\t\t\t\tconst res = [],\r\n\t\t\t\t\t\t\tn = a[1],\r\n\t\t\t\t\t\t\tl = a[0].length\r\n\t\t\t\t\t\tlet c;\r\n\t\t\t\t\t\tfor (c = 0; c < l; c++) {\r\n\t\t\t\t\t\t\tres.push(fn_res(a[0][c], n));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn res;\r\n\t\t\t\t\t} else if (ats[1] === 'array') {\r\n\t\t\t\t\t\tif (ats[0].length !== ats[1].length) {\r\n\t\t\t\t\t\t\tthrow 'vector array lengths mismatch';\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconst l = a[0].length, res = new Array(l),\r\n\t\t\t\t\t\t\t\tarr2 = a[1];\r\n\t\t\t\t\t\t\tfor (let c = 0; c < l; c++) {\r\n\t\t\t\t\t\t\t\tres[c] = fn_res(a[0][c], arr2[c]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn res;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t});\r\n\treturn fn_res;\r\n};\r\nconst n_add = (n1, n2) => n1 + n2,\r\n\tn_subtract = (n1, n2) => n1 - n2,\r\n\tn_multiply = (n1, n2) => n1 * n2,\r\n\tn_divide = (n1, n2) => n1 / n2;\r\nconst v_add = vectorify(n_add),\r\n\tv_subtract = vectorify(n_subtract),\r\n\tv_multiply = vectorify(n_multiply),\r\n\tv_divide = vectorify(n_divide);\r\nconst vector_magnitude = function (vector) {\r\n\t// may calculate magnitudes of larger dimension vectors too.\r\n\t// alert(tof(vector[0]));\r\n\t// alert(vector[0] ^ 2);\r\n\tvar res = Math.sqrt((Math.pow(vector[0], 2)) + (Math.pow(vector[1], 2)));\r\n\treturn res;\r\n};\r\nconst distance_between_points = function (points) {\r\n\tvar offset = v_subtract(points[1], points[0]);\r\n\t//console.log('offset ' + stringify(offset));\r\n\treturn vector_magnitude(offset);\r\n}\r\n// ui8c?\r\n//  ui8x???  for both?\r\n//  \r\n// Getting into some lower level types here.\r\n//   Consider specifying endianness for numbers.\r\n// Specify things from the basics.\r\n//   Have the descriptions make sense in English and programatically.\r\n//   Have it understand the descriptions of data types including signifiers and representations.\r\n// srtype.add_representation(...)\r\n//   .representations.add\r\n// or 'rep' function.\r\n//  rep(str_tsig_name, definition of representaion / instructions)\r\nconst map_tas_by_type = {\r\n\t'c': Uint8ClampedArray,\r\n\t'ui8': Uint8Array,\r\n\t'i16': Int16Array,\r\n\t'i32': Int32Array,\r\n\t'ui16': Uint16Array,\r\n\t'ui32': Uint32Array,\r\n\t'f32': Float32Array,\r\n\t'f64': Float64Array\r\n}\r\nconst get_typed_array = function () {\r\n\tconst a = arguments;\r\n\tlet length, input_array;\r\n\tconst type = a[0];\r\n\tif (is_array(a[1])) {\r\n\t\tinput_array = a[1];\r\n\t} else {\r\n\t\tlength = a[1];\r\n\t}\r\n\tconst ctr = map_tas_by_type[type];\r\n\tif (ctr) {\r\n\t\tif (input_array) {\r\n\t\t\treturn new ctr(input_array);\r\n\t\t} else if (length) {\r\n\t\t\treturn new ctr(length);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Grammar class may be a bit tricky / complex.\r\n//   Maybe it will help because it can be used to define objects easily???\r\n//   Maybe need to get into much more detail??? Maybe a quick and efficient piece of grammar code could work here.\r\n\r\nclass Grammar {\r\n\tconstructor(spec) {\r\n\t\tconst eg_spec = {\r\n\t\t\tname: 'User Auth Grammar'\r\n\t\t}\r\n\t\tconst {\r\n\t\t\tname\r\n\t\t} = spec;\r\n\t\tthis.name = name;\r\n\t\tconst eg_indexing = () => {\r\n\t\t\tlet map_sing_plur = {};\r\n\t\t\tlet map_plur_sing = {};\r\n\t\t\tlet map_sing_def = {};\r\n\t\t\tlet map_sig_sing = {};\r\n\t\t\tlet map_sig0_sing = {};\r\n\t\t\tlet map_sig1_sing = {};\r\n\t\t\tlet map_sig2_sing = {};\r\n\t\t}\r\n\t\tthis.maps = {\r\n\t\t\tsing_plur: {},\r\n\t\t\tplur_sing: {},\r\n\t\t\tsing_def: {},\r\n\t\t\tdeep_sig_sing: {},\r\n\t\t\tobj_sig_sing: {},\r\n\t\t\tsig_levels_sing: {}\r\n\t\t}\r\n\t\tthis.load_grammar(spec.def);\r\n\t}\r\n\tload_grammar(grammar_def) {\r\n\t\tconst {\r\n\t\t\tsing_plur,\r\n\t\t\tplur_sing,\r\n\t\t\tsing_def,\r\n\t\t\tsig_levels_sing,\r\n\t\t\tdeep_sig_sing,\r\n\t\t\tobj_sig_sing\r\n\t\t} = this.maps;\r\n\t\tconst resolve_def = (def) => {\r\n\t\t\tconst td = tf(def);\r\n\t\t\tif (td === 'a') {\r\n\t\t\t\tconst res = [];\r\n\t\t\t\teach(def, def_item => {\r\n\t\t\t\t\tres.push(resolve_def(def_item));\r\n\t\t\t\t});\r\n\t\t\t\treturn res;\r\n\t\t\t} else if (td === 's') {\r\n\t\t\t\tif (def === 'string') {\r\n\t\t\t\t\treturn 'string';\r\n\t\t\t\t} else if (def === 'number') {\r\n\t\t\t\t\treturn 'number';\r\n\t\t\t\t} else if (def === 'boolean') {\r\n\t\t\t\t\treturn 'boolean';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst found_sing_def = sing_def[def];\r\n\t\t\t\t\treturn found_sing_def;\r\n\t\t\t\t}\r\n\t\t\t} else if (td === 'n') {\r\n\t\t\t\tconsole.trace();\r\n\t\t\t\tthrow 'NYI';\r\n\t\t\t} else if (td === 'b') {\r\n\t\t\t\tconsole.trace();\r\n\t\t\t\tthrow 'NYI';\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst resolved_def_to_sig = (resolved_def, level = 0) => {\r\n\t\t\tconst trd = tf(resolved_def);\r\n\t\t\tif (trd === 's') {\r\n\t\t\t\tif (resolved_def === 'string') {\r\n\t\t\t\t\treturn 's'\r\n\t\t\t\t} else if (resolved_def === 'number') {\r\n\t\t\t\t\treturn 'n'\r\n\t\t\t\t} else if (resolved_def === 'boolean') {\r\n\t\t\t\t\treturn 'b'\r\n\t\t\t\t}\r\n\t\t\t} else if (trd === 'a') {\r\n\t\t\t\tlet res = '';\r\n\t\t\t\tif (level === 0) {} else {\r\n\t\t\t\t\tres = res + '[';\r\n\t\t\t\t}\r\n\t\t\t\teach(resolved_def, (item, c) => {\r\n\t\t\t\t\tif (c > 0) {\r\n\t\t\t\t\t\tres = res + ',';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tres = res + resolved_def_to_sig(item, level + 1);\r\n\t\t\t\t});\r\n\t\t\t\tif (level === 0) {} else {\r\n\t\t\t\t\tres = res + ']';\r\n\t\t\t\t}\r\n\t\t\t\treturn res;\r\n\t\t\t} else {\r\n\t\t\t\tconsole.trace();\r\n\t\t\t\tthrow 'NYI';\r\n\t\t\t}\r\n\t\t\treturn res;\r\n\t\t}\r\n\t\teach(grammar_def, (def1, sing_word) => {\r\n\t\t\tconst {\r\n\t\t\t\tdef,\r\n\t\t\t\tplural\r\n\t\t\t} = def1;\r\n\t\t\tsing_def[sing_word] = def;\r\n\t\t\tsing_plur[sing_word] = plural;\r\n\t\t\tplur_sing[plural] = sing_word;\r\n\t\t\tconst tdef = tf(def);\r\n\t\t\tconst resolved_def = resolve_def(def);\r\n\t\t\tconst resolved_def_sig = resolved_def_to_sig(resolved_def);\r\n\t\t\tdeep_sig_sing[resolved_def_sig] = deep_sig_sing[resolved_def_sig] || [];\r\n\t\t\tdeep_sig_sing[resolved_def_sig].push(sing_word);\r\n\t\t\tlet def_is_all_custom_types = true;\r\n\t\t\teach(def, (def_item, c, stop) => {\r\n\t\t\t\tconst tdi = tf(def_item);\r\n\t\t\t\tif (tdi === 's') {\r\n\t\t\t\t\tif (sing_def[def_item]) {} else {\r\n\t\t\t\t\t\tdef_is_all_custom_types = false;\r\n\t\t\t\t\t\tstop();\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdef_is_all_custom_types = false;\r\n\t\t\t\t\tstop();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tlet obj_sig;\r\n\t\t\tif (def_is_all_custom_types) {\r\n\t\t\t\tobj_sig = '{';\r\n\t\t\t\teach(def, (def_item, c, stop) => {\r\n\t\t\t\t\tif (c > 0) {\r\n\t\t\t\t\t\tobj_sig = obj_sig + ',';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst resolved = resolve_def(def_item);\r\n\t\t\t\t\tconst abr_resolved = resolved_def_to_sig(resolved);\r\n\t\t\t\t\tobj_sig = obj_sig + '\"' + def_item + '\":'\r\n\t\t\t\t\tobj_sig = obj_sig + abr_resolved;\r\n\t\t\t\t});\r\n\t\t\t\tobj_sig = obj_sig + '}';\r\n\t\t\t}\r\n\t\t\tif (obj_sig) {\r\n\t\t\t\tobj_sig_sing[obj_sig] = obj_sig_sing[obj_sig] || [];\r\n\t\t\t\tobj_sig_sing[obj_sig].push(sing_word);\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\ttof(item) {\r\n\t\tconst {\r\n\t\t\tsing_plur,\r\n\t\t\tplur_sing,\r\n\t\t\tsing_def,\r\n\t\t\tsig_levels_sing,\r\n\t\t\tdeep_sig_sing,\r\n\t\t\tobj_sig_sing\r\n\t\t} = this.maps;\r\n\t\tconst titem = tf(item);\r\n\t\tconsole.log('titem', titem);\r\n\t\tif (titem === 'a') {\r\n\t\t\tlet all_arr_items_type;\r\n\t\t\teach(item, (subitem, c, stop) => {\r\n\t\t\t\tconst subitem_type = this.tof(subitem);\r\n\t\t\t\tconsole.log('subitem_type', subitem_type);\r\n\t\t\t\tif (c === 0) {\r\n\t\t\t\t\tall_arr_items_type = subitem_type;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (all_arr_items_type === subitem_type) {} else {\r\n\t\t\t\t\t\tall_arr_items_type = null;\r\n\t\t\t\t\t\tstop();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tif (all_arr_items_type) {\r\n\t\t\t\tconsole.log('has all_arr_items_type', all_arr_items_type);\r\n\t\t\t\tif (!map_native_types[all_arr_items_type]) {\r\n\t\t\t\t\tconst res = sing_plur[all_arr_items_type];\r\n\t\t\t\t\treturn res;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log('no all_arr_items_type');\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn tof(item);\r\n\t\t}\r\n\t\tconst item_deep_sig = deep_sig(item);\r\n\t\tconsole.log('Grammar tof() item_deep_sig', item_deep_sig);\r\n\t\tlet arr_sing;\r\n\t\tif (titem === 'a') {\r\n\t\t\tconst unenclosed_sig = item_deep_sig.substring(1, item_deep_sig.length - 1);\r\n\t\t\tconsole.log('unenclosed_sig', unenclosed_sig);\r\n\t\t\tarr_sing = deep_sig_sing[unenclosed_sig];\r\n\t\t} else {\r\n\t\t\tarr_sing = deep_sig_sing[item_deep_sig];\r\n\t\t}\r\n\t\tif (arr_sing) {\r\n\t\t\tif (arr_sing.length === 1) {\r\n\t\t\t\treturn arr_sing[0];\r\n\t\t\t} else {\r\n\t\t\t\tconsole.trace();\r\n\t\t\t\tthrow 'NYI';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tsig(item, max_depth = -1, depth = 0) {\r\n\t\tconst {\r\n\t\t\tsing_plur,\r\n\t\t\tplur_sing,\r\n\t\t\tsing_def,\r\n\t\t\tsig_levels_sing,\r\n\t\t\tdeep_sig_sing,\r\n\t\t\tobj_sig_sing\r\n\t\t} = this.maps;\r\n\t\tconst extended_sig = item => {\r\n\t\t\tconst ti = tf(item);\r\n\t\t\tlet res = '';\r\n\t\t\tlet same_grammar_type;\r\n\t\t\tconst record_subitem_sigs = item => {\r\n\t\t\t\tsame_grammar_type = undefined;\r\n\t\t\t\tlet same_sig = undefined;\r\n\t\t\t\teach(item, (subitem, c) => {\r\n\t\t\t\t\tif (c > 0) {\r\n\t\t\t\t\t\tres = res + ',';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst sig_subitem = this.sig(subitem, max_depth, depth + 1);\r\n\t\t\t\t\tif (same_sig === undefined) {\r\n\t\t\t\t\t\tsame_sig = sig_subitem;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (sig_subitem !== same_sig) {\r\n\t\t\t\t\t\t\tsame_sig = false;\r\n\t\t\t\t\t\t\tsame_grammar_type = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (same_sig) {\r\n\t\t\t\t\t\tif (sing_def[sig_subitem]) {\r\n\t\t\t\t\t\t\tif (same_grammar_type === undefined) {\r\n\t\t\t\t\t\t\t\tsame_grammar_type = sig_subitem;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tif (same_grammar_type === sig_subitem) {} else {\r\n\t\t\t\t\t\t\t\t\tsame_grammar_type = false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tres = res + sig_subitem;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (ti === 'A') {\r\n\t\t\t\trecord_subitem_sigs(item);\r\n\t\t\t\treturn res;\r\n\t\t\t} else if (ti === 'a') {\r\n\t\t\t\trecord_subitem_sigs(item);\r\n\t\t\t\tif (same_grammar_type) {\r\n\t\t\t\t\tconst plur_name = sing_plur[same_grammar_type];\r\n\t\t\t\t\treturn plur_name;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst found_obj_type = obj_sig_sing[res];\r\n\t\t\t\t\tconst found_deep_sig_type = deep_sig_sing[res];\r\n\t\t\t\t\tlet found_type_sing;\r\n\t\t\t\t\tif (found_deep_sig_type) {\r\n\t\t\t\t\t\tif (found_deep_sig_type.length === 1) {\r\n\t\t\t\t\t\t\tfound_type_sing = found_deep_sig_type[0];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (found_type_sing) {\r\n\t\t\t\t\t\treturn found_type_sing;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconst enclosed_res = '[' + res + ']';\r\n\t\t\t\t\t\treturn enclosed_res;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if (ti === 'o') {\r\n\t\t\t\tif (max_depth === -1 || depth <= max_depth) {\r\n\t\t\t\t\tres = res + '{';\r\n\t\t\t\t\tlet first = true;\r\n\t\t\t\t\teach(item, (value, key) => {\r\n\t\t\t\t\t\tconst vsig = this.sig(value, max_depth, depth + 1);\r\n\t\t\t\t\t\tif (!first) {\r\n\t\t\t\t\t\t\tres = res + ',';\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tfirst = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tres = res + '\"' + key + '\":' + vsig;\r\n\t\t\t\t\t});\r\n\t\t\t\t\tres = res + '}';\r\n\t\t\t\t\treturn res;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn 'o';\r\n\t\t\t\t}\r\n\t\t\t} else if (ti === 's' || ti === 'n' || ti === 'b') {\r\n\t\t\t\treturn ti;\r\n\t\t\t} else {\r\n\t\t\t\treturn ti;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn extended_sig(item);\r\n\t}\r\n\tsingle_forms_sig(item) {\r\n\t\tconst {\r\n\t\t\tsing_plur,\r\n\t\t\tplur_sing,\r\n\t\t\tsing_def,\r\n\t\t\tsig_levels_sing,\r\n\t\t\tdeep_sig_sing,\r\n\t\t\tobj_sig_sing\r\n\t\t} = this.maps;\r\n\t\tlet sig = this.sig(item);\r\n\t\tlet s_sig = sig.split(',');\r\n\t\tconst arr_res = [];\r\n\t\teach(s_sig, (sig_item, c) => {\r\n\t\t\tconst sing = plur_sing[sig_item] || sig_item;\r\n\t\t\tarr_res.push(sing);\r\n\t\t});\r\n\t\tconst res = arr_res.join(',');\r\n\t\treturn res;\r\n\t}\r\n}\r\nclass Evented_Class {\r\n\t'constructor'() {\r\n\t\tObject.defineProperty(this, '_bound_events', {\r\n\t\t\tvalue: {}\r\n\t\t});\r\n\t}\r\n\t'raise_event'() {\r\n\t\tlet a = Array.prototype.slice.call(arguments),\r\n\t\t\tsig = get_a_sig(a);\r\n\t\ta.l = a.length;\r\n\t\tlet target = this;\r\n\t\tlet c, l, res;\r\n\t\tif (sig === '[s]') {\r\n\t\t\tlet target = this;\r\n\t\t\tlet event_name = a[0];\r\n\t\t\tlet bgh = this._bound_general_handler;\r\n\t\t\tlet be = this._bound_events;\r\n\t\t\tres = [];\r\n\t\t\tif (bgh) {\r\n\t\t\t\tfor (c = 0, l = bgh.length; c < l; c++) {\r\n\t\t\t\t\tres.push(bgh[c].call(target, event_name));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (be) {\r\n\t\t\t\tlet bei = be[event_name];\r\n\t\t\t\tif (tof(bei) == 'array') {\r\n\t\t\t\t\tfor (c = 0, l = bei.length; c < l; c++) {\r\n\t\t\t\t\t\tres.push(bei[c].call(target));\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn res;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (sig === '[s,a]') {\r\n\t\t\tlet be = this._bound_events;\r\n\t\t\tlet bgh = this._bound_general_handler;\r\n\t\t\tlet event_name = a[0];\r\n\t\t\tres = [];\r\n\t\t\tif (bgh) {\r\n\t\t\t\tfor (c = 0, l = bgh.length; c < l; c++) {\r\n\t\t\t\t\tres.push(bgh[c].call(target, event_name, a[1]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (be) {\r\n\t\t\t\tlet bei = be[event_name];\r\n\t\t\t\tif (tof(bei) === 'array') {\r\n\t\t\t\t\tfor (c = 0, l = bei.length; c < l; c++) {\r\n\t\t\t\t\t\tres.push(bei[c].call(target, a[1]));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (sig === '[s,b]' || sig === '[s,s]' || sig === '[s,n]' || sig === '[s,B]' || sig === '[s,O]' || sig === '[s,e]') {\r\n\t\t\tlet be = this._bound_events;\r\n\t\t\tlet bgh = this._bound_general_handler;\r\n\t\t\tlet event_name = a[0];\r\n\t\t\tres = [];\r\n\t\t\tif (bgh) {\r\n\t\t\t\tfor (c = 0, l = bgh.length; c < l; c++) {\r\n\t\t\t\t\tres.push(bgh[c].call(target, event_name, a[1]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (be) {\r\n\t\t\t\tlet bei = be[event_name];\r\n\t\t\t\tif (tof(bei) === 'array') {\r\n\t\t\t\t\tfor (c = 0, l = bei.length; c < l; c++) {\r\n\t\t\t\t\t\tres.push(bei[c].call(target, a[1]));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (sig === '[s,o]' || sig === '[s,?]') {\r\n\t\t\tlet be = this._bound_events;\r\n\t\t\tlet bgh = this._bound_general_handler;\r\n\t\t\tlet event_name = a[0];\r\n\t\t\tres = [];\r\n\t\t\tif (bgh) {\r\n\t\t\t\tfor (c = 0, l = bgh.length; c < l; c++) {\r\n\t\t\t\t\tres.push(bgh[c].call(target, event_name, a[1]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (be) {\r\n\t\t\t\tlet bei = be[event_name];\r\n\t\t\t\tif (tof(bei) === 'array') {\r\n\t\t\t\t\tfor (c = 0, l = bei.length; c < l; c++) {\r\n\t\t\t\t\t\tres.push(bei[c].call(target, a[1]));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (a.l > 2) {\r\n\t\t\t\tlet event_name = a[0];\r\n\t\t\t\tlet additional_args = [];\r\n\t\t\t\tlet bgh_args = [event_name];\r\n\t\t\t\tfor (c = 1, l = a.l; c < l; c++) {\r\n\t\t\t\t\tadditional_args.push(a[c]);\r\n\t\t\t\t\tbgh_args.push(a[c]);\r\n\t\t\t\t}\r\n\t\t\t\tlet be = this._bound_events;\r\n\t\t\t\tlet bgh = this._bound_general_handler;\r\n\t\t\t\tres = [];\r\n\t\t\t\tif (bgh) {\r\n\t\t\t\t\tfor (c = 0, l = bgh.length; c < l; c++) {\r\n\t\t\t\t\t\tres.push(bgh[c].apply(target, bgh_args));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (be) {\r\n\t\t\t\t\tlet bei = be[event_name];\r\n\t\t\t\t\tif (tof(bei) == 'array') {\r\n\t\t\t\t\t\tif (bei.length > 0) {\r\n\t\t\t\t\t\t\tfor (c = 0, l = bei.length; c < l; c++) {\r\n\t\t\t\t\t\t\t\tif (bei[c]) res.push(bei[c].apply(target, additional_args));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn res;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn res;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {}\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\t'add_event_listener'() {\r\n\t\tconst {\r\n\t\t\tevent_events\r\n\t\t} = this;\r\n\t\tlet a = Array.prototype.slice.call(arguments),\r\n\t\t\tsig = get_a_sig(a);\r\n\t\tif (sig === '[f]') {\r\n\t\t\tthis._bound_general_handler = this._bound_general_handler || [];\r\n\t\t\tif (is_array(this._bound_general_handler)) {\r\n\t\t\t\tthis._bound_general_handler.push(a[0]);\r\n\t\t\t};\r\n\t\t}\r\n\t\tif (sig === '[s,f]') {\r\n\t\t\tlet event_name = a[0],\r\n\t\t\t\tfn_listener = a[1];\r\n\t\t\tif (!this._bound_events[event_name]) this._bound_events[event_name] = [];\r\n\t\t\tlet bei = this._bound_events[event_name];\r\n\t\t\tif (is_array(bei)) {\r\n\t\t\t\tbei.push(fn_listener);\r\n\t\t\t\tif (event_events) {\r\n\t\t\t\t\tthis.raise('add-event-listener', {\r\n\t\t\t\t\t\t'name': event_name\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconsole.trace();\r\n\t\t\t\tthrow 'Expected: array';\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t'remove_event_listener'(event_name, fn_listener) {\r\n\t\tconst {\r\n\t\t\tevent_events\r\n\t\t} = this;\r\n\t\tif (this._bound_events) {\r\n\t\t\tlet bei = this._bound_events[event_name] || [];\r\n\t\t\tif (is_array(bei)) {\r\n\t\t\t\tlet c = 0,\r\n\t\t\t\t\tl = bei.length,\r\n\t\t\t\t\tfound = false;\r\n\t\t\t\twhile (!found && c < l) {\r\n\t\t\t\t\tif (bei[c] === fn_listener) {\r\n\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tc++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (found) {\r\n\t\t\t\t\tbei.splice(c, 1);\r\n\t\t\t\t\tif (event_events) {\r\n\t\t\t\t\t\tthis.raise('remove-event-listener', {\r\n\t\t\t\t\t\t\t'name': event_name\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconsole.trace();\r\n\t\t\t\tthrow 'Expected: array';\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\tget bound_named_event_counts() {\r\n\t\tconst res = {};\r\n\t\tif (this._bound_events) {\r\n\t\t\tconst keys = Object.keys(this._bound_events);\r\n\t\t\teach(keys, key => {\r\n\t\t\t\tres[key] = this._bound_events[key].length;\r\n\t\t\t})\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\t'one'(event_name, fn_handler) {\r\n\t\tlet inner_handler = function (e) {\r\n\t\t\tfn_handler.call(this, e);\r\n\t\t\tthis.off(event_name, inner_handler);\r\n\t\t};\r\n\t\tthis.on(event_name, inner_handler);\r\n\t}\r\n\t'changes'(obj_changes) {\r\n\t\tif (!this.map_changes) {\r\n\t\t\tthis.map_changes = {};\r\n\t\t}\r\n\t\teach(obj_changes, (handler, name) => {\r\n\t\t\tthis.map_changes[name] = this.map_changes[name] || [];\r\n\t\t\tthis.map_changes[name].push(handler);\r\n\t\t})\r\n\t\tif (!this._using_changes) {\r\n\t\t\tthis._using_changes = true;\r\n\t\t\tthis.on('change', e_change => {\r\n\t\t\t\tconst {\r\n\t\t\t\t\tname,\r\n\t\t\t\t\tvalue\r\n\t\t\t\t} = e_change;\r\n\t\t\t\tif (this.map_changes[name]) {\r\n\t\t\t\t\teach(this.map_changes[name], h_change => {\r\n\t\t\t\t\t\th_change(value);\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n};\r\nconst p = Evented_Class.prototype;\r\np.raise = p.raise_event;\r\np.trigger = p.raise_event;\r\np.subscribe = p.add_event_listener;\r\np.on = p.add_event_listener;\r\np.off = p.remove_event_listener;\r\nconst eventify = obj => {\r\n\tconst bound_events = {};\r\n\tconst add_event_listener = (name, handler) => {\r\n\t\tif (handler === undefined && typeof name === 'function') {\r\n\t\t\thandler = name;\r\n\t\t\tname = '';\r\n\t\t}\r\n\t\tif (!bound_events[name]) bound_events[name] = [];\r\n\t\tbound_events[name].push(handler);\r\n\t}\r\n\tconst remove_event_listener = (name, handler) => {\r\n\t\tif (bound_events[name]) {\r\n\t\t\tconst i = bound_events[name].indexOf(handler);\r\n\t\t\tif (i > -1) {\r\n\t\t\t\tbound_events[name].splice(i, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tconst raise_event = (name, optional_param) => {\r\n\t\tconst arr_named_events = bound_events[name];\r\n\t\tif (arr_named_events !== undefined) {\r\n\t\t\tif (optional_param !== undefined) {\r\n\t\t\t\tconst l = arr_named_events.length;\r\n\t\t\t\tfor (let c = 0; c < l; c++) {\r\n\t\t\t\t\tarr_named_events[c].call(obj, optional_param);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconst l = arr_named_events.length;\r\n\t\t\t\tfor (let c = 0; c < l; c++) {\r\n\t\t\t\t\tarr_named_events[c].call(obj);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tobj.on = obj.add_event_listener = add_event_listener;\r\n\tobj.off = obj.remove_event_listener = remove_event_listener;\r\n\tobj.raise = obj.raise_event = raise_event;\r\n\treturn obj;\r\n}\r\n\r\n// Assign_From_Spec_Class\r\n\r\n\r\n// Assign_From_Spec_Evented_Class\r\n\r\n\r\n\r\n\r\nclass Publisher extends Evented_Class {\r\n\tconstructor(spec = {}) {\r\n\t\tsuper({});\r\n\t\tthis.one('ready', () => {\r\n\t\t\tthis.is_ready = true;\r\n\t\t})\r\n\t}\r\n\tget when_ready () {\r\n\t\treturn new Promise((solve, jettison) => {\r\n\t\t\tif (this.is_ready === true) {\r\n\t\t\t\tsolve();\r\n\t\t\t} else {\r\n\t\t\t\tthis.one('ready', () => {\r\n\t\t\t\t\tsolve();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n}\r\n\r\nconst prop = (...a) => {\r\n\r\n\t// Using (predefined?) data types here?\r\n\r\n\t// ...args?\r\n\tlet s = get_a_sig(a);\r\n\tconst raise_change_events = true;\r\n\tconst ifn = item => typeof item === \"function\";\r\n\r\n\tif (s === \"[a]\") {\r\n\t\teach(a[0], item_params => {\r\n\t\t\tprop.apply(this, item_params);\r\n\t\t});\r\n\t} else {\r\n\t\tif (a.length === 2) {\r\n\t\t\tif (ia(a[1])) {\r\n\t\t\t\tconst target = a[0];\r\n\t\t\t\teach(a[1], item => {\r\n\t\t\t\t\tif (ia(item)) {\r\n\t\t\t\t\t\tthrow \"NYI 468732\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tprop(target, item);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tconst ta1 = tof(a[1]);\r\n\t\t\t\tif (ta1 === \"string\") {\r\n\t\t\t\t\t[obj, prop_name] = a;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow \"NYI 468732b\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (a.length > 2) {\r\n\t\t\tif (is_array(a[0])) {\r\n\t\t\t\t// the rest of the properties applied to the array of items.\r\n\t\t\t\tthrow \"stop\";\r\n\t\t\t\tlet objs = a.shift();\r\n\t\t\t\teach(objs, obj => {\r\n\t\t\t\t\tprop.apply(this, [obj].concat(item_params)); // bug\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tlet obj, prop_name, default_value, fn_onchange, fn_transform, fn_on_ready, options;\r\n\t\t\t\tconst load_options = options => {\r\n\t\t\t\t\tprop_name = prop_name || options.name || options.prop_name;\r\n\t\t\t\t\tfn_onchange =\r\n\t\t\t\t\t\toptions.fn_onchange || options.onchange || options.change;\r\n\t\t\t\t\tfn_transform =\r\n\t\t\t\t\t\toptions.fn_transform || options.ontransform || options.transform;\r\n\t\t\t\t\tfn_on_ready = options.ready || options.on_ready;\r\n\t\t\t\t\tdefault_value = default_value || options.default_value || options.default;\r\n\t\t\t\t};\r\n\t\t\t\tif (a.length === 2) {\r\n\t\t\t\t\t[obj, options] = a;\r\n\t\t\t\t\tload_options(options);\r\n\t\t\t\t} else if (a.length === 3) {\r\n\t\t\t\t\tif (ifn(a[2])) {\r\n\t\t\t\t\t\t[obj, prop_name, fn_onchange] = a;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (a[2].change || a[2].ready) {\r\n\t\t\t\t\t\t\tload_options(a[2]);\r\n\r\n\t\t\t\t\t\t\t[obj, prop_name] = a;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t[obj, prop_name, default_value] = a;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//[obj, prop_name, default_value, fn_transform] = a;\r\n\t\t\t\t} else if (a.length === 4) {\r\n\t\t\t\t\tif (ifn(a[2]) && ifn(a[3])) {\r\n\t\t\t\t\t\t[obj, prop_name, fn_transform, fn_onchange] = a;\r\n\t\t\t\t\t} else if (ifn(a[3])) {\r\n\t\t\t\t\t\t[obj, prop_name, default_value, fn_onchange] = a;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t[obj, prop_name, default_value, options] = a;\r\n\t\t\t\t\t\tload_options(options);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (a.length === 5) {\r\n\t\t\t\t\t[obj, prop_name, default_value, fn_transform, fn_onchange] = a;\r\n\t\t\t\t}\r\n\t\t\t\tlet _prop_value;\r\n\r\n\t\t\t\tif (typeof default_value !== 'undefined') _prop_value = default_value;\r\n\t\t\t\t// And a silent set function that does not raise the change event.\r\n\t\t\t\tconst _silent_set = value => {\r\n\t\t\t\t\tlet _value;\r\n\t\t\t\t\tif (fn_transform) {\r\n\t\t\t\t\t\t_value = fn_transform(value);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t_value = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t_prop_value = _value;\r\n\t\t\t\t}\r\n\t\t\t\tconst _set = value => {\r\n\t\t\t\t\tlet _value;\r\n\t\t\t\t\tif (fn_transform) {\r\n\t\t\t\t\t\t_value = fn_transform(value);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t_value = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet old = _prop_value;\r\n\t\t\t\t\t_prop_value = _value;\r\n\t\t\t\t\tif (fn_onchange) {\r\n\t\t\t\t\t\tfn_onchange({\r\n\t\t\t\t\t\t\told: old,\r\n\t\t\t\t\t\t\tvalue: _prop_value\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (obj.raise && raise_change_events) {\r\n\t\t\t\t\t\tobj.raise(\"change\", {\r\n\t\t\t\t\t\t\tname: prop_name,\r\n\t\t\t\t\t\t\told: old,\r\n\t\t\t\t\t\t\tvalue: _prop_value\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tif (is_defined(default_value)) {\r\n\t\t\t\t\t_prop_value = default_value;\r\n\t\t\t\t}\r\n\t\t\t\tconst t_prop_name = tf(prop_name);\r\n\t\t\t\tif (t_prop_name === 's') {\r\n\r\n\t\t\t\t\tObject.defineProperty(obj, prop_name, {\r\n\t\t\t\t\t\tget() {\r\n\t\t\t\t\t\t\treturn _prop_value;\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tset(value) {\r\n\t\t\t\t\t\t\t_set(value);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t} else if (t_prop_name === 'a') {\r\n\t\t\t\t\tconst l = prop_name.length;\r\n\t\t\t\t\t//console.log('prop_name', prop_name);\r\n\t\t\t\t\tlet item_prop_name;\r\n\t\t\t\t\tfor (let c = 0; c < l; c++) {\r\n\t\t\t\t\t\titem_prop_name = prop_name[c];\r\n\t\t\t\t\t\t//console.log('item_prop_name', item_prop_name);\r\n\t\t\t\t\t\tObject.defineProperty(obj, item_prop_name, {\r\n\t\t\t\t\t\t\tget() {\r\n\t\t\t\t\t\t\t\treturn _prop_value;\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tset(value) {\r\n\t\t\t\t\t\t\t\t_set(value);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow 'Unexpected name type: ' + t_prop_name;\r\n\t\t\t\t}\r\n\t\t\t\tif (fn_on_ready) {\r\n\t\t\t\t\tfn_on_ready({\r\n\t\t\t\t\t\tsilent_set: _silent_set\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\n\r\n\r\nclass Data_Type {\r\n\r\n}\r\n\r\nclass Functional_Data_Type extends Data_Type {\r\n    constructor(spec) {\r\n\r\n\t\t/*\r\n\t\tnamed_property_access: true,\r\n\t\tproperty_names: ['latitude', 'longitude'],\r\n\t\t// And the property types as well being the same in this case?\r\n\t\tabbreviated_property_names: ['lat', 'long'],\r\n\t\tnumbered_property_access: true, // Maybe that's good enough to make it like an array when there are 2 properties.\r\n\r\n\t\t*/\r\n        \r\n        // fns for: validate as exact type...?\r\n        // convert from whatever it is to that exact type (if possible)\r\n        //   string and binary conversions.\r\n        //   eg a convert_load type operation.\r\n\r\n        // it's super / parent type.\r\n        super(spec);\r\n\r\n        if (spec.supertype) this.supertype = spec.supertype;\r\n        if (spec.name) this.name = spec.name;\r\n        if (spec.abbreviated_name) this.abbreviated_name = spec.abbreviated_name;\r\n\t\tif (spec.named_property_access) this.named_property_access = spec.named_property_access;\r\n\t\tif (spec.numbered_property_access) this.numbered_property_access = spec.numbered_property_access;\r\n\t\tif (spec.property_names) this.property_names = spec.property_names;\r\n\t\tif (spec.property_data_types) this.property_data_types = spec.property_data_types;\r\n\t\tif (spec.wrap_properties) this.wrap_properties = spec.wrap_properties;\r\n\t\tif (spec.wrap_value_inner_values) this.wrap_value_inner_values = spec.wrap_value_inner_values;\r\n\t\tif (spec.value_js_type) this.value_js_type = spec.value_js_type;\r\n\t\t// value_js_type\r\n\r\n\t\t// wrap_value as well????\r\n\t\t//   Though the value kind-of is itself.\r\n\t\t//    maybe .inner_js_value is much clearer here?\r\n\t\t// wrap_value_inner_values\r\n\r\n\r\n\r\n\t\tif (spec.abbreviated_property_names) this.abbreviated_property_names = spec.abbreviated_property_names;\r\n        if (spec.validate) this.validate = spec.validate;\r\n        if (spec.validate_explain) this.validate_explain = spec.validate_explain;\r\n\t\tif (spec.parse_string) this.parse_string = spec.parse_string;\r\n\t\tif (spec.parse) this.parse = spec.parse;\r\n\r\n\t\t// But also want it to be able to accept undefined value (usually???)\r\n\r\n\r\n\r\n\r\n        // and abbreviated name\r\n        // spec.validate (needs to be perfect...)\r\n\r\n        // spec.load_from(...?)\r\n        // spec.poly_load??\r\n\r\n        // spec.input transformers???\r\n        //   transform from other identified types...?\r\n\r\n        // For the moment, we don't want too many and too complex functions.\r\n\r\n    }\r\n}\r\n\r\n//lang.Data_Type = Data_Type;\r\n//lang.Functional_Data_Type = Functional_Data_Type;\r\n\r\n\r\n\r\n// And let's define some....\r\n\r\n// And a correct value...?\r\n//   Eg if a number is not valid because it has too many decimal points, it could be corrected.\r\n//     Or even an int that's too large, outside a range, corrected to fit in that range.\r\n\r\n// So making a Data_Value stick to using these Data_Types could be helpful.\r\n\r\n// For the moment this is really simple and should work fine for some things.\r\n\r\n// Allow undefined????\r\n//   Or better to have that on a different level.\r\n//     Maybe does make sense as an option here.\r\n\r\n//     Or consider it and do it later.\r\n\r\n\r\nFunctional_Data_Type.number = new Functional_Data_Type({\r\n    name: 'number',\r\n    abbreviated_name: 'n',\r\n    validate: x => {\r\n        return !isNaN(x);\r\n    },\r\n\tparse_string(str) {\r\n\t\tconst p = parseFloat(str);\r\n\t\t// then is it a number???\r\n\r\n\t\t// then is its string the same....?\r\n\t\tif (p + '' === str) {\r\n\t\t\tconst parsed_is_valid = this.validate(p);\r\n\t\t\tif (parsed_is_valid) {\r\n\t\t\t\treturn p;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t}\r\n});\r\n\r\nFunctional_Data_Type.integer = new Functional_Data_Type({\r\n    name: 'integer',\r\n    abbreviated_name: 'int',\r\n    validate: x => {\r\n        return Number.isInteger(x);\r\n    },\r\n    parse_string(str) {\r\n        const p = parseInt(str, 10);\r\n        if (!isNaN(p) && p.toString() === str) {\r\n            return p;\r\n        }\r\n        return undefined;\r\n    }\r\n});\r\n\r\n// Need fdts for things like a [lat, long] array.\r\n//   Maybe see about making it (easily) from composite data types.\r\n//     Pair(Lat, Long) or similar\r\n//     Maybe want it defined in a few lines of string grammar if it's easy.\r\n//       Would make for a simple API - but would require parsing a custom language.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Would be worth getting into creating conventions and idioms for higher level code.\r\n//   Though first getting data type systems working right would help.\r\n//     Making them easy to use.\r\n\r\nconst field = (...a) => {\r\n\r\n\t// Will also want to set data types of fields....\r\n\r\n\t// Uses obj._\r\n\t//   Seems quite simple, powerful, flexible.\r\n\t//     However, would like a different way of doing it too, could use a local variable defined within the 'field' function.\r\n\r\n\t// Want to incorporate data types, maybe grammar too.\r\n\r\n\t// Could use fp for this as well????\r\n\t//   See about really concise function definitions.\r\n\r\n\t//  Also want to see about some benchmarks too.\r\n\t//    Eg rendering a large page server side 10 times.\r\n\r\n\tconst raise_change_events = true;\r\n\r\n\tconst ifn = item => typeof item === \"function\";\r\n\r\n\tlet s = get_a_sig(a);\r\n\tif (s === \"[a]\") {\r\n\t\t// prop????\r\n\t\teach(a[0], item_params => {\r\n\t\t\tprop.apply(this, item_params);\r\n\t\t});\r\n\t} else {\r\n\t\tif (a.length > 1) {\r\n\t\t\tif (is_array(a[0])) {\r\n\r\n\t\t\t\tthrow 'stop - need to fix';\r\n\t\t\t\t// the rest of the properties applied to the array of items.\r\n\r\n\t\t\t\t// But field.apply here...???\r\n\t\t\t\tlet objs = a.shift();\r\n\t\t\t\teach(objs, obj => {\r\n\t\t\t\t\tfield.apply(this, [obj].concat(item_params));\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Maybe will have a Data_Type....\r\n\r\n\t\t\t\tlet obj, prop_name, data_type, default_value, fn_transform;\r\n\t\t\t\t//let raise_change_events = opts.raise_change_events;\r\n\t\t\t\tif (a.length === 2) {\r\n\t\t\t\t\t[obj, prop_name] = a;\r\n\t\t\t\t} else if (a.length === 3) {\r\n\r\n\t\t\t\t\t// And also check a[2] for being a Data_Type.\r\n\r\n\t\t\t\t\tif (a[2] instanceof Data_Type) {\r\n\t\t\t\t\t\t[obj, prop_name, data_type, default_value] = a;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (ifn(a[2])) {\r\n\t\t\t\t\t\t\t[obj, prop_name, fn_transform] = a;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t[obj, prop_name, default_value] = a;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t\r\n\t\t\t\t} else if (a.length === 4) {\r\n\r\n\t\t\t\t\t// field(this, 'value', this.data_type, spec.value);\r\n\r\n\t\t\t\t\tif (a[2] instanceof Data_Type) {\r\n\t\t\t\t\t\t[obj, prop_name, data_type, default_value] = a;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t[obj, prop_name, default_value, fn_transform] = a;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (obj !== undefined) {\r\n\r\n\t\t\t\t\t// Setting with a data_model or data_value ????\r\n\r\n\r\n\t\t\t\t\tObject.defineProperty(obj, prop_name, {\r\n\t\t\t\t\t\tget() {\r\n\t\t\t\t\t\t\tif (is_defined(obj._)) {\r\n\t\t\t\t\t\t\t\treturn obj._[prop_name];\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\treturn undefined;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//return _prop_value;\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tset(value) {\r\n\t\t\t\t\t\t\t//console.log('setting prop: ' + prop_name);\r\n\r\n\t\t\t\t\t\t\t// Get an immutable copy of it???\r\n\r\n\t\t\t\t\t\t\tlet old = (obj._ = obj._ || {})[prop_name];\r\n\r\n\t\t\t\t\t\t\t// Want better tof that can deal with Data_Model, Data_Value\r\n\t\t\t\t\t\t\t// Maybe Data_String, Data_Array, Data_Object, Data_Number???\r\n\r\n\t\t\t\t\t\t\t// Could make some more specifically typed ones....\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t\t\t\t\t\t// value must be an array of length 2.\r\n\r\n\t\t\t\t\t\t\t// And what's the typeof value???\r\n\r\n\r\n\r\n\t\t\t\t\t\t\t// Upgrade the field set procedure.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t\t\t\t\t\tif (old !== value) {\r\n\r\n\t\t\t\t\t\t\t\tlet is_valid = true;\r\n\t\t\t\t\t\t\t\tif (data_type) {\r\n\r\n\t\t\t\t\t\t\t\t\tconst t_value = typeof value;\r\n\r\n\t\t\t\t\t\t\t\t\tis_valid = data_type.validate(value);\r\n\r\n\t\t\t\t\t\t\t\t\t// if not valid directly, can we parse it from a string???\r\n\r\n\t\t\t\t\t\t\t\t\tif (t_value === 'string') {\r\n\t\t\t\t\t\t\t\t\t\tconst parsed_value = data_type.parse_string(value);\r\n\t\t\t\t\t\t\t\t\t\tis_valid = data_type.validate(parsed_value);\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (is_valid) value = parsed_value;\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tconsole.log('t_value', t_value);\r\n\r\n\t\t\t\t\t\t\t\t\t// but also some type of stringifying the value....\r\n\r\n\r\n\r\n\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (is_valid) {\r\n\r\n\t\t\t\t\t\t\t\t\tlet _value;\r\n\t\t\t\t\t\t\t\t\tif (fn_transform) {\r\n\t\t\t\t\t\t\t\t\t\t//try {\r\n\t\t\t\t\t\t\t\t\t\t_value = fn_transform(value);\r\n\t\t\t\t\t\t\t\t\t\t//} catch (err) {\r\n\t\t\t\t\t\t\t\t\t\t//    throw err;\r\n\t\t\t\t\t\t\t\t\t\t//}\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\r\n\t\r\n\t\r\n\t\t\t\t\t\t\t\t\t\t_value = value;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tobj._[prop_name] = _value;\r\n\t\t\t\t\t\t\t\t\tif (raise_change_events) {\r\n\t\t\t\t\t\t\t\t\t\tobj.raise(\"change\", {\r\n\t\t\t\t\t\t\t\t\t\t\tname: prop_name,\r\n\t\t\t\t\t\t\t\t\t\t\told: old,\r\n\t\t\t\t\t\t\t\t\t\t\tvalue: _value\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t//console.log('old === value');\r\n\t\t\t\t\t\t\t\t//console.log('old', old);\r\n\t\t\t\t\t\t\t\t//console.log('value', value);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (is_defined(default_value)) {\r\n\t\t\t\t\t\tlet is_valid = true;\r\n\t\t\t\t\t\tif (data_type) {\r\n\t\t\t\t\t\t\tis_valid = data_type.validate(default_value);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (is_valid) {\r\n\t\t\t\t\t\t\t(obj._ = obj._ || {})[prop_name] = default_value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow 'stop';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\n\r\n\r\n// Probably need an 'equals' function.\r\n//   Would make use of .equals and .hash functions / properties when available.\r\n\r\n// Though Data_Value.toString and toJSON may be most useful sooner...\r\n\r\n// lang-tools should have the equals function that supports Data_Value (maybe Data_Model in general).\r\n\r\nconst lang_mini_props = {\r\n\teach,\r\n\tis_array,\r\n\tis_dom_node,\r\n\tis_ctrl,\r\n\tclone,\r\n\tget_truth_map_from_arr,\r\n\ttm: get_truth_map_from_arr,\r\n\tget_arr_from_truth_map,\r\n\tarr_trim_undefined,\r\n\tget_map_from_arr,\r\n\tarr_like_to_arr,\r\n\ttof,\r\n\tatof,\r\n\ttf,\r\n\tload_type,\r\n\tis_defined,\r\n\tdef: is_defined,\r\n\tGrammar,\r\n\tstringify,\r\n\tfunctional_polymorphism,\r\n\tfp,\r\n\tmfp,\r\n\tarrayify,\r\n\tmapify,\r\n\tstr_arr_mapify,\r\n\tget_a_sig,\r\n\tdeep_sig,\r\n\tget_item_sig,\r\n\tset_vals,\r\n\ttruth,\r\n\ttrim_sig_brackets,\r\n\tll_set,\r\n\tll_get,\r\n\titerate_ancestor_classes,\r\n\tis_arr_of_t,\r\n\tis_arr_of_arrs,\r\n\tis_arr_of_strs,\r\n\tinput_processors,\r\n\toutput_processors,\r\n\tcall_multiple_callback_functions,\r\n\tcall_multi,\r\n\tmulti: call_multi,\r\n\tnative_constructor_tof,\r\n\tFns,\r\n\tsig_match,\r\n\tremove_sig_from_arr_shell,\r\n\tto_arr_strip_keys,\r\n\tarr_objs_to_arr_keys_values_table,\r\n\tset_arr_tree_value,\r\n\tget_arr_tree_value,\r\n\tdeep_arr_iterate,\r\n\tprom,\r\n\tcombinations,\r\n\tcombos: combinations,\r\n\tEvented_Class,\r\n\teventify,\r\n\tvectorify,\r\n\tv_add,\r\n\tv_subtract,\r\n\tv_multiply,\r\n\tv_divide,\r\n\tvector_magnitude,\r\n\tdistance_between_points,\r\n\tget_typed_array,\r\n\tgta: get_typed_array,\r\n\tPublisher,\r\n\tfield,\r\n\tprop,\r\n\tData_Type,\r\n\tFunctional_Data_Type\r\n};\r\n\r\nconst lang_mini = new Evented_Class();\r\nObject.assign(lang_mini, lang_mini_props);\r\nlang_mini.note = (str_name, str_state, obj_properties) => {\r\n\tobj_properties = obj_properties || {};\r\n\tobj_properties.name = str_name;\r\n\tobj_properties.state = str_state;\r\n\tlang_mini.raise('note', obj_properties)\r\n}\r\nmodule.exports = lang_mini;\r\n\r\n// Bring in grammar / compound types to this typedef type thing.\r\n//   Types in the fields. \r\n\r\n// Detecting invalid view model states.\r\n//   Validating according to the spec of the data basically.\r\n\r\n// Defining data types and models with a gui....\r\n\r\n\r\n\r\n\r\nif (require.main === module) {\r\n\r\n\r\n\r\n\t/*\r\n\tfunction test_evented_class(test_data) {\r\n\t\tconst create_empty_test_res = () => {\r\n\t\t  return {\r\n\t\t\tpassed: [],\r\n\t\t\tfailed: []\r\n\t\t  };\r\n\t\t};\r\n\t  \r\n\t\t// Initialize res object with empty arrays\r\n\t\tconst res = create_empty_test_res();\r\n\t  \r\n\t\t// Test each event in test_data\r\n\t\tfor (let i = 0; i < test_data.length; i++) {\r\n\t\t  const { event_name, event_data } = test_data[i];\r\n\t  \r\n\t\t  // Test adding the event\r\n\t\t  const evented_class = new Evented_Class();\r\n\t\t  evented_class.add_event_listener(event_name, (data) => {\r\n\t\t\tif (data === event_data) {\r\n\t\t\t  res.passed.push(event_name);\r\n\t\t\t} else {\r\n\t\t\t  res.failed.push(event_name);\r\n\t\t\t}\r\n\t\t  });\r\n\t  \r\n\t\t  // Test raising the event\r\n\t\t  evented_class.raise_event(event_name, event_data);\r\n\t\t}\r\n\t  \r\n\t\t// Return test results\r\n\t\treturn res;\r\n\t  }\r\n\t  */\r\n\r\n\t  const test_data = [\r\n\t\t{\r\n\t\t\tevent_name: 'foo',\r\n\t\t\tevent_data: 'hello'\r\n\t\t},\r\n\t\t{\r\n\t\t\tevent_name: 'bar',\r\n\t\t\tevent_data: 'world'\r\n\t\t},\r\n\t\t{\r\n\t\t\tevent_name: 'baz',\r\n\t\t\tevent_data: true\r\n\t\t}\r\n\t];\r\n\t\r\n\tconst create_empty_test_res = () => ({\r\n\t\tpassed: [],\r\n\t\tfailed: []\r\n\t});\r\n\r\n\t  \r\n\t  function test_evented_class(test_data) {\r\n\t\tconst res = create_empty_test_res();\r\n\t\r\n\t\t// Create a new instance of Evented_Class\r\n\t\tconst evented_class = new Evented_Class();\r\n\t\r\n\t\t// Test each event in the test data\r\n\t\ttest_data.forEach(test_event => {\r\n\t\t\tconst event_name = test_event.event_name;\r\n\t\t\tconst event_data = test_event.event_data;\r\n\t\r\n\t\t\t// Define a listener for the event\r\n\t\t\tconst listener = data => {\r\n\t\t\t\tif (data === event_data) {\r\n\t\t\t\t\t// The event was raised with the expected data\r\n\t\t\t\t\tres.passed.push(event_name);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// The event was raised with the wrong data\r\n\t\t\t\t\tres.failed.push(event_name);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\r\n\t\t\t// Add the listener to the evented class\r\n\t\t\tevented_class.on(event_name, listener);\r\n\t\r\n\t\t\t// Raise the event\r\n\t\t\tevented_class.raise_event(event_name, event_data);\r\n\t\t});\r\n\t\r\n\t\treturn res;\r\n\t}\r\n\t\r\n\r\n\r\n\tconst result = test_evented_class(test_data);\r\n\r\n\t// Print the results of the test\r\n\tconsole.log('Passed:', result.passed);\r\n\tconsole.log('Failed:', result.failed);\r\n\r\n\r\n}", "const lang = require('./lang-mini');\r\n\r\nconst {each, tof} = lang;\r\n\r\n\r\n// and lang types...\r\n//  Will use a Type class.\r\n//   Number_Type etc. String_Type perhaps.\r\n//     and then restrictions. JSON_Type is a String_Type.\r\n\r\n\r\n\r\n// Could have first implementation of types here even....\r\n//   Maybe don't use classes for them?\r\n//     Or do because they are so integrated into the language now.\r\n\r\n// Representation_Type\r\n//   eg represents a color (in specific way?) How it represents it...?\r\n//     ?? represents a 24bit rgb color ??\r\n//       why not? should be possible.\r\n\r\n\r\n// Some / all of oext would be nice within lang-mini...?\r\n\r\n// oext seems to work with types though, or would benefit from types.\r\n//   No, oext does not have much for types, moving field and prop from oext here, need to get the data types working with Data_Object\r\n//   and Data_Value. \r\n\r\n\r\n\r\n\r\n\r\n// Maybe move to lang-tools?\r\n//   fp() may benefit from integration with this.\r\n\r\n\r\n\r\n// What the type represents.\r\n// What it signifies?\r\n\r\n// But then how it's represented?\r\n\r\n\r\n// Not really about storing the data in memory or transmitting it.\r\n//   But saying it's 24 bit color is kind of about its representation.\r\n//   Still that's what it's called.\r\n\r\n// Type_Signifier seems better. Now it's called that.\r\n\r\n// Wider signification than just JS.\r\n\r\n\r\n// Type_Signifier_Component ????\r\n\r\n// Type_Signifier perhaps. Signifier_Type???\r\n\r\nclass Type_Signifier {\r\n    // Name\r\n    constructor(spec = {}) {\r\n\r\n        const name = spec.name;\r\n\r\n        // And use fields / quicker way to define these?\r\n\r\n        Object.defineProperty(this, 'name', {\r\n            get() {\r\n                return name;\r\n            }\r\n        });\r\n\r\n        const parent = spec.parent;\r\n\r\n        Object.defineProperty(this, 'parent', {\r\n            get() {\r\n                return parent;\r\n            }\r\n        });\r\n\r\n        const map_reserved_property_names = {\r\n            name: true,\r\n            parent: true\r\n        }\r\n\r\n        const _ = {};\r\n\r\n        each(spec, (value, name) => {\r\n            if (map_reserved_property_names[name]) {\r\n\r\n            } else {\r\n                _[name] = value;\r\n            }\r\n        });\r\n\r\n\r\n\r\n        // And other fields too....\r\n\r\n\r\n    }\r\n    extend(o_extension) {\r\n\r\n        const o = {\r\n            parent: this\r\n        }\r\n        Object.assign(o, o_extension);\r\n        const res = new Type_Signifier(o_extension);\r\n        return res;\r\n\r\n\r\n    }\r\n    //  Other options?\r\n    //  Disambiguiation? Descriptive text?\r\n    //    Or is naming them the main thing there?\r\n\r\n    // Color representation\r\n    //   And that is simple, does not go into internal representation.\r\n\r\n}\r\n\r\n\r\n\r\n\r\n// A representation for what is signified.\r\n//   This way if the programmer gets stuck about 'the' representation to make, they can make a decent representation, make it default,\r\n//     and move on for the moment.\r\n\r\n\r\n// Can be multiple allowed representations for a type.\r\n//   Binary data, JSON\r\n//   Compressed, uncompressed, maybe encrypted too.\r\n\r\n\r\n// Probably don't need subclasses for string or binary representations.\r\n//  Make this able to deal with both.\r\n//  String (kind of) is binary but likely uses UTF-8.\r\n\r\nclass Type_Representation {\r\n    // Name\r\n    //  Other options?\r\n    //  Disambiguiation? Descriptive text?\r\n    //    Or is naming them the main thing there?\r\n\r\n    // Color representation\r\n    //   And that is simple, does not go into internal representation.\r\n\r\n    // This should be able to represent types and lang features not available to JS.\r\n    //   Names may be optional? May be autogenerated and quite long?\r\n\r\n\r\n\r\n    constructor(spec = {}) {\r\n\r\n        // May be used on a lower level where the most suitable representation is selected.\r\n\r\n        // Generally:\r\n        //  string incl json\r\n        //  binary\r\n\r\n        // bridge the gap between numeric and binary.\r\n        //   make this ta-friendly and aware.\r\n\r\n        // represent components within a typed array? closely packed data structure?\r\n        \r\n\r\n        const name = spec.name;\r\n        Object.defineProperty(this, 'name', {\r\n            get() {\r\n                return name;\r\n            }\r\n        });\r\n\r\n        const parent = spec.parent;\r\n        Object.defineProperty(this, 'parent', {\r\n            get() {\r\n                return parent;\r\n            }\r\n        });\r\n\r\n        // Then the other fields?\r\n        //  Could have named fields.\r\n        //  Could have ordered fields?\r\n\r\n        const _ = {};\r\n\r\n        const map_reserved_property_names = {\r\n            'name': true\r\n        };\r\n\r\n        //  Even the number of bits being in here...?\r\n\r\n        each(spec, (value, name) => {\r\n            if (map_reserved_property_names[name]) {\r\n\r\n            } else {\r\n                _[name] = value;\r\n\r\n                // Could define the property here.\r\n                //  Read only (for the moment)\r\n\r\n                Object.defineProperty(this, name, {\r\n                    get() {\r\n                        return _[name];\r\n                    },\r\n                    enumerable: true\r\n                });\r\n\r\n\r\n            }\r\n        });\r\n        // Then a proxy to get other properties?\r\n    }\r\n    extend(o_extension) {\r\n\r\n        const o = {\r\n            parent: this\r\n        }\r\n        Object.assign(o, o_extension);\r\n        const res = new Type_Representation(o_extension);\r\n        return res;\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n// Will spell out some things in a quite verbose vanilla-js way here.\r\n//   Some higher level code will use types and other lang functionality to be less verbose and closer to English / the direct concepts.\r\n\r\n// Joins together 1 signifier and multiple representations.\r\n//   Name of item will be the signifier's name.\r\n\r\nclass Signifier_Representations_Type {\r\n    constructor(spec = {}) {\r\n        // 2 params in constructor? (signifier, arr_reps)???\r\n        //  could check for that.\r\n\r\n        if (spec.signifier && spec.representations) {\r\n\r\n            let signifier, arr_representations;\r\n\r\n            //if (spec.signifier) {\r\n            if (spec.signifier instanceof Type_Signifier) {\r\n                signifier = spec.signifier;\r\n            } else {\r\n                throw 'expected spec.signifier to be a Type_Signifier instance';\r\n            }\r\n            //}\r\n\r\n            if (tof(spec.representations) === 'array') {\r\n                let pass = true;\r\n                each(spec.representations, (representation, idx, stop) => {\r\n                    if (!(representation instanceof Type_Representation)) {\r\n                        pass = false;\r\n                        stop();\r\n                    }\r\n                })\r\n                if (pass) {\r\n                    arr_representations = spec.representations;\r\n                } else {\r\n                    throw 'Expected spec.representations to be an array of Type_Representation instances.';\r\n                }\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n        } else {\r\n            throw 'Expected spec.signifier and spec.representations'\r\n        }\r\n\r\n        \r\n\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n// And could be subclasses of signification types...???\r\n\r\n// ui8 type signification?\r\n//   OK to signify that type, could indeed be represented with different actual values.\r\n//    such as as a string of decimal or hex digits.\r\n\r\n\r\n// Will have some basic / core types within lang-mini.\r\n//   Will not have a large amount of code.\r\n\r\n\r\n// Thematic types perhaps....\r\n//   seems like there could be overlap as well, eg image and document, text and document\r\n//   color, date/time, image, video, text, document, font, number, integer, floating point, string\r\n//     Type signifier could have theme property instead of or as well as name?\r\n//       Then representation of one thing as another. Represent a color as a number.\r\n\r\n// One advantage of putting in its own module is possible smaller file size.\r\n//   Though could possibly use lang-mini functionality as a platform for signifier and representer types.\r\n//   Type_Representer perhaps, not Type_Representation???\r\n//     Representation is probably the more accurate / better reading word.\r\n\r\n\r\n\r\n\r\nconst st_color = new Type_Signifier({'name': 'color'});\r\n\r\n// Signify an image. Signify a JPEG image. Etc.\r\n\r\n// then make a new one that extends st_color\r\n//   as in, a subtype.\r\nconst st_24bit_color = st_color.extend({'bits': 24});\r\n// Other types of 3 component color?\r\n\r\n//const st_24bit_rgb_color = st_24bit_color.extend({'components': ['red', 'green', 'blue']});\r\nconst st_24bit_rgb_color = st_24bit_color.extend({'components': ['red byte', 'green byte', 'blue byte']});\r\n//  or it already knows that these are bytes, when its 3 components in 24 bits.\r\n\r\n// st_24bit_rgb_color is only a signifier of 24 bit rgb color.\r\n//  Then there can be an implementation of it.\r\n//  Or a type (or class etc) could indicate it can handle it.\r\n\r\n// Type representation index could help.\r\n//   Query by name could return multiple items....\r\n//     Could have a property for the default representation with the name being searched for.\r\n\r\n\r\n\r\n\r\n\r\n\r\n// And have info about the properties by which it is represented?\r\n\r\nconst tr_string = new Type_Representation({'name': 'string'});\r\nconst tr_binary = new Type_Representation({'name': 'binary'}); // And could include number....\r\n// Numbers maybe extend binary.\r\n\r\n// And tr_ui8 even perhaps....\r\n\r\n\r\n\r\n\r\n// represent it as a binary sequence.\r\n//   Then could use more application specific tools like a Buffer or Typed Array.\r\n\r\n// Or extend the string type representation?\r\n\r\n// = tr_binary.extend();\r\n// trep maybe. and tsig or tsign.\r\n\r\n// Will make / finish some lower level components that interact with some specifically typed data.\r\n//   May well be worth doing more under 'grammar', getting type signifiers and type representations into the system.\r\n//     So far, types have been type representations. Now, they can be a signifier along with multiple representations.\r\n// A 'tags' type system of properties could help. Make it easy to specify / set up types.\r\n\r\n// Representation = Implementation (kind of)\r\n//   Or an interface.\r\n\r\n// Could use a Representation as an interface, in some cases.\r\n//   Inner representations as well\r\n//   Eg single color channel has a representation\r\n//     Would have a color name.\r\n//       Could even have a wavelength measurement for the color.\r\n\r\n// color channel 8 bit\r\n//   could use some language interpretation even. Some language processing could have the system 'understand' simple phrases describing\r\n//   type representations.\r\n\r\n// Actually using struct syntax for C++ or rust would be really good.\r\n//   Rust structs don't require fixed length strings in definition.\r\n\r\n// A struct being a Type_Representation, or Representational_Type.\r\n//   Dates can and do operate on different calendars.\r\n//     Same thing being signified, but with a different representation.\r\n// Diffent ways of representing strings and text. Now emojis too, they are part of unicode, and they keep getting updated.\r\n\r\n// Text characters are images that represent a letter or something else.\r\n//   They are symbols.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst rt_bin_24bit_rgb_color = new Type_Representation({\r\n    // A binary type representation.\r\n    'signifier': st_24bit_rgb_color,\r\n    'bytes': [\r\n        [0, 'red', 'ui8'],\r\n        [1, 'green', 'ui8'],\r\n        [2, 'blue', 'ui8']\r\n    ]\r\n});\r\n\r\n// Maybe do some work on a concise format for defining these types.\r\n// Maybe worth using or allowing the exact same syntax as C++ and/or rust for these stucts.\r\n//  Possibly some kind of syntax import. An example of how the same type of information can have different representations.\r\n\r\n\r\n\r\n\r\n// And an editor control could use a representation in terms of how it represents the data being edited to the user.\r\n\r\n// Binary type representation\r\nconst rt_hex_24bit_rgb_color = new Type_Representation({\r\n    // Likely some kind of string template.\r\n    //  Or a function?\r\n    //  Best to keep this function free here.\r\n    //  Or maybe make a few quite standard ones.\r\n    'signifier': st_24bit_rgb_color,\r\n\r\n    // Or could just have the sequence / template literal even.\r\n\r\n    'bytes': [\r\n        [0, '#', 'char'],\r\n        [1, 'hex(red)', 'string(2)'],\r\n        [3, 'hex(green)', 'string(2)'],\r\n        [5, 'hex(blue)', 'string(2)']\r\n    ]\r\n});\r\n\r\n// Year could be negative.\r\nconst st_date = new Type_Signifier({'name': 'date', 'components': ['day uint', 'month uint', 'year int']});\r\n// And datetime signification.\r\n\r\n// Approximate date ie date +- x years.\r\n\r\n\r\n// Just the date.\r\n\r\n\r\n\r\n//  or don't have the component types here?\r\n\r\n// String representation type.\r\n//  String_Type_Representation\r\n\r\n// Lots of different ways to represent a type.\r\n\r\n// Or say that they are numeric strings as well....\r\n\r\n// But a string char possibly takes more than 1 byte! Maybe not as defined here.\r\n//  String of int?\r\n//  Go into more details about how dates are represented?\r\n\r\n// Could consider JPEG to be a representation of Image.\r\n//   May want / need to think in terms of segments or blocks...\r\n//    segment_name = 'block' even. So it at least knows the right technical term.\r\n//   JPEG can have different versions, or subrepresentations.\r\n//     Type representations can have a supertype. That can be used with JPEG and then their versions are subtypes.\r\n//       A bit like the super-JPEG is a type representation of its own - except its got the details of the syntax.\r\n//     Want to make the overall system flexible in terms of what it represesnts, a fairly simple base structure.\r\n\r\n\r\n// Maybe make sections that define the representations just after the signifiers.\r\n//   Could have a fair few basic things defined.\r\n\r\n// Type Signifiers and Type Representations\r\n//   Think it could become an interesting book / programming topic.\r\n//   Could have implementations in a few languages too. Maybe suggestions for future languages and versions of them.\r\n\r\n// Make it its own module even?\r\n//   Could work better at a lower level.\r\n\r\n// srtypes module perhaps, or just srtype.\r\n// Coding with the distinction between signified and represented types could be really useful.\r\n//   Be able to handle serialization and deserialization (or format changes in some cases) 'for free', that is once the definitions\r\n//     have been made, the system will be able to convert between them (maybe requires some conversion functions to be written)\r\n//   System will have decent default type conversions.\r\n\r\n// Probably worth having set of 'standard' type definitions.\r\n//   System needs to be flexible so that they can be amended.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst rt_string_date_uk_ddmmyy = new Type_Representation({\r\n    'signifier': st_date,\r\n    'bytes': [\r\n        [0, '#', 'char'],\r\n        [1, 'day', 'string(2)'],\r\n        [3, '/', 'char'],\r\n        [4, 'month', 'string(2)'],\r\n        [6, '/', 'char'],\r\n        [7, 'year', 'string(2)']\r\n    ]\r\n});\r\n\r\n// Extra rules or restrictions? Defaults eg year 38 is 2038 etc...\r\n\r\n\r\n// A types registry could help.\r\n//  Registry of signified types\r\n//  Registry of type representations.\r\n//   Meaning 1 'type' in this system can be represented in multiple different ways.\r\n\r\n// Then the infrastructure within control declaration...\r\n//   Though likely will use the .model and .view mixins for this.\r\n//   Views (or controls?) will be made so that the model is a specific representation of a signified type.\r\n//     Or one a a few supported representations.\r\n//     Eg a color palette working for monochrome (8bit color depth).\r\n//       Or a color palette could allow selection of multiple colors.\r\n\r\n// Color_Chooser perhaps being simpler?\r\n//   Color_Palette seems like it should be able to deal with a bunch of different ways in which the data could be represented\r\n//     either in the app as the user interacts with it, in app memory, in transmission, in storage.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// There could be quite a lot of these type representations.\r\n\r\n\r\n\r\n// Can have plenty of ways of representing a date. Fewer ways of signifying one.\r\n\r\n\r\n// To signify something is in some ways less than to represent it.\r\n//   Signification is only about saying that it is there.\r\n\r\n// Maybe have a nice UI app to set up the signifier / representer links.\r\n\r\n\r\n\r\n\r\n\r\n// A moderate amount of data type representation info would help get JSGUI controls working nicely on the specific types\r\n//   of data they are supposed to interact with.\r\n\r\n// Ways of getting the data in and out of typed arrays\r\n//   Typed array (or buffer?) access for these data types?\r\n\r\n// Could make some nice GUI components (controls) for selecing / editing dates and colors.\r\n//   Can do it in a way that avoids code repetition.\r\n//   Make it so that the controls are able to represent the type on the screen.\r\n\r\n\r\n\r\n\r\n\r\n \r\n// These types seem most useful for the types that the user interacts with and putting the type knowledge into the GUI.\r\n\r\n// Type registry makes sense too.\r\n//  jsgui.types perhaps / lang.types\r\n//   An index of types? Collection of them?\r\n\r\n// Also registry of controls that are set up for dealing with specific types?\r\n//   Being able to identify and use variety of representations.\r\n\r\n// May integrate this into image format work - or make this good so that image format work can use this as a platform.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// and then day, month, year components\r\n\r\n\r\n\r\n\r\n// day, month year\r\n\r\n\r\n\r\n// or 'hexdigit(2)' maybe.\r\n\r\n// And the Control could conveniently show and allow editing of values using different representations.\r\n//   Such as a hex representation, or hex representations for comonents.\r\n\r\n// A Control could be aware of, and use both representations of a Data_Type.\r\n//   Color Palette seems like the right place to use that more advanced and general purpose functionality.\r\n//     Will work well for some imaging tools as well too.\r\n\r\n\r\n// More functional composition of controls could be cool....\r\n//   But let's make / improve the color palette.\r\n//     Moving the data outside it could work too.\r\n//     Consts directory. Or basis. Basics.\r\n\r\n\r\n\r\n// Have a class / instance of one that tracks ie is a DB for the type representations and significations.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Then put that within an array? 32 bit number used as 24 bit?\r\n\r\n\r\n// Though it may be most/least significant in some cases.\r\n\r\n\r\n\r\n\r\n// Then create a representation of 24 bit rgb color where it's the 3 components as bytes.\r\n//   Could be deduced from what we have already. May be easy enough to get from the Type_Signifier to this.\r\n//     However, will then have representations of the individual components too....\r\n//     Perhaps represent the whole thing as a string. eg #RRGGBB color for HTML. Or as items in an array.\r\n//       Even representing them as items within a typed array.\r\n\r\n\r\n// Allowing multiple representations of the same things.\r\n//   Representation sets - so we know which representations as (almost? totally?) interchangable.\r\n//   Can choose different default representations depending on performance.\r\n\r\n// Or implementation sets? Prefer representation here to describe how the types are represented rather than other connotations\r\n//   such as code for operators.\r\n\r\n//console.log('st_color', st_color);\r\n\r\nlang.Type_Signifier = Type_Signifier;\r\nlang.Type_Representation = Type_Representation;\r\n\r\n\r\n\r\n\r\n// Let's make something a little simpler and focused on representing the types of data in Data_Model classes.\r\n//   Control is such a class through inheritance, it extends Data_Object.\r\n\r\n// nfdt new functional data type function....?\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// The representation type is a way to represent something\r\n//   What is being represented? That is all within a signifier type.\r\n\r\n// Or Implementation_Type? As in that is concrete in terms of how it is represented.\r\n// Representation_Implementation_Type???\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nmodule.exports = lang;", "\r\nconst {each, is_array} = require('lang-mini');\r\n\r\n// collective(arr).bcr() for example.... would call the bcr function on every item in the array (or collection?) \r\n\r\n// would help to make ut support other data types.\r\n//.  possibly ones that can expose an array interface???\r\n\r\n\r\n// eg collect(ctrl.siblings).bcr().overlaps(ctrl.bcr().extend('left', 80)).max('width') >= 80 ????\r\n\r\n// or do:\r\n\r\n// ctrl.bcr().extend('left', 80).overlaps(collect(ctrl.siblings).bcr()).max('width') >= 80\r\n\r\n// or:\r\n\r\n//. Will be nice to allow dense syntax in an unambiguous way where possible.\r\n//.   Would automatically carry out the 'collect' operation, but that could be a more advanced stage of the implementation doing that.\r\n\r\n// Really concise syntax to express the things which would take quite a lot of likes of JS, but simple enough to be able\r\n//.  to be expressed in one dense and very readable line.\r\n\r\n// This would be a good piece of code for the Window control to express looking to its left and seeing if it overlaps any siblings\r\n//.  within 80 px, and what the overlap is with similar syntax.\r\n\r\n\r\n\r\n// ctrl.bcr().extend('left', 80).overlaps(ctrl.siblings).max('width') > 0\r\n\r\n// A direct and readable syntax will help...\r\n// ctrl.bcr.extend('left', 80).overlaps(ctrl.siblings).max('width') > 0\r\n\r\n\r\n\r\nconst collective = (arr) => {\r\n\r\n    /*\r\n    each(arr, (item) => {\r\n\r\n    })\r\n    */\r\n\r\n    if (is_array(arr)) {\r\n        //const ref_arr = [];\r\n        \r\n\r\n        const target = {\r\n          };\r\n          \r\n          const handler2 = {\r\n\r\n            get(target, prop, receiver) {\r\n                if (arr.hasOwnProperty(prop)) {\r\n                    return arr[prop];\r\n                } else {\r\n                    \r\n                    if (typeof arr[0][prop] === 'function') {\r\n\r\n                        return (...a) => {\r\n                            const res = [];\r\n                            each(arr, item => {\r\n                                res.push(item[prop](...a));\r\n                            })\r\n                            return res;\r\n                        }\r\n\r\n                        // Call the function on all of them\r\n                    } else {\r\n                        const res = [];\r\n                        each(arr, item => {\r\n                            res.push(item[prop]);\r\n                        })\r\n                        return res;\r\n                    }\r\n\r\n                    \r\n                }\r\n\r\n              //return \"world\";\r\n            },\r\n          };\r\n          \r\n          const proxy2 = new Proxy(target, handler2);\r\n          return proxy2;\r\n\r\n\r\n    } else {\r\n        console.trace();\r\n        throw 'NYI';\r\n    }\r\n\r\n\r\n}\r\n\r\nmodule.exports = collective;", "//var jsgui = require('lang-mini');\r\n//var Evented_Class = require('./_evented-class');\r\n\r\n//var j = jsgui;\r\n//var Evented_Class = j.Evented_Class;\r\n\r\n// What type is the value?\r\n\r\n\r\nconst {Evented_Class} = require('lang-mini');\r\n\r\n\r\n/*\r\n    Possible code inclusions:\r\n\r\n    Could define some things as being more stable in the 2.0.\r\n    All the data model items being given an ID could wind up being very useful.\r\n        Maybe even some kind of 128 or 256 bit GUID / key.\r\n    Though of course it would lower performance for some things.\r\n    However, supporting very large data throughput won't be the objective of this framework.\r\n    Easily supporting large amounts of data could help though.\r\n\r\n\r\n\r\n*/\r\n\r\nclass Data_Model extends Evented_Class {\r\n    constructor(spec = {}) {\r\n        super(spec);\r\n        this.__data_model = true;\r\n        if (spec && spec.context) {\r\n            this.context = spec.context;\r\n\r\n        }\r\n        if (spec && spec.name) {\r\n            this.name = spec.name;\r\n        }\r\n        this.__type = 'data_model';\r\n    }\r\n};\r\n\r\nmodule.exports = Data_Model;\r\n", "const Data_Model = require('../Data_Model');\r\nconst {tof} = require('lang-mini');\r\n\r\nconst more_general_equals = (that, other) => {\r\n\r\n    if (other instanceof Data_Model) {\r\n        // Compare the values???\r\n\r\n        // For the moment, get them as JSON....\r\n\r\n        // Though it looks like getting the values as JSON is not working properly in some cases.\r\n\r\n        \r\n\r\n        const my_json = that.toJSON();\r\n        const other_json = other.toJSON();\r\n\r\n\r\n\r\n        //console.log('[my_json, other_json]', [my_json, other_json]);\r\n\r\n        //console.trace();\r\n        //throw 'stop';\r\n\r\n        return my_json === other_json;\r\n\r\n    } else {\r\n        // what type is being stored in this????\r\n\r\n        // look at .value????\r\n        //   or the unwrapped value....?\r\n\r\n        // Does it have a .value????\r\n\r\n        //console.log('[that, other]', [that, other]);\r\n\r\n        if (that === other) {\r\n            return true;\r\n        } else {\r\n\r\n            if (that === undefined) {\r\n                return false;\r\n            } else {\r\n                const {value} = that;\r\n\r\n                const t_value = tof(value), t_other = tof(other);\r\n\r\n                //console.log('[t_value, t_other]', [t_value, t_other]);\r\n                //console.log('*** [value, other]', [value, other]);\r\n\r\n                if (t_value === t_other) {\r\n                    //console.log('*** [value, other]', [value, other]);\r\n\r\n                    if (value === other) {\r\n                        return true;\r\n                    } else {\r\n                        if (typeof value.equals === 'function' && typeof other.equals === 'function') {\r\n                            return value.equals(other);\r\n                        } else {\r\n\r\n                            if (value === other) {\r\n                                return true;\r\n                            } else {\r\n\r\n                                if (t_value === 'number' || t_value === 'string' || t_value === 'boolean') {\r\n                                    return value === other;\r\n                                } else {\r\n\r\n                                    if (t_value === 'array') {\r\n                                        // or tostring / tojson???\r\n\r\n                                        if (value.length === other.length) {\r\n                                            // compare each of them....\r\n\r\n                                            let res = true, c = 0, l = value.length;\r\n\r\n                                            do {\r\n                                                res = more_general_equals(value[c], other[c]);\r\n                                                c++;\r\n                                            } while (res === true && c < l)\r\n                                            return res;\r\n\r\n                                        } else {\r\n                                            return false;\r\n                                        }\r\n\r\n                                    } else {\r\n                                        console.log('[value, other]', [value, other]);\r\n                                        console.trace();\r\n                                        throw 'NYI';\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n\r\n                    \r\n                } else {\r\n                    // But number parsing etc....\r\n                    return false;\r\n                }\r\n\r\n\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        \r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    more_general_equals\r\n\r\n\r\n}", "\r\n// This is resulting in smaller code in other parts of the framework.\r\n//  This section is getting quite big (again)\r\n//  Still need to make use of the B+ free for ordered indexing.\r\n\r\n// Moving some code to jsgui-lang-essentials\r\n//  Will be publishing a 0.4 version of that before so long?\r\n//   Maybe with more explanation?\r\n\r\n// It may be worth publishing this, and a discussion forum about it on my own web forum.\r\n//  Perhaps that could come later, but jsgui-lang-essentials may be a good step. Could call it version 0.35.\r\n//   Could have a few examples\r\n//   Would be a useful toolkit I could use while working elsewhere.\r\n\r\n//  I think that web site would be lightening fast, and impress people with its speed compared to other web platforms that they are used to\r\n//   (though Facebook is OK)\r\n\r\n/*\r\n if (typeof define !== 'function') {\r\n var define = require('amdefine')(module);\r\n }\r\n\r\n\r\n // May sway implementations of the particular items more easily when they are in their own files.\r\n\r\n define([\"./jsgui-lang-essentials\"], function (jsgui) {\r\n */\r\n//var jsgui = require('./jsgui-lang-essentials');\r\n\r\n// StiffArray: an array with pre-allocated items\r\n// it seems that this array is usually faster (excluding IE javascript engine)\r\n// probably there is a reason to provide IE implementation based on usual dynamic arrays\r\n\r\nvar StiffArray = function (capacity) {\r\n\r\n    // -----------------------------------------\r\n    //              public interface:\r\n    // -----------------------------------------\r\n\r\n    var m_public = {\r\n        items: new Array(capacity), // internal storage array\r\n        count: 0, // items count\r\n        first: function () {\r\n            if (this.count == 0) throw \"StiffArray.first()\";\r\n            return this.items[0];\r\n        },\r\n        last: function () {\r\n            if (this.count == 0) throw \"StiffArray.last()\";\r\n            return this.items[this.count - 1];\r\n        },\r\n        add: function (item) {\r\n            if (this.count >= capacity) throw \"StiffArray.add()\";\r\n            //\r\n            this.items[this.count++] = item;\r\n        },\r\n        add_from: function (source) {\r\n            if (this.count + source.count > capacity) throw \"StiffArray.add_from()\";\r\n            //\r\n            for (var i = 0; i < source.count; i++) this.items[this.count++] = source.items[i];\r\n        },\r\n        insert: function (index, item) {\r\n            if ((index < 0) || (index > this.count)) throw \"StiffArray.insert(): index\";\r\n            if (this.count >= capacity) throw \"StiffArray.insert(): overflow\";\r\n            //\r\n            for (var i = this.count; i > index; i--) this.items[i] = this.items[i - 1];\r\n            this.items[index] = item;\r\n            this.count++;\r\n        },\r\n        removeAt: function (index) {\r\n            if ((index < 0) || (index >= this.count)) throw \"StiffArray.removeAt()\";\r\n            //\r\n            this.count--;\r\n            for (var i = index; i < this.count; i++) this.items[i] = this.items[i + 1];\r\n        },\r\n        removeFirst: function () {\r\n            this.removeAt(0);\r\n        },\r\n        removeLast: function () {\r\n            this.removeAt(this.count - 1);\r\n        },\r\n        copy_from: function (source, index, count) {\r\n            for (var i = 0; i < count; i++) {\r\n                this.items[i] = source.items[i + index];\r\n            }\r\n            this.count = count;\r\n        },\r\n        search_first: function (item) {\r\n            var cnt = this.count;\r\n            var first = 0;\r\n            while (cnt > 0) {\r\n                var step = Math.floor(cnt / 2);\r\n                var index = first + step;\r\n                if (this.items[index] < item) {\r\n                    first = index + 1;\r\n                    cnt -= (step + 1);\r\n                } else {\r\n                    cnt = step;\r\n                }\r\n            }\r\n            //\r\n            if (first < this.count) {\r\n                return { found: (this.items[first] == item), index: first };\r\n            }\r\n            return { found: false, index: first };\r\n        },\r\n        search_last: function (item) {\r\n            var cnt = this.count;\r\n            var first = 0;\r\n            while (cnt > 0) {\r\n                var step = Math.floor(cnt / 2);\r\n                var index = first + step;\r\n                if (item >= this.items[index]) {\r\n                    first = index + 1;\r\n                    cnt -= (step + 1);\r\n                } else {\r\n                    cnt = step;\r\n                }\r\n            }\r\n            //\r\n            if ((first > 0) && (first <= this.count)) {\r\n                if (this.items[first - 1] == item) {\r\n                    return { found: true, index: first - 1 };\r\n                }\r\n            }\r\n            return { found: false, index: first };\r\n        },\r\n        search_last_prefix: function (prefix) {\r\n            var prefix_length = prefix.length;\r\n            //\r\n            var check_prefix = function (item) {\r\n                if (prefix_length > item.length) return false;\r\n                return (item.substr(0, prefix_length) == prefix)\r\n            }\r\n            //\r\n            var cnt = this.count;\r\n            var first = 0;\r\n            while (cnt > 0) {\r\n                var step = Math.floor(cnt / 2);\r\n                var index = first + step;\r\n                var item = this.items[index];\r\n                if ((prefix > item) || check_prefix(item)) {\r\n                    first = index + 1;\r\n                    cnt -= (step + 1);\r\n                } else {\r\n                    cnt = step;\r\n                }\r\n            }\r\n            //\r\n            if ((first > 0) && (first <= this.count)) {\r\n                if (check_prefix(this.items[first - 1])) {\r\n                    return { found: true, index: first - 1 };\r\n                }\r\n            }\r\n            return { found: false, index: first };\r\n        },\r\n        toString: function () {\r\n            return this.items.slice(0, this.count).toString();\r\n        }\r\n    };\r\n\r\n\r\n    // -----------------------------------------\r\n    //       return the public interface:\r\n    // -----------------------------------------\r\n\r\n    return m_public;\r\n};\r\nmodule.exports = StiffArray;\r\n\r\n\r\n//return StiffArray;\r\n\r\n\r\n//});\r\n\r\n\r\n", "\r\n\r\n/*\r\n if (typeof define !== 'function') {\r\n var define = require('amdefine')(module);\r\n }\r\n\r\n\r\n // May sway implementations of the particular items more easily when they are in their own files.\r\n\r\n define([\"./jsgui-lang-essentials\", \"./jsgui-data-structures-stiffarray\"], function (jsgui, StiffArray) {\r\n */\r\n\r\n//var jsgui = require('./jsgui-lang-essentials');\r\n\r\n\r\nvar StiffArray = require('./stiffarray');\r\n\r\n// B+ Tree\r\n\r\n// some B+ Tree description can be found here:\r\n// http://www.cs.berkeley.edu/~kamil/teaching/su02/080802.pdf\r\n// http://baze.fri.uni-lj.si/dokumenti/B+%20Trees.pdf\r\n\r\n\r\n// sample tree classic presentation:\r\n//\r\n//\t              [] 7 []\r\n//\t              /     \\\r\n//\t             /       -----------------\r\n//\t            /                         \\\r\n//\t           /                           \\\r\n//\t     [] 3 [] 5 []                  [] 8 [] 8 []\r\n//\t     /    |     \\                  /     \\    \\\r\n//\t    /     |      \\                /       |    ----\r\n//     /      |       \\              /         \\       \\\r\n//  {1,2}   {3,4}    {5,6,7}      {8,8,8}    {8,8}    {8,9}\r\n//\r\n//   the diagram notation:\r\n//   numbers are \"keys\" array items\r\n//   \"[]\" figures are \"children\" array items\r\n\r\n\r\n// sample tree toText() presentation:\r\n//\r\n//\t      {1,2}\r\n//\t    3\r\n//\t      {3,4}\r\n//\t    5\r\n//\t      {5,6,7}\r\n//  7\r\n//\t      {8,8,8}\r\n//\t    8\r\n//\t      {8,8}\r\n//\t    8\r\n//\t      {8,9}\r\n\r\n\r\n// sample tree toString() presentation:\r\n//\r\n// {{{1,2}3{3,4}5{5,6,7}}7{{8,8,8}8{8,8}8{8,9}}}\r\n\r\n\r\n// some remarks:\r\n//\r\n//  children.length == keys.length + 1\r\n//\r\n//  (max children[i] key) <= (keys[i]) <= (min children[i+1] key)\r\n//\r\n//  the node overflow threshold referred somewhere as \"node order\" is referred as \"node capacity\" here\r\n\r\n\r\n// -----------------------------------------\r\n//\r\n//\t              global variables:\r\n//\r\n// -----------------------------------------\r\n\r\n//var B_Plus_Tree_NextNodeDebugId = 1;\r\n// uncomment the line above to include unique node IDs\r\n// to the toString() and toTest() output\r\n\r\n// -----------------------------------------\r\n//\r\n//\t              B_Plus_Node:\r\n//\r\n// -----------------------------------------\r\n\r\n// Likely to get this into the core, and do some more polymorphic optimization to reduce file size.\r\n//  One various things are running, I will focus on some code size optimizations to bring things down to really small sizes when used in\r\n//  conjunction with Essentials.\r\n\r\n// Not sure about the B+ tree making use of Collections but with no indexing?\r\n//  I think by making Collection really flexible, and a version that mixes in other functionality to a more basic one,\r\n//  it would be possible to make the B+ tree use a Collection with StiffArray capabilities.\r\n//   Not worth it right now. Keep StiffArray as a low level component used for the tree. Maybe move it out of its own JavaScript file, not sure it\r\n//    will be used for that much else. Not sure, could be good for when binary searches are required.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// B+ tree index node:\r\nvar B_Plus_Node = function (nodeCapacity) {\r\n\r\n    // -----------------------------------------\r\n    //              public interface:\r\n    // -----------------------------------------\r\n\r\n    var m_public = {\r\n        isLeaf: false,\r\n        parent: null,\r\n        keys: new StiffArray(nodeCapacity + 1),     // +1: to allow temporary owerflow\r\n        children: new StiffArray(nodeCapacity + 2) // +2: children.length == keys.length + 1\r\n    };\r\n\r\n    // -----------------------------------------\r\n    //                  debug ID:\r\n    // -----------------------------------------\r\n\r\n    //if (typeof (B_Plus_Tree_NextNodeDebugId) != \"undefined\") m_public.debugId = B_Plus_Tree_NextNodeDebugId++;\r\n\r\n    // -----------------------------------------\r\n    //       return the public interface:\r\n    // -----------------------------------------\r\n\r\n    return m_public;\r\n};\r\n\r\n// -----------------------------------------\r\n//\r\n//\t              B_Plus_Leaf:\r\n//\r\n// -----------------------------------------\r\n\r\n// B+ tree leaf node:\r\n\r\nvar B_Plus_Leaf = function (nodeCapacity) {\r\n\r\n    // -----------------------------------------\r\n    //              public interface:\r\n    // -----------------------------------------\r\n\r\n    var m_public = {\r\n        isLeaf: true,\r\n        parent: null,\r\n        keys: new StiffArray(nodeCapacity + 1),\r\n        values: new StiffArray(nodeCapacity + 1),\r\n        //\r\n        // leafs chain:\r\n        prevLeaf: null,\r\n        nextLeaf: null\r\n    };\r\n\r\n    // -----------------------------------------\r\n    //                  debug ID:\r\n    // -----------------------------------------\r\n\r\n    //if (typeof(B_Plus_Tree_NextNodeDebugId) != \"undefined\") m_public.debugId = B_Plus_Tree_NextNodeDebugId++;\r\n\r\n    // -----------------------------------------\r\n    //       return the public interface:\r\n    // -----------------------------------------\r\n\r\n    return m_public;\r\n};\r\n\r\n\r\n// -----------------------------------------\r\n//\r\n//\t              B_Plus_Tree:\r\n//\r\n// -----------------------------------------\r\n\r\n// B+ tree:\r\n\r\n// Using Crockford's Module Pattern.\r\n//  Need to be careful about how it is not initialized with a constructor and the 'new' keyword.\r\n\r\nvar FindInfo = (key, value, isPrefixSearch) => {\r\n    isPrefixSearch = !!isPrefixSearch;\r\n    var isKeyPresent = (key != undefined);\r\n    var isValuePresent = (value != undefined);\r\n    var prefixLength = 0;\r\n    if (isPrefixSearch) {\r\n        if (typeof (key) != \"string\") {\r\n            isPrefixSearch = false;\r\n        } else {\r\n            prefixLength = key.length;\r\n        }\r\n    }\r\n    //\r\n    return {\r\n        key: key,     // key to find (if present)\r\n        value: value, // value to find (if present)\r\n        isPrefixSearch: isPrefixSearch, // prefix search mode\r\n        leaf: null,   // found leaf\r\n        index: -1,    // found leaf item index\r\n        isKeyPresent: isKeyPresent, // function () { return this.key !== undefined; }, // is the search criteria contains key\r\n        isValuePresent: isValuePresent, // function () { return this.value !== undefined; }, // is the search criteria contains value\r\n        foundKey: function () { return this.leaf.keys.items[this.index]; }, // found items's key\r\n        foundValue: function () { return this.leaf.values.items[this.index]; }, // found item's value\r\n        //\r\n        prefix_length: prefixLength, // prefix length\r\n        check_prefix: function () {  // check the current key to match the prefix\r\n            if (!isPrefixSearch) return false;\r\n            if (this.index >= this.leaf.keys.count) return false;\r\n            var keyToCheck = this.foundKey();\r\n            if (this.prefix_length > keyToCheck.length) return false;\r\n            return (keyToCheck.substr(0, this.prefix_length) == this.key)\r\n        }\r\n    };\r\n};\r\n\r\n\r\n\r\nvar B_Plus_Tree = function (nodeCapacity) {\r\n\r\n    // -----------------------------------------\r\n    //            arguments processing:\r\n    // -----------------------------------------\r\n\r\n    if (nodeCapacity === undefined) nodeCapacity = 10;\r\n    if (nodeCapacity < 4) throw \"B_Plus_Tree(): node capacity must be >= 4\";\r\n\r\n    // -----------------------------------------\r\n    //              public interface:\r\n    // -----------------------------------------\r\n\r\n\r\n    var m_public = {\r\n        // tree root:\r\n        root: new B_Plus_Leaf(nodeCapacity),\r\n        //\r\n        // leafs chain:\r\n        firstLeaf: null,\r\n        //\r\n        lastLeaf: null,\r\n        //\r\n        // ---------------------\r\n        //     editing:\r\n        // ---------------------\r\n        //\r\n        // clear the tree:\r\n        clear: function () {\r\n            p_Clear();\r\n        },\r\n        //\r\n\r\n        // insert(key, value)\r\n        // insert([key, value])\r\n        insert: function (key, value) {\r\n            if (arguments.length == 2) {\r\n                return p_Insert(key, value);\r\n            } else {\r\n                return p_Insert(key[0], key[1]);\r\n            }\r\n        },\r\n        //\r\n\r\n        // remove(key) - remove all values with given key\r\n        // remove(key, value) - remove one value occurrence\r\n        remove: function (key, value) {\r\n            if (arguments.length == 2) {\r\n                return p_Remove(key, value);\r\n            } else {\r\n                p_RemoveKey(key);\r\n            }\r\n        },\r\n        //\r\n        // ---------------------\r\n        //       finding:\r\n        // ---------------------\r\n        //\r\n\r\n        // findFirst() - find the very first item\r\n        // findFirst(key) - find the first item for the given key\r\n        // findFirst(key, value) - find the first key+value occurrence\r\n        //\r\n        // returns the FindInfo object:\r\n        //    key: key,     // key to find (if present)\r\n        //    value: value, // value to find (if present)\r\n        //\r\n        //    leaf: null,   // the current found leaf\r\n        //    index: -1,    // the current found index\r\n        //\r\n        //    foundKey():   // the current found key\r\n        //    foundValue(): // the current found value\r\n        //\r\n        findFirst: function (key, value) {\r\n            return p_FindFirst(key, value);\r\n        },\r\n        //\r\n        // find first key matching the prefix:\r\n        findFirstPrefix: function (prefix) {\r\n            return p_FindFirst(prefix, undefined, true);\r\n        },\r\n        //\r\n        // find next search conditions occurence\r\n        findNext: function (findInfo) {\r\n            return p_FindNext(findInfo);\r\n        },\r\n\r\n        //\r\n        // findLast() - find the very last item\r\n        // findLast(key) - find the last item for the given key\r\n        // findLast(key, value) - find the last key+value occurrence\r\n        findLast: function (key, value) {\r\n            return p_FindLast(key, value);\r\n        },\r\n        //\r\n        // find last key matching the prefix:\r\n        findLastPrefix: function (prefix) {\r\n            return p_FindLast(prefix, undefined, true);\r\n        },\r\n        //\r\n        // find previous search conditions occurence\r\n        findPrevious: function (findInfo) {\r\n            return p_FindPrev(findInfo);\r\n        },\r\n        //\r\n        // ---------------------\r\n        // dictionary-like usage:\r\n        // ---------------------\r\n        //\r\n        // get one value by key (or null):\r\n        getValue: function (key) {\r\n            return p_GetValue(key);\r\n        },\r\n        // set one value by key (insert or update):\r\n        setValue: function (key, value) {\r\n            p_SetValue(key, value);\r\n        },\r\n        //\r\n        //\r\n        // ---------------------\r\n        //   other functions:\r\n        // ---------------------\r\n        //\r\n\r\n        // count() - count all values\r\n        // count(key) - count values with the given key\r\n        count: function (key) {\r\n            if (arguments.length == 1) {\r\n                return p_CountKey(key);\r\n            } else {\r\n                return p_Count();\r\n            }\r\n        },\r\n        //\r\n\r\n        // tree capacity:\r\n        getCapacity: function () {\r\n            return m_nodeMaxCount;\r\n        },\r\n        //\r\n        // ---------------------\r\n        // additional functions:\r\n        // ---------------------\r\n        //\r\n        // iterate through each key + value pair\r\n        // callback is function(key, value)\r\n        'each': function (callback) {\r\n            return p_each(callback);\r\n        },\r\n        //\r\n        // get all keys\r\n        'keys': function () {\r\n            return p_keys();\r\n        },\r\n        //\r\n        // get all [key, value] pairs\r\n        'keys_and_values': function () {\r\n            return p_keys_and_values();\r\n        },\r\n        //\r\n        //\r\n        // get keys and values by prefix\r\n        'get_by_prefix': function (prefix) {\r\n            return p_get_by_prefix(prefix);\r\n        },\r\n        //\r\n        // get keys by prefix\r\n        'get_keys_by_prefix': function (prefix) {\r\n            return p_get_keys_by_prefix(prefix);\r\n        },\r\n        //\r\n        // get values at key...\r\n        'get_values_by_key': function (key) {\r\n            return p_get_values_by_key(key);\r\n        }\r\n    };\r\n\r\n    // -----------------------------------------\r\n    //              initialization:\r\n    // -----------------------------------------\r\n\r\n    m_public.firstLeaf = m_public.root;\r\n    m_public.lastLeaf = m_public.root;\r\n\r\n    // -----------------------------------------\r\n    //              private variables:\r\n    // -----------------------------------------\r\n\r\n    var m_nodeMaxCount = nodeCapacity;\r\n    var m_nodeMinCount = Math.floor(m_nodeMaxCount / 2);\r\n\r\n    // -----------------------------------------\r\n    //                 clear():\r\n    // -----------------------------------------\r\n\r\n    // clear the tree\r\n    // (just create new empty root)\r\n    var p_Clear = function () {\r\n        m_public.root = new B_Plus_Leaf(m_nodeMaxCount);\r\n        m_public.firstLeaf = m_public.root;\r\n        m_public.lastLeaf = m_public.root;\r\n    };\r\n\r\n    // -----------------------------------------\r\n    //                iterations:\r\n    // -----------------------------------------\r\n\r\n    var p_keys = function () {\r\n        var res = [];\r\n        _p_each_key(function (key) {\r\n            res.push(key);\r\n        });\r\n        return res;\r\n    }\r\n\r\n    var p_keys_and_values = function () {\r\n        var res = [];\r\n        p_each(function (key, value) {\r\n            res.push([key, value]);\r\n        });\r\n        return res;\r\n    }\r\n\r\n    var _p_each_key = function (callback) {\r\n        var findInfo = p_FindFirst();\r\n        while (findInfo != null) {\r\n            var fk = findInfo.foundKey();\r\n            callback(fk);\r\n            findInfo = p_FindNext(findInfo);\r\n        }\r\n    }\r\n\r\n    var p_each = function (callback) {\r\n        var findInfo = p_FindFirst();\r\n\r\n        var doStop = false;\r\n\r\n\r\n        while (findInfo != null) {\r\n            //var stop =\r\n            //console.log('doStop ' + doStop);\r\n            var fk = findInfo.foundKey();\r\n            var fv = findInfo.foundValue();\r\n            // callback with the key and the value\r\n            callback(fk, fv, function() {\r\n                //throw 'stop';\r\n                //console.log('stop!!!');\r\n                doStop = true;\r\n            });\r\n            //console.log('2) doStop ' + doStop);\r\n            if (doStop) {\r\n                findInfo = null;\r\n            } else {\r\n                findInfo = p_FindNext(findInfo);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    // -----------------------------------------\r\n    //                insert():\r\n    // -----------------------------------------\r\n\r\n    // insert (key, value) item to the tree\r\n    var p_Insert = function (key, value) {\r\n        //\r\n        // search leaf to insert:\r\n        var searchResult = searchLeaf(key);\r\n        var leaf = searchResult.node;\r\n        //\r\n        // insert to the leaf:\r\n        leaf.keys.insert(searchResult.index, key);\r\n        leaf.values.insert(searchResult.index, value);\r\n        //\r\n        // if overflow:\r\n        if (leaf.keys.count > m_nodeMaxCount) {\r\n            if ((leaf.prevLeaf != null) && (leaf.prevLeaf.keys.count < m_nodeMaxCount) && (leaf.prevLeaf.parent == leaf.parent)) {\r\n                rotateAmongLeavesToLeft(leaf.prevLeaf, leaf);\r\n            } else if ((leaf.nextLeaf != null) && (leaf.nextLeaf.keys.count < m_nodeMaxCount) && (leaf.nextLeaf.parent == leaf.parent)) {\r\n                rotateAmongLeavesToRight(leaf, leaf.nextLeaf);\r\n            } else {\r\n                splitLeaf(leaf);\r\n            }\r\n        }\r\n    };\r\n\r\n    // split leaf to 2 leaves\r\n    // (create right sibling)\r\n    var splitLeaf = function (leaf) {\r\n        var leftCount = m_nodeMinCount;\r\n        var rightCount = leaf.keys.count - leftCount;\r\n        //\r\n        // create right leaf:\r\n        var newRightLeaf = new B_Plus_Leaf(m_nodeMaxCount);\r\n        newRightLeaf.parent = leaf.parent;\r\n        //\r\n        // copy to the right:\r\n        newRightLeaf.keys.copy_from(leaf.keys, leftCount, rightCount);\r\n        newRightLeaf.values.copy_from(leaf.values, leftCount, rightCount);\r\n        //\r\n        // update the left:\r\n        leaf.keys.count = leftCount;\r\n        leaf.values.count = leftCount;\r\n        //\r\n        // update leafs chain:\r\n        newRightLeaf.nextLeaf = leaf.nextLeaf;\r\n        if (newRightLeaf.nextLeaf != null) newRightLeaf.nextLeaf.prevLeaf = newRightLeaf;\r\n        newRightLeaf.prevLeaf = leaf;\r\n        leaf.nextLeaf = newRightLeaf;\r\n        if (m_public.lastLeaf == leaf) m_public.lastLeaf = newRightLeaf;\r\n        //\r\n        // update parent:\r\n        if (leaf.parent != null) {\r\n            var leafIndex = calcChildIndex(leaf.parent, leaf);\r\n            insertToParent(leaf.parent, newRightLeaf, newRightLeaf.keys.first(), leafIndex + 1);\r\n        } else {\r\n            createNewRoot(leaf, newRightLeaf, newRightLeaf.keys.first());\r\n        }\r\n    };\r\n\r\n    // create new root\r\n    var createNewRoot = function (nodeLeft, nodeRight, key) {\r\n        // create new root containing nodeLeft and nodeRight children\r\n        // btw nodeLeft and nodeRight can be leaves\r\n        //\r\n        // create the root node:\r\n        var newRoot = new B_Plus_Node(m_nodeMaxCount);\r\n        newRoot.keys.add(key);\r\n        newRoot.children.add(nodeLeft);\r\n        newRoot.children.add(nodeRight);\r\n        //\r\n        // update parent references:\r\n        nodeLeft.parent = newRoot;\r\n        nodeRight.parent = newRoot;\r\n        //\r\n        // update root reference:\r\n        m_public.root = newRoot;\r\n    };\r\n\r\n    // insert newChildNode with key newChildFirstKey into the parentNode\r\n    // the newChildNode inserts into the newChildIndex position in the children\r\n    var insertToParent = function (parentNode, newChildNode, newChildFirstKey, newChildIndex) {\r\n        //\r\n        // insert child info:\r\n        parentNode.keys.insert(newChildIndex - 1, newChildFirstKey); // -1: the related key is \"before\" the child\r\n        parentNode.children.insert(newChildIndex, newChildNode);\r\n        //\r\n        // update parent reference:\r\n        newChildNode.parent = parentNode;\r\n        //\r\n        // update parent if overflow:\r\n        if (parentNode.keys.count > m_nodeMaxCount) {\r\n            splitNode(parentNode);\r\n        }\r\n    };\r\n\r\n    // split the overflowed node into 2 nodes\r\n    var splitNode = function (node) {\r\n        // split node: create right sibling\r\n        //\r\n        var newLeftCount = m_nodeMinCount;\r\n        var newRightCount = m_nodeMaxCount - newLeftCount;\r\n        var middleKey = node.keys.items[newLeftCount]; // key to move up\r\n        //\r\n        // create right node:\r\n        var newRightNode = new B_Plus_Node(m_nodeMaxCount);\r\n        newRightNode.keys.copy_from(node.keys, newLeftCount + 1, newRightCount);\r\n        newRightNode.children.copy_from(node.children, newLeftCount + 1, newRightCount + 1);\r\n        //\r\n        // update the node:\r\n        node.keys.count = newLeftCount;\r\n        node.children.count = newLeftCount + 1;\r\n        //\r\n        // update children's parent:\r\n        for (var i = 0; i < newRightNode.children.count; i++) newRightNode.children.items[i].parent = newRightNode;\r\n        //\r\n        // update parent:\r\n        if (node.parent == null) {\r\n            createNewRoot(node, newRightNode, middleKey);\r\n        } else {\r\n            var nodeIndex = calcChildIndex(node.parent, node);\r\n            insertToParent(node.parent, newRightNode, middleKey, nodeIndex + 1);\r\n        }\r\n    };\r\n\r\n    // -----------------------------------------\r\n    //                remove():\r\n    // -----------------------------------------\r\n\r\n    // remove (key, value) item from the tree\r\n    var p_Remove = function (key, value) {\r\n        var searchResult = searchLeafValue(key, value);\r\n        if (!searchResult.found) return false;\r\n        //\r\n        removeFromLeaf(searchResult.node, searchResult.index);\r\n        return true;\r\n    };\r\n\r\n    // remove all the items with given key\r\n    var p_RemoveKey = function (key) {\r\n        while (true) {\r\n            var searchResult = searchLeaf(key);\r\n            if (!searchResult.found) break;\r\n            //\r\n            removeFromLeaf(searchResult.node, searchResult.index);\r\n        }\r\n    };\r\n\r\n    // remove the item from index position of the leaf\r\n    var removeFromLeaf = function (leaf, index) {\r\n        leaf.keys.removeAt(index);\r\n        leaf.values.removeAt(index);\r\n        //\r\n        // the item is removed; then update the tree if the leaf is underflowed:\r\n        if (leaf.keys.count < m_nodeMinCount) {\r\n            if ((leaf.prevLeaf != null) && (leaf.parent == leaf.prevLeaf.parent) && (leaf.prevLeaf.keys.count > m_nodeMinCount)) {\r\n                rotateAmongLeavesToRight(leaf.prevLeaf, leaf);\r\n            } else if ((leaf.nextLeaf != null) && (leaf.parent == leaf.nextLeaf.parent) && (leaf.nextLeaf.keys.count > m_nodeMinCount)) {\r\n                rotateAmongLeavesToLeft(leaf, leaf.nextLeaf);\r\n            } else {\r\n                mergeLeaf(leaf);\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n\r\n    // merge the underflowed leaf with left or right sibling\r\n    var mergeLeaf = function (leaf) {\r\n        // if the leaf is root, then underflow is allowed:\r\n        if (leaf.parent == null) {\r\n            return;\r\n        }\r\n        //\r\n        // calculate keys count in left and right sibling:\r\n        var leftCount = m_nodeMaxCount + 1;\r\n        var rightCount = m_nodeMaxCount + 1;\r\n        if ((leaf.prevLeaf != null) && (leaf.prevLeaf.parent == leaf.parent)) {\r\n            leftCount = leaf.prevLeaf.keys.count;\r\n        }\r\n        if ((leaf.nextLeaf != null) && (leaf.nextLeaf.parent == leaf.parent)) {\r\n            rightCount = leaf.nextLeaf.keys.count;\r\n        }\r\n        //\r\n        // select sibling to merge:\r\n        if (leftCount < rightCount) {\r\n            if (leftCount + leaf.keys.count > m_nodeMaxCount) throw \"B_Plus_Tree.mergeLeaf(): leftCount\";\r\n            mergeLeaves(leaf.prevLeaf, leaf);\r\n        } else {\r\n            if (rightCount + leaf.keys.count > m_nodeMaxCount) throw \"B_Plus_Tree.mergeLeaf(): rightCount\";\r\n            mergeLeaves(leaf, leaf.nextLeaf);\r\n        }\r\n    };\r\n\r\n    // merge 2 leaf nodes: leafLeft and leafRight\r\n    var mergeLeaves = function (leafLeft, leafRight) { // merge (left + right) -> left\r\n        //\r\n        // add right to left:\r\n        leafLeft.keys.add_from(leafRight.keys);\r\n        leafLeft.values.add_from(leafRight.values);\r\n        //\r\n        // update leafs chain:\r\n        leafLeft.nextLeaf = leafRight.nextLeaf;\r\n        if (leafLeft.nextLeaf != null) leafLeft.nextLeaf.prevLeaf = leafLeft;\r\n        if (m_public.lastLeaf == leafRight) m_public.lastLeaf = leafLeft;\r\n        //\r\n        // remove right from parent:\r\n        var parent = leafRight.parent;\r\n        var leafRightIndex = calcChildIndex(parent, leafRight);\r\n        parent.keys.removeAt(leafRightIndex - 1);\r\n        parent.children.removeAt(leafRightIndex);\r\n        //\r\n        // update parent if underflow:\r\n        if (parent.keys.count < m_nodeMinCount) {\r\n            mergeNode(parent);\r\n        };\r\n    };\r\n\r\n    // fix underflower index (non-leaf) node:\r\n    // rotate among sibling, or merge with sibling\r\n    var mergeNode = function (node) { // merge the node with sibling\r\n        var parent = node.parent;\r\n        //\r\n        // remove root if the node became empty root:\r\n        if (node.parent == null) {\r\n            if (node.keys.count == 0) {\r\n                m_public.root = node.children.items[0];\r\n                m_public.root.parent = null;\r\n            }\r\n            return;\r\n        }\r\n        //\r\n        // find left and right siblings:\r\n        var nodeIndex = calcChildIndex(parent, node);\r\n        var leftSibling = (nodeIndex > 0) ? parent.children.items[nodeIndex - 1] : null;\r\n        var rightSibling = ((nodeIndex + 1) < parent.children.count) ? parent.children.items[nodeIndex + 1] : null;\r\n        //\r\n        // try rotation:\r\n        if ((leftSibling != null) && (leftSibling.keys.count > m_nodeMinCount)) {\r\n            rotateAmongNodesToRight(leftSibling, node);\r\n            return;\r\n        }\r\n        if ((rightSibling != null) && (rightSibling.keys.count > m_nodeMinCount)) {\r\n            rotateAmongNodesToLeft(node, rightSibling);\r\n            return;\r\n        }\r\n        //\r\n        // calculate siblings key count:\r\n        var leftCount = m_nodeMaxCount + 1;\r\n        var rightCount = m_nodeMaxCount + 1;\r\n        if (leftSibling != null) {\r\n            leftCount = leftSibling.keys.count;\r\n        }\r\n        if (rightSibling != null) {\r\n            rightCount = rightSibling.keys.count;\r\n        }\r\n        //\r\n        // select sibling to merge:\r\n        if (leftCount < rightCount) {\r\n            if (leftSibling == null) throw \"B_Plus_Tree.mergeNode(): leftSibling\";\r\n            mergeNodes(leftSibling, node, nodeIndex);\r\n        } else {\r\n            if (rightSibling == null) throw \"B_Plus_Tree.mergeNode(): rightSibling\";\r\n            mergeNodes(node, rightSibling, nodeIndex + 1);\r\n        }\r\n    };\r\n\r\n    // merge 2 index (non-leaf) nodes nodeLeft and nodeRight into one node\r\n    // the nodeRightIndex is the nodeRight index in parent's children array;\r\n    // the nodeRightIndex is known in caller, so it's not needed to calculate it here\r\n    var mergeNodes = function (nodeLeft, nodeRight, nodeRightIndex) { // merge (left + right) -> left\r\n        var parent = nodeLeft.parent;\r\n        //\r\n        // update right children parent:\r\n        for (var i = 0; i < nodeRight.children.count; i++) nodeRight.children.items[i].parent = nodeLeft;\r\n        //\r\n        // move down key from parent:\r\n        nodeLeft.keys.add(nodeLeft.parent.keys.items[nodeRightIndex - 1]);\r\n        //\r\n        // add right to left:\r\n        nodeLeft.keys.add_from(nodeRight.keys);\r\n        nodeLeft.children.add_from(nodeRight.children);\r\n        //\r\n        // remove right from parent:\r\n        parent.keys.removeAt(nodeRightIndex - 1);\r\n        parent.children.removeAt(nodeRightIndex);\r\n        //\r\n        // update parent if underflow:\r\n        if (parent.keys.count < m_nodeMinCount) {\r\n            mergeNode(parent);\r\n        };\r\n    };\r\n\r\n\r\n    // -----------------------------------------\r\n    //          findFirst() / findNext():\r\n    // -----------------------------------------\r\n\r\n    // FindInfo nested class\r\n    // contains the search criteria (key, value) and search result (leaf, index)\r\n\r\n\r\n    // find first item matching (key, value) search criteria\r\n    // use cases:\r\n    // p_FindFirst()\r\n    // p_FindFirst(key)\r\n    // p_FindFirst(key, value)\r\n    // p_FindFirst(key, undefined, true)\r\n    var p_FindFirst = function (key, value, isPrefixSearch) {\r\n        var findInfo = FindInfo(key, value, isPrefixSearch);\r\n        //\r\n        if (findInfo.isKeyPresent) {\r\n            if (findInfo.isPrefixSearch && findInfo.isValuePresent) throw \"B_Plus_Tree.p_FindFirst(): arguments error: isPrefixSearch, but value is present\";\r\n            //\r\n            var searchResult = findInfo.isValuePresent ? searchLeafValue(key, value) : searchLeaf(key);\r\n            findInfo.leaf = searchResult.node;\r\n            findInfo.index = searchResult.index;\r\n            if (!searchResult.found) {\r\n                if (!findInfo.check_prefix()) {\r\n                    return null;\r\n                }\r\n            }\r\n        } else {\r\n            if (findInfo.isValuePresent) throw \"B_Plus_Tree.findFirst(): arguments error: key is not present, but value is present\";\r\n            //\r\n            findInfo.leaf = m_public.firstLeaf;\r\n            findInfo.index = 0;\r\n            if (findInfo.leaf.keys.count <= 0) return null;\r\n        }\r\n        //\r\n        return findInfo;\r\n    };\r\n\r\n    // find last item matching (key, value) search criteria\r\n    // use cases:\r\n    // p_FindLast()\r\n    // p_FindLast(key)\r\n    // p_FindLast(key, value)\r\n    // p_FindLast(key, undefined, true)\r\n    var p_FindLast = function (key, value, isPrefixSearch) {\r\n        var findInfo = new FindInfo(key, value, isPrefixSearch);\r\n        //\r\n        if (findInfo.isKeyPresent) {\r\n            if (findInfo.isPrefixSearch && findInfo.isValuePresent) throw \"B_Plus_Tree.p_FindLast(): arguments error: isPrefixSearch, but value is present\";\r\n            //\r\n            if (findInfo.isPrefixSearch) {\r\n                var searchResult = searchLastLeafByPrefix(key);\r\n                findInfo.leaf = searchResult.node;\r\n                findInfo.index = searchResult.index;\r\n                if (!searchResult.found) {\r\n                    return null;\r\n                }\r\n            } else {\r\n                var searchResult = findInfo.isValuePresent ? searchLastLeafValue(key, value) : searchLastLeaf(key);\r\n                findInfo.leaf = searchResult.node;\r\n                findInfo.index = searchResult.index;\r\n                if (!searchResult.found) {\r\n                    return null;\r\n                }\r\n            }\r\n        } else {\r\n            if (findInfo.isValuePresent) throw \"B_Plus_Tree.findLast(): arguments error: key is not present, but value is present\";\r\n            //\r\n            findInfo.leaf = m_public.lastLeaf;\r\n            findInfo.index = findInfo.leaf.keys.count - 1;\r\n            if (findInfo.index < 0) return null;\r\n        }\r\n        //\r\n        return findInfo;\r\n    };\r\n\r\n    // move to next item\r\n    var findGoToNext = function (findInfo) {\r\n        findInfo.index++;\r\n        if (findInfo.index >= findInfo.leaf.keys.count) {\r\n            findInfo.leaf = findInfo.leaf.nextLeaf;\r\n            findInfo.index = 0;\r\n        }\r\n        //\r\n        return (findInfo.leaf != null);\r\n    };\r\n\r\n    // move to previous item\r\n    var findGoToPrev = function (findInfo) {\r\n        findInfo.index--;\r\n        if (findInfo.index < 0) {\r\n            findInfo.leaf = findInfo.leaf.prevLeaf;\r\n            if (findInfo.leaf == null) return false;\r\n            findInfo.index = findInfo.leaf.keys.count - 1;\r\n        }\r\n        //\r\n        return true;\r\n    };\r\n\r\n    // find next item after the findInfo's found item, matching the findInfo's search criteria\r\n    var p_FindNext = function (findInfo) {\r\n        while (true) {\r\n            if (!findGoToNext(findInfo)) return null;\r\n            //\r\n            if (findInfo.isPrefixSearch) {\r\n                if (!findInfo.check_prefix()) return null;\r\n            } else {\r\n                if (findInfo.isKeyPresent && (findInfo.key != findInfo.foundKey())) return null;\r\n            }\r\n            //\r\n            if (findInfo.isValuePresent) {\r\n                if (findInfo.value == findInfo.foundValue()) return findInfo;\r\n            } else {\r\n                return findInfo;\r\n            }\r\n        }\r\n    };\r\n\r\n    // find previous item after the findInfo's found item, matching the findInfo's search criteria\r\n    var p_FindPrev = function (findInfo) {\r\n        while (true) {\r\n            if (!findGoToPrev(findInfo)) return null;\r\n            //\r\n            //if (findInfo.isKeyPresent && (findInfo.key != findInfo.foundKey())) return null;\r\n            if (findInfo.isPrefixSearch) {\r\n                if (!findInfo.check_prefix()) return null;\r\n            } else {\r\n                if (findInfo.isKeyPresent && (findInfo.key != findInfo.foundKey())) return null;\r\n            }\r\n            //\r\n            if (findInfo.isValuePresent) {\r\n                if (findInfo.value == findInfo.foundValue()) return findInfo;\r\n            } else {\r\n                return findInfo;\r\n            }\r\n        }\r\n    };\r\n\r\n    // -----------------------------------------\r\n    //          additional methods:\r\n    // -----------------------------------------\r\n\r\n    // get values at key...\r\n    //  make this always return an array, even if there is one item.\r\n    //  will make interpretation easier.\r\n\r\n    // will move the prefix search code into here.\r\n\r\n    // iterate nodes by prefix... that may be a more efficient way of doing this, may be less efficient, it assigns one more thing I think.\r\n    //  possibly a fast iterator?\r\n\r\n    //  definitely would be easier code, I think it would be worth doing.\r\n    //  could also be given its own check function.\r\n    //   maybe gets given starting location.+\r\n\r\n\r\n    var p_get_values_by_key = function (key) {\r\n        var res = [];\r\n        var findInfo = p_FindFirst(key);\r\n        while (findInfo != null) {\r\n            res.push(findInfo.foundValue());\r\n            findInfo = p_FindNext(findInfo);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    // get keys and values by prefix\r\n\r\n    var p_get_by_prefix = function (prefix) {\r\n        var res = [];\r\n        var findInfo = m_public.findFirstPrefix(prefix);\r\n        while (findInfo != null) {\r\n            res.push([findInfo.foundKey(), findInfo.foundValue()]);\r\n            findInfo = m_public.findNext(findInfo);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    // get keys by prefix\r\n\r\n    var p_get_keys_by_prefix = function (prefix) {\r\n        var res = [];\r\n        var findInfo = m_public.findFirstPrefix(prefix);\r\n        while (findInfo != null) {\r\n            res.push(findInfo.foundKey());\r\n            findInfo = m_public.findNext(findInfo);\r\n        }\r\n        return res;\r\n    }\r\n\r\n\r\n    // -----------------------------------------\r\n    //          getValue() / setValue():\r\n    // -----------------------------------------\r\n\r\n    // get value for the given key\r\n    var p_GetValue = function (key) {\r\n        var searchResult = searchLeaf(key);\r\n        if (!searchResult.found) return null;\r\n        return searchResult.node.values.items[searchResult.index];\r\n    };\r\n\r\n    // set value for the given key\r\n    var p_SetValue = function (key, value) {\r\n        var searchResult = searchLeaf(key);\r\n        if (searchResult.found) {\r\n            removeFromLeaf(searchResult.node, searchResult.index);\r\n        }\r\n        //\r\n        p_Insert(key, value);\r\n    };\r\n\r\n    // -----------------------------------------\r\n    //                 count():\r\n    // -----------------------------------------\r\n\r\n    // count all the value items in the tree\r\n    // is that an easier way to iterate?\r\n\r\n    var p_Count = function () {\r\n        var result = 0;\r\n        //\r\n        var leaf = m_public.firstLeaf;\r\n        while (leaf != null) {\r\n            result += leaf.keys.count;\r\n            leaf = leaf.nextLeaf;\r\n        }\r\n        //\r\n        return result;\r\n    };\r\n\r\n    // count the value items with given key in the tree\r\n    var p_CountKey = function (key) {\r\n        var result = 0;\r\n        //\r\n        var findInfo = m_public.findFirst(key);\r\n        while (findInfo != null) {\r\n            result++;\r\n            findInfo = m_public.findNext(findInfo);\r\n        }\r\n        //\r\n        return result;\r\n    };\r\n\r\n    // -----------------------------------------\r\n    //                 toText():\r\n    // -----------------------------------------\r\n\r\n    // returns multi-line text presentation for the tree\r\n\r\n    /*\r\n\r\n     var _p_ToText = function () {\r\n     var result = m_public.root.toText(\"\");\r\n     //\r\n     if (typeof (B_Plus_Tree_NextNodeDebugId) != \"undefined\") {\r\n     // print leafs chain:\r\n     result += \"\\r\\n\";\r\n     var leaf = m_public.firstLeaf;\r\n     while (leaf != null) {\r\n     result += \"(\" + leaf.debugId + \") \";\r\n     leaf = leaf.nextLeaf;\r\n     }\r\n     }\r\n     //\r\n     return result;\r\n     };\r\n\r\n     */\r\n\r\n    // -----------------------------------------\r\n    //                rotations:\r\n    // -----------------------------------------\r\n\r\n    // \"rotation\" means moving items between siblings instead of split/merge\r\n\r\n    // the following conditions are true when rotation is called:\r\n    // leftNode.parent == rightNode.parent\r\n    // leftLeaf.parent == rightLeaf.parent\r\n\r\n    // move a key item to the left between leftNode and rightNode index (non-leaf) nodes\r\n    // right node first item -> parent\r\n    // parent item -> left node\r\n    var rotateAmongNodesToLeft = function (leftNode, rightNode) {\r\n        // move item from rightNode to LeftNode\r\n        //\r\n        var parent = rightNode.parent;\r\n        var rightIndex = calcChildIndex(parent, rightNode);\r\n        //\r\n        // move the key:\r\n        leftNode.keys.add(parent.keys.items[rightIndex - 1]); // copy the key down\r\n        parent.keys.items[rightIndex - 1] = rightNode.keys.first(); // copy the key up\r\n        rightNode.keys.removeFirst(); // remove from right\r\n        //\r\n        // move the child reference:\r\n        rightNode.children.first().parent = leftNode; // update parent reference\r\n        leftNode.children.add(rightNode.children.first()); // copy to left\r\n        rightNode.children.removeFirst(); // remove from right\r\n    };\r\n\r\n    // move a key item to the right between leftNode and rightNode index (non-leaf) nodes\r\n    // left node last item -> parent\r\n    // parent item -> right node\r\n    var rotateAmongNodesToRight = function (leftNode, rightNode) {\r\n        // move item from leftNode to rightNode\r\n        //\r\n        var parent = rightNode.parent;\r\n        var rightIndex = calcChildIndex(parent, rightNode);\r\n        //\r\n        // move the key:\r\n        rightNode.keys.insert(0, parent.keys.items[rightIndex - 1]); // copy the key down\r\n        parent.keys.items[rightIndex - 1] = leftNode.keys.last(); // copy the key up\r\n        leftNode.keys.removeLast(); // remove from left\r\n        //\r\n        // move the child reference:\r\n        rightNode.children.insert(0, leftNode.children.last()); // copy to right\r\n        rightNode.children.first().parent = rightNode; // update parent reference\r\n        leftNode.children.removeLast(); // remove from left\r\n    };\r\n\r\n    // move an item to the left between leftLeaf and rightLeaf leaf nodes\r\n    // right leaf first item -> left leaf\r\n    var rotateAmongLeavesToLeft = function (leftLeaf, rightLeaf) {\r\n        // move item from rightLeaf to leftLeaf\r\n        //\r\n        var rightIndex = calcChildIndex(rightLeaf.parent, rightLeaf);\r\n        //\r\n        // copy to left:\r\n        leftLeaf.keys.add(rightLeaf.keys.first());\r\n        leftLeaf.values.add(rightLeaf.values.first());\r\n        //\r\n        // remove from right:\r\n        rightLeaf.keys.removeFirst();\r\n        rightLeaf.values.removeFirst();\r\n        //\r\n        // update parent:\r\n        rightLeaf.parent.keys.items[rightIndex - 1] = rightLeaf.keys.first();\r\n    };\r\n\r\n    // move an item to the right between leftLeaf and rightLeaf leaf nodes\r\n    // left leaf last item -> right leaf\r\n    var rotateAmongLeavesToRight = function (leftLeaf, rightLeaf) {\r\n        // move from leftLeaf to rightLeaf\r\n        //\r\n        var rightIndex = calcChildIndex(rightLeaf.parent, rightLeaf);\r\n        //\r\n        // copy to right:\r\n        rightLeaf.keys.insert(0, leftLeaf.keys.last());\r\n        rightLeaf.values.insert(0, leftLeaf.values.last());\r\n        //\r\n        // remove from left:\r\n        leftLeaf.keys.removeLast();\r\n        leftLeaf.values.removeLast();\r\n        //\r\n        // update parent:\r\n        rightLeaf.parent.keys.items[rightIndex - 1] = rightLeaf.keys.first();\r\n    };\r\n\r\n    // -----------------------------------------\r\n    //             internal searches:\r\n    // -----------------------------------------\r\n\r\n    // short description: returns the \"child\" index in the \"node\"\r\n    // long description: calculates the \"child\" node index in the \"node.children\" array\r\n    // (usually node == child.paren)\r\n    var calcChildIndex = function (node, child) {\r\n        var key = child.keys.first();\r\n        var searchResult = node.keys.search_first(key);\r\n        if (!searchResult.found) {\r\n            if (node.children.items[searchResult.index] != child) throw \"B_PlusTree.calcChildIndex(): 1\";\r\n            return searchResult.index;\r\n        }\r\n        //\r\n        var index = searchResult.index;\r\n        for (; ; ) {\r\n            if (node.children.items[index] == child) return index;\r\n            //\r\n            index++;\r\n            if (index >= node.children.count) break;\r\n            if (node.keys.items[index - 1] != key) break;\r\n        }\r\n        throw \"B_PlusTree.calcChildIndex(): 2\";\r\n    };\r\n\r\n    // returns leaf node containing an item with the given key\r\n    var searchLeaf = function (key) {\r\n        //\r\n        var doSearchLeaf = function (node, key) {\r\n            var searchResult = node.keys.search_first(key);\r\n            //\r\n            if (node.isLeaf) {\r\n                return { node: node, found: searchResult.found, index: searchResult.index };\r\n            }\r\n            //\r\n            if (searchResult.found) {\r\n                // illustration: [left child] key [right child]\r\n                // both children (left and right i.e. before and after the key) can contain the key\r\n                //\r\n                // try the left child first:\r\n                var resultLeft = doSearchLeaf(node.children.items[searchResult.index], key);\r\n                if (resultLeft.found) return resultLeft;\r\n                //\r\n                // try the right child\r\n                return doSearchLeaf(node.children.items[searchResult.index + 1], key);\r\n            } else {\r\n                // the pointed key is greater than the searched key. Only left child can be considered:\r\n                return doSearchLeaf(node.children.items[searchResult.index], key);\r\n            }\r\n        };\r\n        //\r\n        return doSearchLeaf(m_public.root, key);\r\n    };\r\n\r\n    // returns last leaf node containing an item with the given key\r\n    var searchLastLeaf = function (key) {\r\n        //\r\n        var doSearchLastLeaf = function (node, key) {\r\n            var searchResult = node.keys.search_last(key);\r\n            //\r\n            if (node.isLeaf) {\r\n                return { node: node, found: searchResult.found, index: searchResult.index };\r\n            }\r\n            //\r\n            if (searchResult.found) {\r\n                // illustration: [left child] key [right child]\r\n                // both children (left and right i.e. before and after the key) can contain the key\r\n                //\r\n                // try the right child first:\r\n                var resultRight = doSearchLastLeaf(node.children.items[searchResult.index + 1], key);\r\n                if (resultRight.found) return resultRight;\r\n                //\r\n                // try the left child\r\n                return doSearchLastLeaf(node.children.items[searchResult.index], key);\r\n            } else {\r\n                // the pointed key is greater than the searched key. Only left child can be considered:\r\n                return doSearchLastLeaf(node.children.items[searchResult.index], key);\r\n            }\r\n        };\r\n        //\r\n        return doSearchLastLeaf(m_public.root, key);\r\n    };\r\n\r\n    // returns last leaf node containing an item with the given prefix\r\n    var searchLastLeafByPrefix = function (prefix) {\r\n        //\r\n        var doSearchLastLeafByPrefix = function (node, prefix) {\r\n            var searchResult = node.keys.search_last_prefix(prefix);\r\n            //\r\n            if (node.isLeaf) {\r\n                return { node: node, found: searchResult.found, index: searchResult.index };\r\n            }\r\n            //\r\n            if (searchResult.found) {\r\n                // illustration: [left child] key [right child]\r\n                // both children (left and right i.e. before and after the key) can contain the prefix\r\n                //\r\n                // try the right child first:\r\n                var resultRight = doSearchLastLeafByPrefix(node.children.items[searchResult.index + 1], prefix);\r\n                if (resultRight.found) return resultRight;\r\n                //\r\n                // try the left child\r\n                return doSearchLastLeafByPrefix(node.children.items[searchResult.index], prefix);\r\n            } else {\r\n                // the pointed key is greater than the searched prefix. Only left child can be considered:\r\n                return doSearchLastLeafByPrefix(node.children.items[searchResult.index], prefix);\r\n            }\r\n        };\r\n        //\r\n        return doSearchLastLeafByPrefix(m_public.root, prefix);\r\n    };\r\n\r\n    // returns leaf node containing an item with the given key and value\r\n    var searchLeafValue = function (key, value) {\r\n        // search the key:\r\n        var searchResult = searchLeaf(key);\r\n        if (!searchResult.found) return searchResult;\r\n        //\r\n        // search the value (if there are several the same keys):\r\n        var valueFound = false;\r\n        var leaf = searchResult.node;\r\n        var index = searchResult.index;\r\n        for (; ; ) {\r\n            if (index >= leaf.values.count) {\r\n                leaf = leaf.nextLeaf;\r\n                if (leaf == null) break;\r\n                index = 0;\r\n            }\r\n            if (leaf.keys.items[index] != key) break;\r\n            if (leaf.values.items[index] == value) {\r\n                valueFound = true;\r\n                break;\r\n            }\r\n            index++;\r\n        }\r\n        //\r\n        return { node: leaf, found: valueFound, index: index };\r\n    };\r\n\r\n    // returns last leaf node containing an item with the given key and value\r\n    var searchLastLeafValue = function (key, value) {\r\n        // search the key:\r\n        var searchResult = searchLastLeaf(key);\r\n        if (!searchResult.found) return searchResult;\r\n        //\r\n        // search the value (if there are several the same keys):\r\n        var valueFound = false;\r\n        var leaf = searchResult.node;\r\n        var index = searchResult.index;\r\n        //var foundIndex = 0;\r\n        for (; ; ) {\r\n            if (index < 0) {\r\n                leaf = leaf.prevLeaf;\r\n                if (leaf == null) break;\r\n                index = leaf.values.count - 1;\r\n            }\r\n            if (leaf.keys.items[index] != key) break;\r\n            if (leaf.values.items[index] == value) {\r\n                valueFound = true;\r\n                break;\r\n            }\r\n            index--;\r\n        }\r\n        //\r\n        return { node: leaf, found: valueFound, index: index };\r\n    };\r\n\r\n    // -----------------------------------------\r\n    //       return the public interface:\r\n    // -----------------------------------------\r\n\r\n    return m_public;\r\n};\r\n\r\nB_Plus_Tree.FindInfo = FindInfo;\r\n\r\n//return B_Plus_Tree;\r\nmodule.exports = B_Plus_Tree;\r\n\r\n\r\n", "var jsgui = require('lang-mini');\r\n//var Evented_Class = require('./_evented-class');\r\nconst Data_Model = require('../Data_Model');\r\n\r\nvar j = jsgui;\r\nvar Evented_Class = j.Evented_Class;\r\n//var Class = j.Class;\r\nvar each = j.each;\r\nvar is_array = j.is_array;\r\nvar is_dom_node = j.is_dom_node;\r\nvar is_ctrl = j.is_ctrl;\r\nvar extend = j.extend;\r\nvar get_truth_map_from_arr = j.get_truth_map_from_arr;\r\nvar get_map_from_arr = j.get_map_from_arr;\r\nvar arr_like_to_arr = j.arr_like_to_arr;\r\nvar tof = j.tof;\r\nvar is_defined = j.is_defined;\r\nvar stringify = j.stringify;\r\nvar functional_polymorphism = j.functional_polymorphism;\r\nvar fp = j.fp;\r\nvar arrayify = j.arrayify;\r\nvar mapify = j.mapify;\r\nvar are_equal = j.are_equal;\r\nvar get_item_sig = j.get_item_sig;\r\nvar set_vals = j.set_vals;\r\nvar truth = j.truth;\r\nvar trim_sig_brackets = j.trim_sig_brackets;\r\nvar ll_set = j.ll_set;\r\nvar ll_get = j.ll_get;\r\nvar input_processors = j.input_processors;\r\nvar iterate_ancestor_classes = j.iterate_ancestor_classes;\r\nvar is_arr_of_arrs = j.is_arr_of_arrs;\r\nvar is_arr_of_strs = j.is_arr_of_strs;\r\nvar is_arr_of_t = j.is_arr_of_t;\r\nvar clone = jsgui.clone;\r\n\r\nvar input_processors = jsgui.input_processors;\r\n\r\n// What type is the value?\r\n\r\n// Data_Model items maybe are best existing within a context.\r\n//   Not sure that's a necessary restriction / requirement.\r\n\r\n\r\n\r\n\r\n\r\nclass Data_Value extends Data_Model {\r\n\r\n\r\n    constructor(spec = {}) {\r\n        super(spec);\r\n        this.__data_value = true;\r\n        //console.log('old (1.1) Data_Value constructor');\r\n\r\n        if (spec.context) {\r\n            this.context = spec.context;\r\n        }\r\n        if (is_defined(spec.value)) {\r\n            this._ = spec.value;\r\n        }\r\n        // Maybe don't use __type.\r\n        //   instanceOf, maybe typeOf ....\r\n        this.__type = 'data_value';\r\n        //this._bound_events = {};\r\n\r\n        // Not so sure about _relationships.\r\n        //   Maybe it will be of use.\r\n\r\n        this._relationships = {};\r\n    }\r\n    // Get but with a format change?\r\n    //   Get and validate???\r\n\r\n    'get'() {\r\n        //return this._val;\r\n        return this._;\r\n    }\r\n\r\n    // get value and set value.\r\n\r\n    'value'() {\r\n        return this._;\r\n    }\r\n\r\n\r\n    'toObject'() {\r\n        return this._;\r\n\r\n    }\r\n\r\n    // .value =\r\n    //   Though .set could have more input, eg a format shifter????\r\n\r\n    'set'(val) {\r\n        //this._val = val;\r\n\r\n        // This may also need to make use of input_processors\r\n\r\n        var input_processor = input_processors[this.__type_name];\r\n\r\n\r\n        if (input_processor) {\r\n            val = input_processor(val);\r\n        }\r\n        var old_val = this._;\r\n        //console.log('old_val', old_val);\r\n        this._ = val;\r\n        //console.log('val', val);\r\n        this.raise('change', {\r\n            'old': old_val,\r\n            'value': val\r\n        });\r\n        return val;\r\n    }\r\n\r\n\r\n    'toString'() {\r\n        //return stringify(this.get());\r\n        // con\r\n        //console.log('this._val ' + stringify(this._val));\r\n        //throw 'stop';\r\n        return this.get();\r\n    }\r\n    // Maybe a particular stringify function?\r\n    'toJSON'() {\r\n        var val = this.get();\r\n        //var tval = tof(val);\r\n        var tval = typeof val;\r\n        if (tval == 'string') {\r\n            return '\"' + val + '\"';\r\n        } else {\r\n            return val;\r\n        }\r\n    }\r\n\r\n    // Need to copy / clone the ._ value\r\n\r\n    'clone'() {\r\n        var res = new Data_Value({\r\n            'value': this._\r\n        });\r\n        return res;\r\n    }\r\n\r\n    // This is important to the running of jsgui3.\r\n\r\n    '_id'() {\r\n        if (this.__id) return this.__id;\r\n        if (this.context) {\r\n            //console.log('this.__type ' + this.__type);\r\n            //throw 'stop';\r\n            this.__id = this.context.new_id(this.__type_name || this.__type);\r\n        } else {\r\n            if (!is_defined(this.__id)) {\r\n                throw 'DataValue should have context';\r\n                this.__id = new_data_value_id();\r\n            }\r\n        }\r\n        return this.__id;\r\n    }\r\n\r\n\r\n    'parent'() {\r\n        var a = arguments; a.l = arguments.length; var sig = get_a_sig(a, 1);\r\n\r\n        // .sibling_index instead. Clearer, matched HTML terminology in places.\r\n\r\n        var obj, index;\r\n        //console.log('parent sig', sig);\r\n        if (a.l == 0) {\r\n            return this._parent;\r\n        } else if (a.l == 1) {\r\n            obj = a[0];\r\n\r\n            if (!this.context && obj.context) {\r\n                this.context = obj.context;\r\n            }\r\n\r\n            var relate_by_id = function (that) {\r\n                var obj_id = obj._id();\r\n                that._relationships[obj_id] = true;\r\n            }\r\n\r\n            var relate_by_ref = function (that) {\r\n                that._parent = obj;\r\n            }\r\n            relate_by_ref(this);\r\n        } else if (a.l == 2) {\r\n            obj = a[0];\r\n            index = a[1];\r\n\r\n            if (!this.context && obj.context) {\r\n                this.context = obj.context;\r\n            }\r\n\r\n            this._parent = obj;\r\n            this._index = index;\r\n        }\r\n\r\n        /*\r\n\r\n        if (is_defined(index)) {\r\n            // I think we just set the __index property.\r\n            //  I think a __parent property and a __index property would do the job here.\r\n            //  Suits DOM heirachy.\r\n            // A __relationships property could make sense for wider things, however, it would be easy (for the moment?)\r\n            // to just have .__parent and .__index\r\n            //\r\n\r\n            // Not sure all Data_Objects will need contexts.\r\n            //  It's mainly useful for Controls so far\r\n        } else {\r\n            // get the object's id...\r\n\r\n            // setting the parent... the parent may have a context.\r\n        }\r\n\r\n        */\r\n    }\r\n};\r\n\r\nmodule.exports = Data_Value;\r\n", "\r\n\r\nclass Mini_Context {\r\n    // Need quite a simple mechanism to get IDs for objects.\r\n    // They will be typed objects/\r\n    constructor(spec) {\r\n        var map_typed_counts = {};\r\n        var typed_id = function (str_type) {\r\n            throw 'stop Mini_Context typed id';\r\n            var res;\r\n            if (!map_typed_counts[str_type]) {\r\n                res = str_type + '_0';\r\n                map_typed_counts[str_type] = 1;\r\n            } else {\r\n                res = str_type + '_' + map_typed_counts[str_type];\r\n                map_typed_counts[str_type]++;\r\n            }\r\n            return res;\r\n        };\r\n        this.new_id = typed_id;\r\n        //new_id\r\n    }\r\n    'make'(abstract_object) {\r\n        if (abstract_object._abstract) {\r\n            //var res = new\r\n            // we need the constructor function.\r\n            var constructor = abstract_object.constructor;\r\n            //console.log('constructor ' + constructor);\r\n            //throw 'stop';\r\n            var aos = abstract_object._spec;\r\n            // could use 'delete?'\r\n            aos.abstract = null;\r\n            //aos._abstract = null;\r\n            aos.context = this;\r\n            var res = new constructor(aos);\r\n            return res;\r\n        } else {\r\n            throw 'Object must be abstract, having ._abstract == true';\r\n        }\r\n    }\r\n}\r\nmodule.exports = Mini_Context;", "var jsgui = require('lang-mini');\r\n\r\n\r\n// 2022 - Looks like it could be modified into being Model, or part of one.\r\n// 2023 - In the process of doing this.\r\n\r\n\r\n//var Evented_Class = require('./_evented-class');\r\n//var Data_Structures = require('./jsgui-data-structures');\r\nvar Data_Value = require('./Data_Value');\r\n//var Constraint = require('./constraint');\r\n//var Fields_Collection = require('./fields-collection');\r\n//var Collection = require('jsgui2-collection');\r\nvar j = jsgui;\r\nvar Evented_Class = j.Evented_Class;\r\nvar Class = j.Class;\r\nvar each = j.each;\r\nvar is_array = j.is_array;\r\nvar is_dom_node = j.is_dom_node;\r\nvar is_ctrl = j.is_ctrl;\r\nvar extend = j.extend;\r\nvar get_truth_map_from_arr = j.get_truth_map_from_arr;\r\nvar get_map_from_arr = j.get_map_from_arr;\r\nvar arr_like_to_arr = j.arr_like_to_arr;\r\nvar tof = j.tof;\r\nvar is_defined = j.is_defined;\r\nvar stringify = j.stringify;\r\nvar functional_polymorphism = j.functional_polymorphism;\r\nvar fp = j.fp;\r\nvar arrayify = j.arrayify;\r\nvar mapify = j.mapify;\r\nvar are_equal = j.are_equal;\r\nvar get_item_sig = j.get_item_sig;\r\nvar get_a_sig = j.get_a_sig;\r\nvar set_vals = j.set_vals;\r\nvar truth = j.truth;\r\nvar trim_sig_brackets = j.trim_sig_brackets;\r\nvar ll_set = j.ll_set;\r\nvar ll_get = j.ll_get;\r\nvar input_processors = j.input_processors;\r\nvar iterate_ancestor_classes = j.iterate_ancestor_classes;\r\nvar is_arr_of_arrs = j.is_arr_of_arrs;\r\nvar is_arr_of_strs = j.is_arr_of_strs;\r\nvar is_arr_of_t = j.is_arr_of_t;\r\nvar clone = jsgui.clone;\r\nvar data_value_index = 0;\r\n//var data_value_abbreviation = 'val';\r\n\r\n// do data objects get an ID when they are initialized.\r\njsgui.__data_id_method = 'init';\r\n\r\n\r\n// Seems worthwhile to get rid of constraint matching and fields.\r\n//  Constraint matching will be added back in using a more functional system.\r\n//  Indexing should be put down to a simple process that calls some simple functions.\r\n//   It has got way too complicated so far. We need to map between an object (reading specific properties) and an array value.\r\n//    The lists of keys for these items will be stored within a sorted structure.\r\n\r\n// Data_Object and Data_Value both being Data_Item????\r\n// Or Data_Model ????\r\n\r\n// Or within a 'Model' category.\r\n//   This is working now as the 'M' within 'MVC' or 'CMVM'\r\n\r\n// data-model directory overall???\r\n// data_model_base perhaps????\r\n\r\n// or just start at data_model Data_Model for now.\r\n\r\n\r\n\r\n// Get fields key from object.\r\n//  Worth keeping consistent and formatted notes about what the fields key is.\r\n//  Possibly will still use some object oriented structures. Complex OO structures are easier to understand than bunches of variables.\r\n\r\n// However, an improved function that calculates field keys from objects makes sense.\r\n//  May not be impossible to fix things from this codebase.\r\n\r\n// Just not sure about the indexing right now.\r\n\r\n\r\n// This seems a little bit like 'Model'.\r\n\r\n\r\n\r\n\r\n\r\n//var obj_matches_constraint = Constraint.obj_matches_constraint;\r\n//var native_constructor_tof = jsgui.native_constructor_tof;\r\n\r\n//var value_as_field_constraint = Constraint.value_as_field_constraint;\r\n\r\n//var Ordered_String_List = Data_Structures.Ordered_String_List;\r\n\r\nconst Mini_Context = require('../Mini_Context');\r\nconst Data_Model = require('../Data_Model');\r\n\r\nvar is_js_native = function (obj) {\r\n    var t = tof(obj);\r\n\r\n    // other types????\r\n    return t == 'number' || t == 'string' || t == 'boolean' || t == 'array';\r\n};\r\n\r\n// Seems as though fields are not important to how these work effectively (fields being in obext / oext)\r\n\r\nclass Data_Object extends Data_Model {\r\n    constructor(spec = {}, fields) {\r\n        //console.log('1* spec.__type_name', spec.__type_name);\r\n        super(spec);\r\n        if (spec.id) {\r\n\t\t\tthis.__id = spec.id;\r\n\t\t}\r\n\t\tif (spec.__id) {\r\n\t\t\tthis.__id = spec.__id;\r\n\t\t}\r\n        this.__type_name = spec.__type_name || 'data_object';\r\n\r\n        // Will be better to use obext for fields.\r\n\r\n        // Does seem worth not using this any longer....\r\n        //   Replace with something more powerful?\r\n\r\n        // Moving obext field to lang-mini could help....\r\n        //   Copying it there, for the moment.\r\n        //     Could even modify obext so it passes through fields from lang-mini.\r\n\r\n\r\n\r\n        if (fields) this.set_fields_from_spec(fields, spec);\r\n\r\n        // Should incorporate data types within fields.\r\n        //   Maybe grammer too....?\r\n\r\n        this.__data_object = true;\r\n\r\n        // Do need to still be concious of performance here.\r\n        //   This is currently working as a basis for jsgui controls, which do work efficiently at the moment.\r\n        //     Will need to be careful about changing the API.\r\n        //     Could even write code at a higher level that would check which API is being used and use that....\r\n        // Late 2023 - Seems as though there is a chance to make breaking changes here and fix them.\r\n        //   So long as it makes the overall concepts clearer, and aids in more concise code.\r\n\r\n        // don't want the .value() function, use getters and setters, or maybe the obext field.\r\n\r\n        // Data_Value could have a 'name' or 'key_name' or 'key' property.\r\n        //   Could use 'key' and 'name' interchangably.\r\n        //   data_value.value ????    seems like it would be needed on some levels.\r\n        //     maybe .toObject, toNumber, toString, toArray, toJSON, toInteger, toHashString????\r\n\r\n        // \r\n\r\n        // .to(type)\r\n\r\n\r\n\r\n\r\n        //   \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        //if (!spec) spec = {};\r\n        // if it's abstract call the abstract_init.\r\n\r\n        //console.log('1** spec', spec);\r\n\r\n        // Possibly will not need to handle abstract Data_Objects.\r\n        //   It was done as an alternative to not using new with the old-style constructors, which was allowed, and could\r\n        //     be detected.\r\n\r\n        // Not sure about removing this.\r\n\r\n        //   Easier of definition of fields.\r\n        //     Fields as provided by obext. See about further support for that.\r\n        //     See about those fields supporting Grammar or other type capabilities from lang-mini.\r\n\r\n        // See about a little bit more code to get lang-mini enforcing (or providing enforcement functions to support) specific types,\r\n        //   incl ranges within types, number of DP (auto-rounding).\r\n\r\n        // \r\n\r\n\r\n\r\n\r\n        if (spec.abstract === true) {\r\n            this._abstract = true;\r\n            var tSpec = tof(spec);\r\n\r\n            if (tSpec == 'function') {\r\n                this._type_constructor = spec;\r\n                // could possibly\r\n                // but maybe want to keep this json-friendly.\r\n\r\n                // the type constructor could be used in a collection.\r\n                //  could be more leightweight than other things? specific constraint objects.\r\n            } else if (tSpec == 'object') {\r\n                this._spec = spec;\r\n                // could possibly\r\n                // but maybe want to keep this json-friendly.\r\n\r\n                // the type constructor could be used in a collection.\r\n                //  could be more leightweight than other things? specific constraint objects.\r\n            }\r\n\r\n        } else {\r\n            //var that = this;\r\n            //this._initializing = true;\r\n\r\n            var t_spec = tof(spec);\r\n            //console.log('t_spec', t_spec);\r\n\r\n            if (!this.__type) {\r\n                this.__type = 'data_object';\r\n            }\r\n\r\n            // 18/12/2016 getting rid of ._\r\n\r\n            //if (!this.hasOwnProperty('_')) {\r\n            //    this._ = {};\r\n            //}\r\n\r\n            //console.log('t_spec', t_spec);\r\n\r\n            // Maybe could check for actual controls better.\r\n            if (t_spec === 'object' || t_spec === 'control') {\r\n                // Normal initialization\r\n\r\n                if (spec.context) {\r\n                    //console.log('spec has context');\r\n                    this.context = spec.context;\r\n                }\r\n                if (spec.id) {\r\n                    this.__id = spec.id;\r\n                }\r\n                if (spec._id) {\r\n                    this.__id = spec._id;\r\n                }\r\n                if (spec.__id) {\r\n                    this.__id = spec.__id;\r\n                }\r\n                //console.log('this.__id', this.__id);\r\n                // want to see if we are using any of the spec items as fields.\r\n            } else if (t_spec == 'data_object') {\r\n                // Initialization by Data_Object value (for the moment)\r\n                // Not so sure about copying the id of another object.\r\n                if (spec.context) this.context = spec.context;\r\n                // then copy the values over from spec\r\n                \r\n                /*.\r\n                //var spec_keys = spec.keys();\r\n                //console.log('spec_keys', spec_keys);\r\n                each(spec_keys, function (i, key) {\r\n                    //that.set(key, spec.get(key));\r\n                    that.set(key, spec.get(key));\r\n                });\r\n                */\r\n            }\r\n\r\n            /*\r\n            if (!is_defined(this.__id) && jsgui.__data_id_method == 'init') {\r\n                if (this.context) {\r\n                    //console.log('this.context ' + this.context);\r\n                    //console.log('sfy this.context ' + stringify(this.context));\r\n\r\n                    // Don't need an ID here.\r\n                    //  I think.\r\n\r\n                    //console.log('getting new id');\r\n                    //this.__id = this.context.new_id(this.__type_name || this.__type);\r\n                    //console.trace();\r\n                    //console.log('DataObject new ID from context: ' + this.__id);\r\n                    //this.context.map_objects[this.__id] = this;\r\n                    // Not keeping a map of objects by id in the context.\r\n                } else {\r\n\r\n                }\r\n            }\r\n            */\r\n\r\n            if (is_defined(spec.parent)) {\r\n                //this.set('parent', spec.parent);\r\n                this.parent = spec.parent;\r\n            }\r\n\r\n            if (this.context) {\r\n                this.init_default_events();\r\n            }\r\n\r\n            //this._initializing = false;\r\n        }\r\n        //console.log('end Data_Object init');\r\n    }\r\n\r\n\r\n\r\n    'set_fields_from_spec'(fields, spec) {\r\n        // obext fields don't work like this.\r\n        //   Should do more to support obext fields, powerful functionality that raises change events.\r\n\r\n        // .field.on('change') ???\r\n\r\n        // So model.background.color would be a field (somehow???)\r\n        //   Make some advances on this level, and then integrate it into an app.\r\n\r\n\r\n\r\n\r\n\r\n\r\n        //let that = this;\r\n        each(fields, field => {\r\n            if (typeof spec[field[0]] !== 'undefined') {\r\n                this[field[0]] = spec[field[0]];\r\n            } else {\r\n                this[field[0]] = field[2];\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    'init_default_events'() {\r\n        // May still / again make use of this with some controls.\r\n\r\n    }\r\n\r\n    /*\r\n     'data_def': fp(function(a, sig) {\r\n     if (sig == '[o]') {\r\n     // create the new data_def constraint.\r\n\r\n\r\n     }\r\n     }),\r\n     */\r\n\r\n    'keys'() {\r\n        return Object.keys(this._);\r\n    }\r\n\r\n    'toJSON'() {\r\n        var res = [];\r\n        res.push('Data_Object(' + JSON.stringify(this._) + ')');\r\n        return res.join('');\r\n    }\r\n\r\n    // using_fields_connection()\r\n    //  will search up the object heirachy, to see if the Data_Objects fields need to be connected through the use of functions.\r\n    //  that will make the fields easy to change by calling a function. Should make things much faster to access than when programming with Backbone.\r\n    // then will connect the fields with connect_fields()\r\n\r\n\r\n    /*\r\n    'using_fields_connection'() {\r\n        var res = false;\r\n        iterate_ancestor_classes(this.constructor, function (a_class, stop) {\r\n            if (is_defined(a_class._connect_fields)) {\r\n                res = a_class._connect_fields;\r\n                stop();\r\n            }\r\n        });\r\n        return res;\r\n    }\r\n    */\r\n\r\n\r\n    get parent() {\r\n        return this._parent;\r\n    }\r\n    set parent(value) {\r\n        return this._parent = value;\r\n    }\r\n\r\n    '_id'() {\r\n        // gets the id.\r\n        //console.log('Data_Object _id this.context ' + this.context);\r\n\r\n        // Should get the context at an early stage if possible.\r\n        //  Need to have it as the item is added, I think.\r\n        if (this.__id) return this.__id;\r\n        //if (!this.context) {\r\n        //    if (this.parent.context) \r\n        //}\r\n\r\n        if (this.context) {\r\n            this.__id = this.context.new_id(this.__type_name || this.__type);\r\n        } else {\r\n            if (this._abstract) {\r\n                return undefined;\r\n            } else if (!is_defined(this.__id)) {\r\n\r\n                // try the context of the parent.\r\n\r\n                // What does not have the abstract?\r\n\r\n                //var stack = new Error().stack;\r\n                //console.log(stack);\r\n\r\n                // no such function... but there should be something declared in many situations.\r\n                //console.trace();\r\n                //throw 'stop, currently unsupported.';\r\n                //this.__id = new_data_object_id();\r\n\r\n                //console.log('!!! no context __id ' + this.__id);\r\n                return undefined;\r\n            }\r\n        }\r\n        return this.__id;\r\n    }\r\n\r\n    // Problems with name (fields).\r\n    //  Fields are given as a description of the fields.\r\n    //   Gets more complicated when we have a function to access the fields as well.\r\n    //   What if we want to override that function?\r\n\r\n    // Will call it field\r\n    //  18/12/2016 - Getting rid of this confusion, will mostly remove / greatly simplify field functionality.\r\n    //  Just need to know which fields any class has, keeping track of this will use some data structures like Sorted_KVS,\r\n    //   but not much complex code within this part.\r\n\r\n    // Not so sure what a field function will do right now.\r\n    //  Does not seem like such an essential part of the API.\r\n    //   Can just define the fields, then they act a bit differently.\r\n    //   Have field handling in Data_Object.\r\n    //   Collection would have the same field capabilities. Fields should not be so important anyway.\r\n\r\n\r\n\r\n    // 18/12/2016 Will remove constraints, then make them much more functional.\r\n    \r\n\r\n    'each'(callback) {\r\n        each(this._, callback);\r\n    }\r\n\r\n\r\n    // could make this polymorphic so that it\r\n    'position_within'(parent) {\r\n        var p_id = parent._id();\r\n        //console.log('p_id ' + p_id);\r\n        //console.log('this._parents ' + stringify(this._parents));\r\n\r\n        if (this._parents && is_defined(this._parents[p_id])) {\r\n            var parent_rel_info = this._parents[p_id];\r\n            //console.log('parent_rel_info ' + stringify(parent_rel_info));\r\n\r\n            //var parents = this._parents;\r\n            //if (parents) {\r\n            //\r\n            //}\r\n            var pos_within = parent_rel_info[1];\r\n\r\n            // It is indexed by position in parent through the parent.\r\n\r\n            return pos_within;\r\n        }\r\n    }\r\n\r\n    // Maybe just 'remove' function.\r\n    //  This may be needed with multiple parents, which are not being used at the moment.\r\n\r\n    'remove_from'(parent) {\r\n        var p_id = parent._id();\r\n\r\n        if (this._parents && is_defined(this._parents[p_id])) {\r\n\r\n            var parent = this._parents[p_id][0];\r\n            var pos_within = this._parents[p_id][1];\r\n\r\n            // is the position within accurate?\r\n            var item = parent._arr[pos_within];\r\n            //console.log('item ' + stringify(item));\r\n\r\n\r\n            //console.log('');\r\n            //console.log('pos_within ' + pos_within);\r\n            // Then remove the item in the collection (or Data_Object?) ....\r\n            // and the actual parent?\r\n\r\n            // can get control / dataobject / collection by its ID of course.\r\n            parent.remove(pos_within);\r\n            // Remove it by index.\r\n            delete this._parents[p_id];\r\n        }\r\n    }\r\n\r\n    //  \r\n    // Maybe only do this with the fields anyway\r\n\r\n    'load_from_spec'(spec, arr_item_names) {\r\n        //var that = this;\r\n        each(arr_item_names, (v) => {\r\n            var spec_item = spec[v];\r\n            if (is_defined(spec_item)) {\r\n                this.set(v, spec_item);\r\n            }\r\n        });\r\n    }\r\n\r\n    // They will be treated as values in many cases anyway.\r\n    //  Will turn them to different types of object where possible.\r\n\r\n    /*\r\n    'value'() {\r\n        var a = arguments; a.l = arguments.length; var sig = get_a_sig(a, 1);\r\n        // could operate like both get and set, but does not return data_objects, returns the value itself.\r\n        var name;\r\n        //var res;\r\n        if (sig === '[s]') {\r\n            name = a[0];\r\n            var possibly_dobj = this.get(name);\r\n            //var t_obj = tof(possibly_dobj);\r\n\r\n            if (possibly_dobj) {\r\n                if (possibly_dobj.value && typeof possibly_dobj.value === 'function') {\r\n                    return possibly_dobj.value();\r\n                } else {\r\n                    return possibly_dobj;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    */\r\n\r\n    // Get could be greatly simplified as well.\r\n    //  Input and output processing will be more streamlined in a functional way.\r\n\r\n    // 19/12/2016 - Not using get or set nearly as much anyway.\r\n\r\n\r\n    'get'() {\r\n        var a = arguments;\r\n        a.l = arguments.length;\r\n        var sig = get_a_sig(a, 1);\r\n        var do_typed_processing = false;\r\n\r\n        // Not sure about this 'typed processing'.\r\n        //  if (is_defined(this.__type_name) && this.__type_name !== 'data_object') do_typed_processing = true;\r\n\r\n        if (do_typed_processing) {\r\n            // should possibly have this assigned for controls...\r\n            //var raw_input = a;\r\n            //console.log('this.__type_name is defined: ' + this.__type_name);\r\n            //var parsed_input_obj = jsgui.input_processors[this.__type_name](raw_input);\r\n            if (a.l === 0) {\r\n                var output_obj = jsgui.output_processors[this.__type_name](this._);\r\n                return output_obj;\r\n            } else {\r\n                console.log('a', a);\r\n                console.trace();\r\n                throw 'not yet implemented';\r\n            }\r\n        } else {\r\n\r\n            // Fields will be done more simply, look up the field by name from the fields skvs.\r\n            //  Can directly use a Sorted_KVS rather than a Collection with indexing to get somet hings like\r\n            //   collection indexing done.\r\n\r\n            // Less signature checking. Make it monomorphic where possible.\r\n            //  Just get the object whether or not is is considered a field.\r\n            //   For the moment, don't look for data or anything in the ._ object.\r\n            //   Getting rid of the ._ object for the moment.\r\n            //    Could have a .private() or .p() function internally.\r\n            //    For the moment, don't have any private fields.\r\n            //  The _ object would be easily proxyable.\r\n            //   a private() object could be proxyable too.\r\n\r\n            // Get and set less important now anyway.\r\n            //  Still useful in some cases probably.\r\n\r\n\r\n\r\n            //var field_info, field_name, field_type_name;\r\n\r\n            if (sig == '[s,f]') {\r\n\r\n                // Not yet????\r\n                //   Or use promises rather than support callbacks here?\r\n                //   Or support callbacks on promises and obs?\r\n\r\n                throw 'Asyncronous access not allowed on Data_Object get.';\r\n                var res = this.get(a[0]);\r\n                var callback = a[1];\r\n                if (typeof res == 'function') {\r\n                    res(callback);\r\n                } else {\r\n                    return res;\r\n                }\r\n                // could check if we had a function returned.\r\n                //  then we execute that function\r\n                //callback(null, res);\r\n            } else if (sig == '[s]') {\r\n                var res = ll_get(this, a[0]);\r\n                return res;\r\n            } else if (a.l === 0) {\r\n                // need to get the values of all fields.\r\n                //  Think they are now being held in the field collection, fc.\r\n                return this._;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Or don't use / support get and set for the moment?\r\n    //   Only use property / field access?\r\n    //   Define property, with getter and setter, seems like a more cleanly defined system.\r\n\r\n    // May see about making a new simplified implementation of this and running it through tests.\r\n    //   Though the new Data_Value seems like the more appropriate way for the moment.\r\n\r\n    // May look into seeing where Data_Value is used in the current system too.\r\n    //   Could see about further incorportating its use (in places).\r\n\r\n\r\n\r\n\r\n\r\n    //'set': fp(function(a, sig) {\r\n    'set'() {\r\n\r\n        // Using ll_set or something recursive would be good.\r\n        //  Again, set function is much less important now that ES6 setters have arrived.\r\n\r\n        // Want a simple API here. No or very little changing of data.\r\n\r\n\r\n        // Make (more) monomorphic\r\n        //  Can greatly simplify this too.\r\n\r\n        var a = arguments;\r\n        a.l = arguments.length;\r\n        var sig = get_a_sig(a, 1);\r\n\r\n        if (this._abstract) return false;\r\n\r\n        var that = this,\r\n            res;\r\n\r\n        var input_processors = jsgui.input_processors;\r\n        //if (this._module_jsgui) {\r\n        //    input_processors = this._module_jsgui.input_processors;\r\n        //} else {\r\n        //    input_processors = this._get_input_processors();\r\n        //}\r\n\r\n        if (a.l == 2 || a.l == 3) {\r\n            var property_name = a[0],\r\n                value = a[1];\r\n            var ta2 = tof(a[2]);\r\n            //console.log('ta2', ta2);\r\n            var silent = false;\r\n            var source;\r\n            if (ta2 == 'string' || ta2 == 'boolean') {\r\n                silent = a[2];\r\n            }\r\n            if (ta2 == 'control') {\r\n                source = a[2];\r\n            }\r\n            if (!this._initializing && this._map_read_only && this._map_read_only[property_name]) {\r\n                throw 'Property \"' + property_name + '\" is read-only.';\r\n            } else {\r\n                var split_pn = property_name.split('.');\r\n\r\n                if (split_pn.length > 1 && property_name != '.') {\r\n                    //console.log('split_pn ' + stringify(split_pn));\r\n                    var spn_first = split_pn[0];\r\n                    var spn_arr_next = split_pn.slice(1);\r\n                    var data_object_next = this.get(spn_first);\r\n                    //console.log('data_object_next', data_object_next);\r\n                    if (data_object_next) {\r\n                        res = data_object_next.set(spn_arr_next.join('.'), value);\r\n                        if (!silent) {\r\n                            var e_change = {\r\n                                'name': property_name,\r\n                                'value': value,\r\n                                'bubbled': true\r\n                            };\r\n                            if (source) {\r\n                                e_change.source = source;\r\n                            }\r\n                            this.raise_event('change', e_change);\r\n                        }\r\n                    } else {\r\n                        throw ('No data object at this level.');\r\n                    }\r\n                } else {\r\n                    var data_object_next = this.get(property_name);\r\n                    //console.log('data_object_next', data_object_next);\r\n                    if (data_object_next) {\r\n                        //console.log('property_name', property_name);\r\n                        //var field = this.field(property_name);\r\n                        var field = this[property_name];\r\n                        //console.log('field', field);\r\n                        if (field) {\r\n\r\n                            data_object_next.__type_name = field[1] || data_object_next.__type_name;\r\n                        }\r\n                        //console.log('property_name', property_name);\r\n                        //console.log('value', value);\r\n                        data_object_next.set(value);\r\n                        //console.log('3) data_object_next', data_object_next);\r\n                    }\r\n                    if (!is_defined(data_object_next)) {\r\n                        var tv = typeof value;\r\n                        var dv;\r\n                        //console.log('property_name', property_name);\r\n                        //console.log('tv ' + tv);\r\n                        // And for an array?\r\n                        if (tv === 'string' || tv === 'number' || tv === 'boolean' || tv === 'date') {\r\n                            dv = new Data_Value({\r\n                                'value': value\r\n                            });\r\n                        } else {\r\n                            // And could make an array into a collection.\r\n                            //  That seems like the most logical internal way of doing things.\r\n                            //  An option to have them as arrays would make sense for performance (or typed arrays),\r\n                            //   but a Collection makes the most sense logically.\r\n\r\n                            if (tv === 'array') {\r\n                                dv = new Data_Value({\r\n                                    'value': value\r\n                                });\r\n                            } else {\r\n                                if (tv === 'object') {\r\n                                    if (value.__data_object || value.__data_value || value.__data_grid) {\r\n                                        dv = value;\r\n                                    } else {\r\n                                        dv = new Data_Value({\r\n                                            'value': value\r\n                                        });\r\n                                    }\r\n                                } else {\r\n                                    //console.log('tv', tv);\r\n                                    dv = value;\r\n                                }\r\n                                //dv = value;\r\n                            }\r\n                        }\r\n                        //this._[property_name] = dv;\r\n                        this[property_name] = dv;\r\n\r\n                        if (!silent) {\r\n                            e_change = {\r\n                                'name': property_name,\r\n                                'value': dv\r\n                            };\r\n                            if (source) {\r\n                                e_change.source = source;\r\n                            }\r\n                            this.raise_event('change', e_change);\r\n                        }\r\n                        return value;\r\n                    } else {\r\n                        var next_is_js_native = is_js_native(data_object_next);\r\n                        if (next_is_js_native) {\r\n                            //console.log('is_js_native');\r\n                            //this.set\r\n                            // but maybe that object should be wrapped in Data_Object?\r\n                            //this._[property_name] = value;\r\n                            this[property_name] = value;\r\n                            res = value;\r\n                        } else {\r\n                            //console.log('not is_js_native');\r\n                            //var res = data_object_next.set(value);\r\n                            res = data_object_next;\r\n                            //this._[property_name] = data_object_next;\r\n                            this[property_name] = data_object_next;\r\n                        }\r\n\r\n\r\n                        if (!silent) {\r\n                            var e_change = {\r\n                                'name': property_name,\r\n                                'value': data_object_next.value()\r\n                            };\r\n                            if (source) {\r\n                                e_change.source = source;\r\n                            }\r\n                            this.trigger('change', e_change);\r\n                        }\r\n                        // want to listen to the set event for some things such as GUI components in particular.\r\n\r\n                        return res;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            // But maybe it should be a data_value, not a data_object.\r\n            //console.log('3) else sig ' + sig);\r\n            var value = a[0];\r\n            var property_name = a[1];\r\n            var input_processor = input_processors[this.__type_name];\r\n\r\n            if (input_processor) {\r\n\r\n                // Act differently if it has a field as well?\r\n\r\n                var processed_input = input_processor(value);\r\n                //console.log('processed_input', processed_input);\r\n                value = processed_input;\r\n                this._[property_name] = value;\r\n\r\n                this.raise_event('change', {\r\n                    'value': value\r\n                });\r\n                return value;\r\n\r\n\r\n            } else {\r\n                // Need to be on the lookout for that.\r\n\r\n\r\n                // And for a Data_Object?\r\n                //  Basically put it into place.\r\n\r\n                if (sig === '[D]') {\r\n                    //console.log('property_name ' + property_name);\r\n                    this._[property_name] = value;\r\n                    // Or just have 3 parameters?\r\n                    this.raise_event('change', [property_name, value]);\r\n\r\n                    // Raise a change event?\r\n                    //  Or is set event OK?\r\n                    return value;\r\n                } else if (sig === '[o]') {\r\n                    //console.log('setting with a provided object');\r\n\r\n                    //var that = this;\r\n                    // may need to be recursive.\r\n                    res = {};\r\n                    each(a[0], function (v, i) {\r\n                        //console.log('i ' + i);\r\n                        //console.log('v ' + stringify(v));\r\n\r\n                        res[i] = that.set(i, v);\r\n                        //that.raise_event('change', [i, v]);\r\n\r\n                    });\r\n                    return res;\r\n                }\r\n\r\n                // C for collection?\r\n                if (sig === '[c]') {\r\n                    //this._[]\r\n                    this._[property_name] = value;\r\n                    this.raise_event('change', [property_name, value]);\r\n                    //throw 'unsupported';\r\n                    return value;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    'has'(property_name) {\r\n        return is_defined(this.get(property_name));\r\n    }\r\n}\r\n\r\n// Can be done just with a getter, no setter.\r\n\r\njsgui.map_classes = jsgui.map_classes || {};\r\n\r\n// seems like an overlap with the new jsgui.fromObject function.\r\n//  That will initially go in the Enhanced_Data_Object module, or jsgui-enh\r\n\r\nvar dobj = (obj, data_def) => {\r\n    // could take a data_def?\r\n    // Could use the enhanced data object if we patch backwards?\r\n    //  So Enhanced_Data_Object could hopefully patch backwards in the code?\r\n\r\n    //var tdd = tof(data_def);\r\n\r\n    var cstr = Data_Object;\r\n    //if (Enhanced_Data_Object) cstr = Enhanced_Data_Object;\r\n    //console.log('Enhanced_Data_Object ' + Enhanced_Data_Object);\r\n\r\n    var res;\r\n    if (data_def) {\r\n        res = new cstr({\r\n            'data_def': data_def\r\n        });\r\n    } else {\r\n        res = new cstr({});\r\n    }\r\n\r\n    var tobj = tof(obj);\r\n\r\n    //console.log('obj ' + stringify(obj));\r\n    if (tobj == 'object') {\r\n        var res_set = res.set;\r\n        each(obj, (v, i) => {\r\n            //res.set(i, v);\r\n            res_set.call(res, i, v);\r\n        });\r\n    }\r\n\r\n    return res;\r\n};\r\n\r\n\r\nData_Object.dobj = dobj;\r\nData_Object.Mini_Context = Mini_Context;\r\nmodule.exports = Data_Object;", "/**\r\n * Created by James on 25/09/2016.\r\n */\r\n\r\nvar jsgui = require('lang-mini');\r\nvar mapify = jsgui.mapify;\r\nvar B_Plus_Tree = require('./b-plus-tree/b-plus-tree');\r\n\r\nclass Sorted_KVS {\r\n\tconstructor(spec) {\r\n\t\tspec = spec || {};\r\n\t\t// both a dict and a BTree\r\n\t\t//  that is used in this case because the BTree only stores string keys.\r\n\t\t//  the improved B+ tree will have value objects/pointers within them\r\n\r\n\t\tif (typeof spec.unique_keys !== 'undefined') this.unique_keys = spec.unique_keys;\r\n\t\t//this.tree = new B_Plus_Tree(12); // order 12\r\n\t\tthis.tree = B_Plus_Tree(12); // order 12\r\n\r\n\r\n\t\t//this.dict = {};\r\n\t\t// likely to make the dict refer to the tree node\r\n\r\n\r\n\t}\r\n\r\n\t'clear'() {\r\n\t\tthis.tree.clear();\r\n\t\t//this.dict = {};\r\n\t}\r\n\r\n\t/*\r\n\t'put': mapify(function (key, value) {\r\n\t\t// inserting a bunch of things at once... could that be done more efficiently, such as in one traversal?\r\n\t\t//  sort the items, then can skip through the tree a bit quicker?\r\n\r\n\r\n\t\tvar insert_res = this.tree.insert(key, value);\r\n\t\t// with tree.insert - nice if we can keep the treenode as a result.\r\n\t\t//  the tree does not store objects in the node.\r\n\t\t//   could make the tree node hold a reference to the object?\r\n\r\n\t\t//console.log('put insert_res ' + insert_res);\r\n\t\t//this.dict[key] = value;\r\n\t}),\r\n\t*/\r\n\r\n\t'out'(key) {\r\n\t\t//console.log('key ' + key);\r\n\t\t//\r\n\r\n\t\tthis.tree.remove(key);\r\n\t\t//console.log('this.tree.keys_and_values() ' + stringify(this.tree.keys_and_values()));\r\n\t\t//throw '2.stop';\r\n\t\t//delete this.dict[key];\r\n\t}\r\n\r\n\t'get'(key) {\r\n\t\t//console.log('Sorted_KVS get');\r\n\t\t//console.log('key ' + stringify(key));\r\n\r\n\r\n\t\t// get all nodes with that key\r\n\r\n\t\t//var tree_res = this.tree.\r\n\t\t//console.log('this.tree.keys() ' + stringify(this.tree.keys()));\r\n\t\t//throw ('stop');\r\n\r\n\t\t//return\r\n\t\t// if this is treating the keys as unique it will just return 1 item or undefined / null.\r\n\t\t// otherwise it returns array on n items\r\n\r\n\t\t// don't want KVPs\r\n\r\n\t\treturn this.tree.get_values_by_key(key);\r\n\r\n\t\t//return this.dict[key];\r\n\t}\r\n\r\n\r\n\t'has'(key) {\r\n\t\t//return (typeof this.dict[key] !== 'undefined');\r\n\r\n\t\treturn this.key_count(key) > 0;\r\n\r\n\t}\r\n\t'get_cursor'() {\r\n\t\t//var res = new KSVS_Cursor(this);\r\n\t\t//res.move_first();\r\n\t\t//return res;\r\n\t}\r\n\r\n\r\n\t'keys'() {\r\n\r\n\t\treturn this.tree.keys();\r\n\r\n\t\t//return this.tree.keys();\r\n\t}\r\n\r\n\t'keys_and_values'() {\r\n\t\treturn this.tree.keys_and_values();\r\n\t}\r\n\r\n\t/*\r\n\t 'values': function() {\r\n\t var keys = this.keys();\r\n\t var res = [];\r\n\t var that = this;\r\n\t console.log('keys.length ' + keys.length );\r\n\t console.log('keys ' + jsgui.stringify(keys));\r\n\r\n\t each(keys, function(i, v) {\r\n\t res.push(that.dict[v]);\r\n\t });\r\n\t return res;\r\n\t },\r\n\t */\r\n\r\n\t'key_count'(key) {\r\n\r\n\t\tif (typeof key !== 'undefined') {\r\n\t\t\treturn this.tree.count(key);\r\n\t\t} else {\r\n\t\t\treturn this.tree.count();\r\n\t\t}\r\n\r\n\t\t// also want to do it for a particular key\r\n\r\n\r\n\t}\r\n\r\n\t'get_keys_by_prefix'(prefix) {\r\n\t\treturn this.tree.get_keys_by_prefix(prefix);\r\n\t}\r\n\r\n\t'each'(callback) {\r\n\t\t// iterate through every item\r\n\t\t//  key, value\r\n\t\treturn this.tree.each(callback);\r\n\t}\r\n\r\n\t'get_by_prefix'(prefix) {\r\n\r\n\t\treturn this.tree.get_by_prefix(prefix);\r\n\t}\r\n};\r\n\r\n// if we get a\r\n\r\nSorted_KVS.prototype.put = mapify(function (key, value) {\r\n\t// inserting a bunch of things at once... could that be done more efficiently, such as in one traversal?\r\n\t//  sort the items, then can skip through the tree a bit quicker?\r\n\r\n\r\n\tvar insert_res = this.tree.insert(key, value);\r\n\t//return insert_res;\r\n\t// with tree.insert - nice if we can keep the treenode as a result.\r\n\t//  the tree does not store objects in the node.\r\n\t//   could make the tree node hold a reference to the object?\r\n\r\n\r\n\t//console.log('put insert_res ' + insert_res);\r\n\t//this.dict[key] = value;\r\n});\r\n\r\nmodule.exports = Sorted_KVS;", "\r\nvar lang = require('lang-mini');\r\n//var Data_Structures = require('./jsgui-data-structures');\r\nvar Data_Value = require('./Data_Value');\r\nvar Data_Object = require('./Data_Object');\r\nvar Sorted_KVS = require('../../sorted-kvs');\r\nvar dobj = Data_Object.dobj;\r\n//console.log('Data_Object', Data_Object);\r\n//var Data_Object_Field_Collection = Data_Object.Fields_Collection;\r\n//var Constraint = require('./constraint');\r\n\r\nvar Constraint = Data_Object.Constraint;\r\nvar each = lang.each;\r\nvar tof = lang.tof;\r\nvar is_defined = lang.is_defined;\r\nvar stringify = lang.stringify;\r\nvar get_a_sig = lang.get_a_sig;\r\n//var constraint_from_obj = Constraint.from_obj;\r\nvar native_constructor_tof = lang.native_constructor_tof;\r\nvar dop = Data_Object.prototype;\r\n\r\n// Could definitely do with more work and testing.\r\n//  Being sure of what its API is.\r\n// .A fixed version of what it is now, consider and ask about improvements.\r\n\r\n// May make a new version that's a copy of it, and make breaking changes to it.\r\n//   Maybe also work on a ground-up implementation, and introduce parts of that into the new copy of Collection.\r\n\r\n// May also want a Data_Object or Data_Value that holds or uses or represents a Typed_Array.\r\n//   However, would not (be able to??) respond to changes in the value(s) in that typed aray.\r\n//    Unless some trickery was done....\r\n//    A wrapped Data_Model_Typed_Array could slow things down too much.\r\n\r\n// At some points need to be OK with holding and sometimes changing raw values.\r\n//   If you want to trigger the change notifications, use the higher level APIs.\r\n\r\n\r\n\r\n// Want to enable silent updates.\r\n//   So it does not raise events.\r\n\r\n\r\n\r\n// .silent property.\r\n//   would check for it before raising events.\r\n\r\n\r\n\r\n\r\n\r\nclass Collection extends Data_Object {\r\n    constructor(spec = {}, arr_values) {\r\n        super(spec);\r\n        this.__type = 'collection';\r\n        this.__type_name = 'collection';\r\n\r\n        var t_spec = tof(spec);\r\n        if (spec.abstract === true) {\r\n            if (t_spec === 'function') {\r\n                this.constraint(spec);\r\n            }\r\n        } else {\r\n\r\n            // For the moment, mainly wraps the ._arr object.\r\n            //   In newer version(s) may retain the ._arr property. Maybe not though.\r\n            //     Perhaps this class would better use a proxy to provide access to multiple items in the array,\r\n            //      and responding to them being changed?\r\n\r\n\r\n\r\n\r\n\r\n            this._relationships = this._relationships || {};\r\n            this._arr_idx = 0;\r\n            this._arr = [];\r\n            this.index = new Sorted_KVS();\r\n            this.fn_index = spec.fn_index;\r\n\r\n            if (t_spec === 'array') {\r\n                spec = {\r\n                    'load_array': spec\r\n                };\r\n            } else {\r\n                if (t_spec === 'function') {\r\n                    if (spec.abstract === true) {\r\n                        //throw 'Collection with abstract spec function';\r\n                        this._abstract = true;\r\n                    } else {\r\n                    }\r\n\r\n                } else if (t_spec === 'string') {\r\n                    var map_native_constructors = {\r\n                        'array': Array,\r\n                        'boolean': Boolean,\r\n                        'number': Number,\r\n                        'string': String,\r\n                        'object': Object\r\n                    }\r\n                    var nc = map_native_constructors[spec];\r\n                    if (nc) {\r\n                        spec = {\r\n                            'constraint': nc\r\n                        };\r\n                        if (nc == String) {\r\n                            spec.index_by = 'value';\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (is_defined(spec.items)) {\r\n                spec.load_array = spec.load_array || spec.items;\r\n            }\r\n            if (arr_values) {\r\n                //console.log('load arr_values ------------');\r\n                spec.load_array = arr_values;\r\n            }\r\n            // keeping these things below the expected public interface.\r\n            if (is_defined(spec.accepts)) {\r\n                this._accepts = spec.accepts;\r\n            }\r\n            if (lang.__data_id_method === 'init') {\r\n                // but maybe there will always be a context. May save download size on client too.\r\n                if (this.context) {\r\n                    this.__id = this.context.new_id(this.__type_name || this.__type);\r\n                    this.context.map_objects[this.__id] = this;\r\n                } else {\r\n                    // don't think we want a whole bunch of objects mapped like this....\r\n                    //  IDs will be very useful when they are controls... but maybe not always needed.\r\n\r\n                    //this.__id = new_collection_id();\r\n                    //map_jsgui_ids[this.__id] = this;\r\n                }\r\n            }\r\n            if (!this.__type) {\r\n\r\n            }\r\n            if (spec.load_array) {\r\n                this.load_array(spec.load_array);\r\n            }\r\n        }\r\n    }\r\n    // maybe use fp, and otherwise apply with the same params and context.\r\n    'set' (value) {\r\n        var tval = tof(value);\r\n        if (tval === 'data_object' || tval === 'data_value') {\r\n            this.clear();\r\n            return this.push(value);\r\n        } else if (tval === 'array') {\r\n            // for an array... clear, then add each.\r\n            this.clear();\r\n            each(value, (v, i) => {\r\n                this.push(v);\r\n            });\r\n        } else {\r\n            if (tval === 'collection') {\r\n                // need to reindex - though could have optimization that checks to see if the indexes are the same...\r\n                throw 'stop';\r\n                this.clear();\r\n                value.each(function (v, i) {\r\n                    that.push(v);\r\n                });\r\n            } else if (tval === 'string' || tval === 'number' || tval === 'boolean' || tval === 'null' || tval === 'undefined') {\r\n                // Single primitive value: clear and push it\r\n                this.clear();\r\n                return this.push(value);\r\n            } else {\r\n                //console.log(\"_super:\" + value);\r\n                // Fixed <BUG004>: Use proper prototype chain instead of undefined this.super\r\n                const Data_Object = require('./Data_Object');\r\n                return Data_Object.prototype.set.call(this, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    'clear' () {\r\n\r\n\r\n\r\n        this._arr_idx = 0;\r\n        this._arr = [];\r\n        this.index.clear();\r\n        // listner class hears the event but then loses access to its own this.\r\n\r\n        // The future change clear event could have an immutable copy of this efore the change, and return it as the old value???\r\n\r\n        // However, Collection (maybe?) would not even have .value.\r\n        //   or .value could be the array like ._arr???\r\n        //   and also provide a ._arr interface in the future.\r\n\r\n\r\n\r\n\r\n\r\n        this.raise('change', {\r\n            'name': 'clear'\r\n        });\r\n    }\r\n\r\n    'stringify' () {\r\n        var res = [];\r\n        if (this._abstract) {\r\n            // then we can hopefully get the datatype name\r\n            // if it's abstract we detect it, otherwise it should be in there.\r\n            var ncto = native_constructor_tof(this._type_constructor);\r\n            res.push('~Collection(')\r\n            if (ncto) {\r\n                res.push(ncto);\r\n            } else {\r\n\r\n            }\r\n            res.push(')');\r\n        } else {\r\n            res.push('Collection(');\r\n            //console.log('obj._arr ' + stringify(obj._arr));\r\n            var first = true;\r\n            this.each(function (v, i) {\r\n                if (!first) {\r\n                    res.push(', ');\r\n                } else {\r\n                    first = false;\r\n                }\r\n                res.push(stringify(v));\r\n            });\r\n            res.push(')');\r\n        }\r\n        return res.join('');\r\n    }\r\n\r\n    'toString' () {\r\n        return stringify(this._arr);\r\n    }\r\n\r\n    'toObject' () {\r\n        var res = [];\r\n        this.each(function (v, i) {\r\n            res.push(v.toObject());\r\n        });\r\n        return res;\r\n    }\r\n\r\n    'each' () {\r\n        var a = arguments;\r\n        a.l = arguments.length;\r\n        var sig = get_a_sig(a, 1);\r\n        // was callback, context\r\n        // ever given the context?\r\n\r\n        if (sig == '[f]') {\r\n            return each(this._arr, a[0]);\r\n        } else {\r\n\r\n            if (sig == '[X,f]') {\r\n                // X for index\r\n\r\n                // we use the order of the index.\r\n                //  possibly we can iterate using the index itself, maybe with that same callback.\r\n\r\n                var index = a[0];\r\n                var callback = a[1];\r\n                return index.each(callback);\r\n\r\n            } else {\r\n                if (a.l == 2) {\r\n                    return each(this._arr, a[0], a[1]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    '_id' () {\r\n        // gets the id (a new one sometimes)\r\n        if (this.context) {\r\n            this.__id = this.context.new_id(this.__type_name || this.__type);\r\n        } else {\r\n            //if (!is_defined(this.__id)) {\r\n\r\n                // get a temporary id from somewhere?\r\n                //  but the collection should really have a context...\r\n                //  or without a context, the collection is its own context?\r\n\r\n                // Won't go setting the ID for the moment.\r\n\r\n                //this.__id = new_collection_id();\r\n            //}\r\n        }\r\n        return this.__id;\r\n    }\r\n    'length' () {\r\n        return this._arr.length;\r\n    }\r\n    get len () {\r\n        return this._arr.length\r\n    }\r\n    'find' () {\r\n        var a = arguments;\r\n        a.l = arguments.length;\r\n        var sig = get_a_sig(a, 1);\r\n        if (a.l == 1) {\r\n            var pos = this.index.get(a[0])[0];\r\n            //console.log('pos', pos);\r\n            var item = this._arr[pos];\r\n            return item;\r\n            // if there is only one index in the system then the search will be simple.\r\n        }\r\n        if (sig == '[o,s]') {\r\n            return this.index_system.find(a[0], a[1]);\r\n        }\r\n        // and if looking for more than one thing...\r\n        if (sig == '[s,s]') {\r\n            return this.index_system.find(a[0], a[1]);\r\n        }\r\n        if (sig == '[a,s]') {\r\n            return this.index_system.find(a[0], a[1]);\r\n        }\r\n        if (sig == '[s,o]') {\r\n            var propertyName = a[0];\r\n            var query = a[1];\r\n            var foundItems = [];\r\n            // for each object we need to go deeper into the fields.\r\n            each(this, (item, index) => {\r\n                if (item.get) {\r\n                    var itemProperty = item.get(propertyName);\r\n                } else {\r\n                    var itemProperty = item[propertyName];\r\n                }\r\n                var tip = tof(itemProperty);\r\n                var tip2;\r\n                var ip2;\r\n\r\n                if (tip === 'data_value') {\r\n                    var ip2 = itemProperty.value();\r\n                    tip2 = tof(ip2);\r\n                } else {\r\n                    ip2 = itemProperty;\r\n                    tip2 = tip;\r\n                }\r\n                if (tip2 === 'array') {\r\n                    each(ip2, (v, i) => {\r\n                        //console.log('v ' + stringify(v));\r\n                        var matches = obj_matches_query_obj(v, query);\r\n                        //console.log('matches ' + matches);\r\n                        if (matches) {\r\n                            foundItems.push(v);\r\n                        }\r\n                    })\r\n                };\r\n            });\r\n            var res = new Collection(foundItems);\r\n            return res;\r\n        }\r\n    }\r\n    // get seems like the way to get unique values.\r\n\r\n    'get' () {\r\n        var a = arguments;\r\n        a.l = arguments.length;\r\n        var sig = get_a_sig(a, 1);\r\n        if (sig == '[n]' || sig == '[i]') {\r\n            return this._arr[a[0]];\r\n        }\r\n        if (sig == '[s]') {\r\n            var ix_sys = this.index_system;\r\n            var res;\r\n            if (ix_sys) {\r\n                //console.log('ix_sys', ix_sys);\r\n                var pui = ix_sys._primary_unique_index;\r\n                //console.log(pui);\r\n                res = pui.get(a[0])[0];\r\n            }\r\n            if (res) {\r\n                return res;\r\n            }\r\n            return Data_Object.prototype.get.apply(this, a);\r\n        }\r\n    }\r\n\r\n    'insert' (item, pos) {\r\n        this._arr.splice(pos, 0, item);\r\n        this.raise('change', {\r\n            'name': 'insert',\r\n            'item': item,\r\n            'value': item,\r\n            'pos': pos\r\n        });\r\n    }\r\n    swap(item, replacement) {\r\n        let r_parent = replacement.parent;\r\n        let repl_pos = replacement.parent.content.remove(replacement);\r\n        let i_parent = item.parent;\r\n        let item_pos = item.parent.content.remove(item);\r\n        let item_index;\r\n        i_parent.content.insert(replacement, item_pos);\r\n        r_parent.content.insert(item, repl_pos);\r\n    }\r\n\r\n    // may have efficiencies for adding and removing multiple items at once.\r\n    //  can be sorted for insertion into index with more rapid algorithmic time.\r\n\r\n    'remove' () {\r\n        // Make more monomorphic. ????2023????\r\n\r\n        var a = arguments;\r\n        a.l = arguments.length;\r\n        var sig = get_a_sig(a, 1);\r\n        //var that = this;\r\n\r\n        //console.log('remove sig:', sig);\r\n\r\n        if (sig === '[n]') {\r\n            var pos = a[0];\r\n            //console.log('pos - item index', pos);\r\n            var item = this._arr[pos];\r\n            //var o_item = item;\r\n            var spliced_pos = pos;\r\n            this._arr.splice(pos, 1);\r\n            this._arr_idx--;\r\n            //var length = this._arr.length;\r\n\r\n            /*\r\n            while (pos < length) {\r\n                // reassign the stored position of the item\r\n                var item = this._arr[pos];\r\n\r\n                // Not so sure about 'relationships' here.\r\n                //item.relationships[own_id] = [this, pos];\r\n\r\n                pos++;\r\n            }\r\n            */\r\n\r\n\r\n            var e = {\r\n                'target': this,\r\n                'value': item,\r\n                'position': spliced_pos,\r\n                'name': 'remove'\r\n            }\r\n            this.raise('change', e);\r\n\r\n            return pos;\r\n        } else if (sig === '[s]') {\r\n            var key = a[0];\r\n            var obj = this.index_system.find([\r\n                ['value', key]\r\n            ]);\r\n            var my_id = this.__id;\r\n            var item_pos_within_this = obj[0]._relationships[my_id];\r\n            this._arr.splice(item_pos_within_this, 1);\r\n            for (var c = item_pos_within_this, l = this._arr.length; c < l; c++) {\r\n                //console.log('c ' + c);\r\n                var item = this._arr[c];\r\n                item._relationships[my_id]--;\r\n            }\r\n            var e = {\r\n                'target': this,\r\n                'value': obj[0],\r\n                'position': item_pos_within_this,\r\n                'name': 'remove'\r\n            }\r\n            this.raise('change', e);\r\n        } else {\r\n            let item_index;\r\n            // or swap the item itself\r\n            const item = a[0];\r\n\r\n            // \r\n\r\n            let arr = this._arr,\r\n                l = arr.length;\r\n            if (typeof item === 'number') {\r\n                item_index = item;\r\n            } else {\r\n                let found = false,\r\n                    c = 0;\r\n                \r\n                \r\n                while (!found && c < l) {\r\n                    found = arr[c] === item;\r\n\r\n                    if (found) {\r\n                        item_index = c;\r\n                    }\r\n\r\n                    \r\n                    c++;\r\n                }\r\n                //if (found) {\r\n                //}\r\n\r\n                if (is_defined(item_index)) {\r\n                    return this.remove(item_index);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    'has' (obj_key) {\r\n        // This part needs (temp?) fixing...\r\n\r\n        //console.log('obj_key', obj_key);\r\n\r\n        if (this.get_index(obj_key) === undefined) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n\r\n        //console.trace();\r\n        //throw 'NYI';\r\n    }\r\n    'get_index' () {\r\n        // Make (more) monomorphic, have it consult the sorted KVS.\r\n        var a = arguments;\r\n        a.l = arguments.length;\r\n        var sig = get_a_sig(a, 1);\r\n        if (sig === '[s]') {\r\n\r\n            if (this.index_system) {\r\n\r\n                return this.index_system.search(a[0]);\r\n\r\n                \r\n\r\n            } else {\r\n                //console.log('a[0]', a[0]);\r\n\r\n                // Could search by name...?\r\n\r\n                //console.log('this._arr', this._arr);\r\n\r\n                if (this._arr.length === 0) {\r\n                    return undefined;\r\n                } else {\r\n\r\n                    // go through the objects in the array.\r\n                    //   check against 'name' properties...\r\n\r\n                    for (let c = 0; c < this._arr.length; c++) {\r\n                        const item = this._arr[c];\r\n\r\n\r\n\r\n                        if (item?.name === a[0]) {\r\n                            return c;\r\n                        }\r\n\r\n                    }\r\n\r\n                    return undefined;\r\n\r\n                    //console.trace();\r\n                    //throw 'stop';\r\n                }\r\n\r\n                \r\n            }\r\n\r\n            \r\n        } else {\r\n            console.trace();\r\n            throw 'Expected [s]';\r\n        }\r\n    }\r\n    \r\n    // More fp way of indexing.\r\n    'index_by' () {\r\n        var a = arguments;\r\n        a.l = arguments.length;\r\n        var sig = get_a_sig(a, 1);\r\n\r\n        console.log('Indexing not implemented (like this)');\r\n        console.trace();\r\n    }\r\n\r\n    'push' (value) {\r\n\r\n        const {silent} = this;\r\n\r\n\r\n\r\n        let tv = tof(value);\r\n        let fn_index = this.fn_index;\r\n        let idx_key, has_idx_key = false,\r\n            pos;\r\n        if (fn_index) {\r\n            idx_key = fn_index(value);\r\n            has_idx_key = true;\r\n        }\r\n        if (tv === 'object' || tv === 'function') {\r\n            // Long comments removed. Use functional constraint satisfaction if we have that.\r\n            pos = this._arr.length;\r\n            this._arr.push(value);\r\n            //console.log('pushing value', value);\r\n            //this.index_system.unsafe_add_object(value);\r\n            this._arr_idx++;\r\n\r\n\r\n            if (!silent) {\r\n                const e = {\r\n                    'target': this,\r\n                    'item': value,\r\n                    'value': value,\r\n                    'position': pos,\r\n                    'name': 'insert'\r\n                }\r\n                this.raise('change', e);\r\n            }\r\n\r\n            \r\n        } else if (tv === 'collection') {\r\n            pos = this._arr.length;\r\n            this._arr.push(value);\r\n            this._arr_idx++;\r\n\r\n            if (!silent) {\r\n                const e = {\r\n                    'target': this,\r\n                    'item': value,\r\n                    'value': value,\r\n                    'position': pos,\r\n                    'name': 'insert'\r\n                }\r\n                this.raise('change', e);\r\n            }\r\n\r\n        } else if (tv === 'data_object' || tv === 'control') {\r\n            pos = this._arr.length;\r\n            // Should not need a context or ID just to be put in place.\r\n            this._arr.push(value);\r\n            this._arr_idx++;\r\n            if (!silent) {\r\n                const e = {\r\n                    'target': this,\r\n                    'item': value,\r\n                    'value': value,\r\n                    'position': pos,\r\n                    'name': 'insert'\r\n                }\r\n                this.raise('change', e);\r\n            }\r\n        } else if (tv === 'array') {\r\n            const new_coll = new Collection(value);\r\n            pos = this._arr.length;\r\n            // Should not need a context or ID just to be put in place.\r\n            this._arr.push(new_coll);\r\n            if (!silent) {\r\n                const e = {\r\n                    'target': this,\r\n                    'item': value,\r\n                    'value': value,\r\n                    'position': pos,\r\n                    'name': 'insert'\r\n                }\r\n                this.raise('change', e);\r\n            }\r\n        }\r\n\r\n        // Fixed <BUG003>: Handle boolean, null, undefined by wrapping in Data_Value\r\n        if (tv === 'string' || tv === 'number' || tv === 'boolean' || tv === 'null' || tv === 'undefined') {\r\n            // Not so sure about this now.\r\n            const dv = new Data_Value({\r\n                'value': value\r\n            });\r\n            pos = this._arr.length;\r\n            // Should not need a context or ID just to be put in place.\r\n            this._arr.push(dv);\r\n            if (!silent) {\r\n                const e = {\r\n                    'target': this,\r\n                    'item': value,\r\n                    'value': value,\r\n                    'position': pos,\r\n                    'name': 'insert'\r\n                }\r\n                this.raise('change', e);\r\n            }\r\n        }\r\n        if (has_idx_key) {\r\n            this.index.put(idx_key, pos);\r\n        }\r\n        //this._arr_idx++;\r\n        return value;\r\n    }\r\n\r\n    'load_array' (arr) {\r\n        for (var c = 0, l = arr.length; c < l; c++) {\r\n            this.push(arr[c]);\r\n        }\r\n        this.raise('load');\r\n    }\r\n    'values' () {\r\n        var a = arguments;\r\n        a.l = a.length;\r\n        //var sig = get_a_sig(a, 1);\r\n        if (a.l === 0) {\r\n            return this._arr;\r\n        } else {\r\n            var stack = new Error().stack;\r\n            throw 'not yet implemented';\r\n        }\r\n    }\r\n    'value' () {\r\n        const res = [];\r\n        this.each((v, i) => {\r\n            if (typeof v.value == 'function') {\r\n                res.push(v.value());\r\n            } else {\r\n                res.push(v);\r\n            }\r\n        });\r\n        return res;\r\n    }\r\n};\r\n\r\nvar p = Collection.prototype;\r\np.add = p.push;\r\nmodule.exports = Collection;", "module.exports = require('./old/Data_Object')", "\r\n\r\nconst Data_Model = require('../Data_Model');\r\n\r\nclass Immutable_Data_Model extends Data_Model {\r\n    constructor(...a) {\r\n        super(...a);\r\n    }\r\n}\r\n\r\nmodule.exports = Immutable_Data_Model;", "\r\n\r\nclass Validation_Result {\r\n\r\n}\r\n\r\nmodule.exports = Validation_Result;", "\r\n\r\nconst Validation_Result = require('./Validation_Result');\r\n\r\n\r\nclass Validation_Success extends Validation_Result {\r\n    constructor(spec) {\r\n\r\n        super(spec);\r\n\r\n    }\r\n}\r\n\r\nmodule.exports = Validation_Success;", "const Validation_Success = require(\"./Validation_Success\");\r\n\r\n\r\nconst setup_base_data_value_value_property = (data_value) => {\r\n\r\n    let local_js_value;\r\n\r\n    // but the old value too???\r\n    //   do we need more complex usage of isomorphic code????\r\n\r\n    const set_value_with_valid_and_changed_value = (valid_and_changed_value) => {\r\n\r\n        const old = local_js_value;\r\n        local_js_value = valid_and_changed_value;\r\n\r\n        data_value.raise('change', {\r\n            name: 'value',\r\n            old,\r\n            value: local_js_value\r\n        })\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    Object.defineProperty(data_value, 'value', {\r\n\r\n        get() {\r\n            return local_js_value;\r\n        },\r\n        set(value) {\r\n\r\n            if (data_value.transform_validate_value) {\r\n\r\n                // otherwise????\r\n                //   nothing yet.\r\n\r\n                // assume the other functions:\r\n                // is_value_correct_type\r\n                // can_value_be_parsed_to_correct_type\r\n                // parse_value\r\n                // validate_value\r\n\r\n\r\n                // .assess_set ????\r\n\r\n                // maybe a set_with_valid_value function?\r\n\r\n                // get the transform and validare result obj\r\n\r\n                const obj_transform_and_validate_value_results = data_value.transform_validate_value(value);\r\n                //console.log('obj_transform_and_validate_value_results', obj_transform_and_validate_value_results);\r\n\r\n                if (obj_transform_and_validate_value_results.validation instanceof Validation_Success) {\r\n                    // need to check that it's changed....\r\n\r\n\r\n                    if (obj_transform_and_validate_value_results.transformed_value !== undefined) {\r\n                        const value_has_changed = local_js_value !== obj_transform_and_validate_value_results.transformed_value;\r\n\r\n                        if (value_has_changed) {\r\n                            set_value_with_valid_and_changed_value(obj_transform_and_validate_value_results.transformed_value);\r\n                        } else {\r\n                            // maybe nothing here now.\r\n\r\n                        }\r\n                    } else {\r\n                        const value_has_changed = local_js_value !== obj_transform_and_validate_value_results.value;\r\n\r\n                        if (value_has_changed) {\r\n                            set_value_with_valid_and_changed_value(obj_transform_and_validate_value_results.value);\r\n                        } else {\r\n                            // maybe nothing here now.\r\n\r\n                        }\r\n                    }\r\n\r\n                    \r\n\r\n                }\r\n\r\n\r\n\r\n            } else {\r\n                set_value_with_valid_and_changed_value(value);\r\n            }\r\n\r\n            // Will make use of various subclass helper functions when they are available.\r\n\r\n\r\n\r\n\r\n            // transform_validate_value\r\n            // parse_validate_value\r\n\r\n            //if (data_value.validate_value)\r\n\r\n        }\r\n\r\n    })\r\n\r\n\r\n}\r\n\r\nmodule.exports = setup_base_data_value_value_property;", "var jsgui = require('lang-mini');\r\n//var Evented_Class = require('./_evented-class');\r\nconst {more_general_equals} = require('./tools');\r\nconst Data_Model = require('../Data_Model');\r\nconst Immutable_Data_Model = require('./Immutable_Data_Model');\r\n\r\nconst {is_defined, input_processors, field, tof, each} = jsgui;\r\n\r\nconst setup_base_data_value_value_property = require('./setup_base_data_value_value_property');\r\n\r\n// What type is the value???\r\n\r\n// Examples / tests of using this in this module could help.\r\n//   Benchmarks too?\r\nlet util;\r\nif (typeof window === 'undefined') {\r\n    const str_utl = 'util';\r\n    util = require(str_utl);    \r\n}\r\n\r\n\r\nconst lpurple = x => '\\x1b[38;5;129m' + x + '\\x1b[0m';\r\nconst ldarkPurple = x => `\\x1b[38;5;54m${x}\\x1b[0m`;\r\n\r\n// Possibly do some (much?) simpler tests to start with...\r\n\r\n// Copy the value when it gets set somehow.\r\n\r\n// Not actually all that much shared between the mutable and immutable versions right now.\r\n//   Could come back to this later.\r\n\r\n\r\n\r\nclass Base_Data_Value extends Data_Model {\r\n\r\n    constructor(spec = {}) {\r\n        super(spec);\r\n        this.__data_value = true;\r\n\r\n        if (spec.data_type) this.data_type = spec.data_type;\r\n        if (spec.context) {\r\n            this.context = spec.context;\r\n        }\r\n        this.__type = 'data_value';\r\n\r\n        // this.__data_type = ...\r\n        // this.__data_type_name = ... ?\r\n\r\n        //this._bound_events = {};\r\n        this._relationships = {};\r\n\r\n        //console.log('Base_Data_Value spec', spec);\r\n\r\n        // Does not have the field for 'value' though....\r\n\r\n        // this.setup_value_property????\r\n\r\n\r\n        \r\n\r\n\r\n        // So here field ('value') is doing most of the work here.\r\n\r\n        //  Do want to see about setting up the sub-fields too....\r\n\r\n        const {data_type, context} = this;\r\n\r\n        \r\n        //setup_base_data_value_value_property(this);\r\n\r\n\r\n        // Defining the property here could work....\r\n\r\n\r\n\r\n\r\n        // Some kind of post-constructor function?????\r\n\r\n        // or use an event handler and event????\r\n\r\n\r\n        //setImmediate(() => {\r\n        //    if (spec.value) {\r\n        //        this.value = spec.value;\r\n        //    }\r\n        //})\r\n\r\n    }\r\n\r\n    \r\n\r\n    equals(other) {\r\n        // Are they both Data_Values???\r\n\r\n        // or use Data_Model ???\r\n\r\n        // make a general equals here, give it this for the moment.\r\n        //   the more general equals will be used recursively for comparing arrays.\r\n\r\n        return more_general_equals(this, other);\r\n\r\n    }\r\n\r\n    // Maybe see about immutable mode Data_Values / Data_Models.\r\n    //   Or do make the immutable versions of all of them!!!\r\n    //     And could make core functionality for both the immutable and mutable versions.\r\n    //       Mutability Independent Code.\r\n\r\n\r\n    // Immutable_Data_Integer does seem like it would in principle be (really?) simple.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /*\r\n    toImmutable() {\r\n        // May be slightly difficult / tricky / complex.\r\n        const {context, data_type, value} = this;\r\n\r\n        // Create the new item...\r\n        // Needs to copy the inner value....?\r\n\r\n        const res = new Immutable_Data_Value({\r\n            context, data_type, value\r\n        });\r\n        return res;\r\n    }\r\n    */\r\n\r\n    \r\n    'get'() {\r\n        return this.value;\r\n    }\r\n\r\n    'toString'() {\r\n        //return stringify(this.get());\r\n        // con\r\n        //console.log('this._val ' + stringify(this._val));\r\n        //throw 'stop';\r\n        return this.get() + '';\r\n    }\r\n    // Maybe a particular stringify function?\r\n    'toJSON'() {\r\n        return JSON.stringify(this.get());\r\n    }\r\n\r\n    // Need to copy / clone the ._ value\r\n    /*\r\n    'clone'() {\r\n\r\n        //return this.toImmutable();\r\n    }\r\n    */\r\n\r\n    // This is important to the running of jsgui3.\r\n    //   Move to the lower level of Data_Model?\r\n\r\n\r\n    '_id'() {\r\n        if (this.__id) return this.__id;\r\n        if (this.context) {\r\n            //console.log('this.__type ' + this.__type);\r\n            //throw 'stop';\r\n            this.__id = this.context.new_id(this.__type_name || this.__type);\r\n        } else {\r\n            if (!is_defined(this.__id)) {\r\n                throw 'Data_Value should have context';\r\n                this.__id = new_data_value_id();\r\n            }\r\n        }\r\n        return this.__id;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Base_Data_Value;", "class Value_Set_Attempt {\r\n    constructor(spec = {}) {\r\n        // name, old, value (attempted value), success, (current???), error(s)?, reasons????\r\n        // failure.reasons could help....\r\n\r\n        // .success.token perhaps too....\r\n        // .success.transaction.id ????\r\n\r\n        Object.assign(this, spec);\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nmodule.exports = Value_Set_Attempt;", "var jsgui = require('lang-mini');\r\n//var Evented_Class = require('./_evented-class');\r\nconst {more_general_equals} = require('./tools');\r\nconst Data_Model = require('../Data_Model');\r\nconst Immutable_Data_Model = require('./Immutable_Data_Model');\r\n\r\nconst {is_defined, input_processors, field, tof, each} = jsgui;\r\n\r\n// What type is the value???\r\n\r\n// Examples / tests of using this in this module could help.\r\n//   Benchmarks too?\r\nlet util;\r\nif (typeof window === 'undefined') {\r\n    const str_utl = 'util';\r\n    util = require(str_utl);    \r\n}\r\n\r\n\r\nconst lpurple = x => '\\x1b[38;5;129m' + x + '\\x1b[0m';\r\nconst ldarkPurple = x => `\\x1b[38;5;54m${x}\\x1b[0m`;\r\n\r\n// Possibly do some (much?) simpler tests to start with...\r\n\r\n// Copy the value when it gets set somehow.\r\n\r\n// Not actually all that much shared between the mutable and immutable versions right now.\r\n//   Could come back to this later.\r\n\r\n\r\n\r\nclass Immutable_Base_Data_Value extends Immutable_Data_Model {\r\n\r\n    constructor(spec = {}) {\r\n        super(spec);\r\n        this.__data_value = true;\r\n\r\n        if (spec.data_type) this.data_type = spec.data_type;\r\n        if (spec.context) {\r\n            this.context = spec.context;\r\n        }\r\n        this.__type = 'data_value';\r\n\r\n        // this.__data_type = ...\r\n        // this.__data_type_name = ... ?\r\n\r\n        //this._bound_events = {};\r\n        this._relationships = {};\r\n\r\n\r\n        // So here field ('value') is doing most of the work here.\r\n\r\n        //  Do want to see about setting up the sub-fields too....\r\n\r\n        const {data_type, context} = this;\r\n\r\n    }\r\n\r\n    equals(other) {\r\n        // Are they both Data_Values???\r\n\r\n        // or use Data_Model ???\r\n\r\n        // make a general equals here, give it this for the moment.\r\n        //   the more general equals will be used recursively for comparing arrays.\r\n\r\n        return more_general_equals(this, other);\r\n\r\n    }\r\n\r\n    // Maybe see about immutable mode Data_Values / Data_Models.\r\n    //   Or do make the immutable versions of all of them!!!\r\n    //     And could make core functionality for both the immutable and mutable versions.\r\n    //       Mutability Independent Code.\r\n\r\n\r\n    // Immutable_Data_Integer does seem like it would in principle be (really?) simple.\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n\r\n    /*\r\n    toImmutable() {\r\n        // May be slightly difficult / tricky / complex.\r\n        const {context, data_type, value} = this;\r\n\r\n        // Create the new item...\r\n        // Needs to copy the inner value....?\r\n\r\n        const res = new Immutable_Data_Value({\r\n            context, data_type, value\r\n        });\r\n        return res;\r\n    }\r\n    */\r\n\r\n    \r\n    'get'() {\r\n        return this.value;\r\n    }\r\n\r\n    'toString'() {\r\n        //return stringify(this.get());\r\n        // con\r\n        //console.log('this._val ' + stringify(this._val));\r\n        //throw 'stop';\r\n        return this.get() + '';\r\n    }\r\n    // Maybe a particular stringify function?\r\n    'toJSON'() {\r\n        return JSON.stringify(this.get());\r\n    }\r\n\r\n    // Need to copy / clone the ._ value\r\n    /*\r\n    'clone'() {\r\n\r\n        //return this.toImmutable();\r\n    }\r\n    */\r\n\r\n    // This is important to the running of jsgui3.\r\n    //   Move to the lower level of Data_Model?\r\n\r\n\r\n    '_id'() {\r\n        if (this.__id) return this.__id;\r\n        if (this.context) {\r\n            //console.log('this.__type ' + this.__type);\r\n            //throw 'stop';\r\n            this.__id = this.context.new_id(this.__type_name || this.__type);\r\n        } else {\r\n            if (!is_defined(this.__id)) {\r\n                throw 'Immutable_Base_Data_Value should have context';\r\n                this.__id = new_data_value_id();\r\n            }\r\n        }\r\n        return this.__id;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Immutable_Base_Data_Value;", "var jsgui = require('lang-mini');\r\n//var Evented_Class = require('./_evented-class');\r\nconst {more_general_equals} = require('./tools');\r\nconst Data_Model = require('../Data_Model');\r\nconst Immutable_Data_Model = require('./Immutable_Data_Model');\r\nconst Immutable_Base_Data_Value = require('./Immutable_Base_Data_Value');\r\n\r\nconst {is_defined, input_processors, field, tof, each} = jsgui;\r\n\r\n// What type is the value???\r\n\r\n// Examples / tests of using this in this module could help.\r\n//   Benchmarks too?\r\nlet util;\r\nif (typeof window === 'undefined') {\r\n    const str_utl = 'util';\r\n    util = require(str_utl);    \r\n}\r\n\r\n\r\nconst lpurple = x => '\\x1b[38;5;129m' + x + '\\x1b[0m';\r\nconst ldarkPurple = x => `\\x1b[38;5;54m${x}\\x1b[0m`;\r\n\r\n// Possibly do some (much?) simpler tests to start with...\r\n\r\n// Copy the value when it gets set somehow.\r\n\r\nclass Immutable_Data_Value extends Immutable_Base_Data_Value {\r\n\r\n    constructor(spec = {}) {\r\n        super(spec);\r\n        this.__data_value = true;\r\n        this.__immutable = true;\r\n        this.__type_name = 'data_value';\r\n\r\n        if (spec.data_type) this.data_type = spec.data_type;\r\n        if (spec.context) {\r\n            this.context = spec.context;\r\n        }\r\n\r\n        const {data_type, context} = this;\r\n        \r\n        if (data_type) {\r\n            \r\n\r\n            const to_local_js_value = (value) => {\r\n                //\r\n                if (value !== undefined) {\r\n                    const t = tof(value);\r\n                    //\r\n\r\n                    if (t === 'number' || t === 'string' || t === 'boolean') {\r\n                        return value;\r\n                    } else {\r\n\r\n                        // So if it's an array....\r\n                        //   Would need to create the items inside it.\r\n                        //     Receate inner items when making a copy of an array, as they could be Data_Values we would need to\r\n                        //     get the value of, or the bare values....\r\n\r\n                        // Does seem a bit laborious here, go through array, depending on type of item copy it in different way.\r\n                        //   As in with the inner strings, numbers and booleans we can do the direct = assignment because they\r\n                        //   dont (?) share actual objects.\r\n\r\n                        if (t === 'array') {\r\n                            // go through it....\r\n                            //const arr_value = value;\r\n                            const l = value.length;\r\n                            const res = new Array(l);\r\n                            for (let c = 0; c < l; c++) {\r\n                                res[c] = to_local_js_value(value[c]);\r\n                            }\r\n                            return res;\r\n                        } else if (t === 'data_value') {\r\n                            return value.toImmutable();\r\n                        } else {\r\n\r\n                            // If it's a Data_Value (in the/an array???) we need to get an immutable version of it.\r\n                            console.log('to_local_js_value value', value);\r\n                            console.log('t', t);\r\n                            \r\n                            console.trace();\r\n                            throw 'NYI';\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            const local_js_value = to_local_js_value(spec.value);\r\n\r\n            //  inner_js_type ???\r\n\r\n            // inner_value could help....\r\n\r\n            // TODO <BUG002>: Immutable Data_Value should have a setter that throws an error\r\n            // Currently only has getter, so assignments silently succeed\r\n            // See BUGS.md for proposed fix\r\n            Object.defineProperty(this, 'value', {\r\n                get() {\r\n                    return local_js_value;\r\n                    //return _prop_value;\r\n                }\r\n                // MISSING: set() { throw new TypeError('Cannot modify immutable Data_Value'); }\r\n            });\r\n            \r\n        } else {\r\n            \r\n            let value;\r\n\r\n            // then if it's an array, would need to slice it, and (possibly) wrap inner items as being immutable too.\r\n\r\n            if (spec.value instanceof Array) {\r\n                value = spec.value.map(x => {\r\n                    if (x instanceof Data_Model) {\r\n                        return x.toImmutable();\r\n                    } else {\r\n                        return x;\r\n                    }\r\n                })\r\n            } else {\r\n                value = spec.value;\r\n            }\r\n            // TODO <BUG002>: This property definition also needs a setter that throws\r\n            // See BUGS.md for proposed fix\r\n            Object.defineProperty(this, 'value', {\r\n                get() {\r\n                    return value\r\n                }\r\n                // MISSING: set() { throw new TypeError('Cannot modify immutable Data_Value'); }\r\n            })\r\n            //field(this, 'value', spec.value);\r\n        }\r\n        this.__type = 'data_value';\r\n\r\n        // this.__data_type = ...\r\n        // this.__data_type_name = ... ?\r\n\r\n        //this._bound_events = {};\r\n        this._relationships = {};\r\n\r\n\r\n    }\r\n\r\n    equals(other) {\r\n\r\n        return more_general_equals(this, other);\r\n    }\r\n\r\n    \r\n    toImmutable() {\r\n        // May be slightly difficult / tricky / complex.\r\n        const {context, data_type, value} = this;\r\n\r\n        // Create the new item...\r\n        // Needs to copy the inner value....?\r\n\r\n        const res = new Immutable_Data_Value({\r\n            context, data_type, value\r\n        });\r\n        return res;\r\n    }\r\n    'get'() {\r\n        return this.value;\r\n    }\r\n\r\n\r\n    'toString'() {\r\n        //return stringify(this.get());\r\n        // con\r\n        //console.log('this._val ' + stringify(this._val));\r\n        //throw 'stop';\r\n        return this.get() + '';\r\n    }\r\n    // Maybe a particular stringify function?\r\n    'toJSON'() {\r\n\r\n        // Seems like cases where sometimes \r\n\r\n        const t_value = tof(this.value);\r\n\r\n        if (t_value === 'string') {\r\n            return JSON.stringify(this.value);\r\n        } else\r\n        if (t_value === 'number') {\r\n            //\r\n            return this.value + '';\r\n\r\n        } else if (t_value === 'boolean' ) {\r\n            this.value ? 'true' : 'false'\r\n        } else if (t_value === 'array') {\r\n\r\n            let res = '[';\r\n            const l = this.value.length;\r\n            for (let c = 0; c < l; c++) {\r\n                const item = this.value[c];\r\n                if (c > 0) res += ','\r\n                if (item.toJSON) {\r\n                    res += item.toJSON();\r\n                } else {\r\n                    res += JSON.stringify(item);\r\n                }\r\n\r\n            }\r\n\r\n            res = res + ']';\r\n\r\n            return res;\r\n            //return JSON.stringify(this.value);\r\n        } else if (t_value === 'data_value') {\r\n            return this.value.toJSON();\r\n        } else if (t_value === 'undefined') {\r\n            return 'null'\r\n        } else if (t_value === 'null') {\r\n            return 'null'\r\n        } else {\r\n            console.log('toJSON this.value', this.value);\r\n            console.log('t_value', t_value);\r\n            console.trace();\r\n            throw 'NYI';\r\n        }\r\n\r\n        \r\n\r\n        //return JSON.stringify(this.value);\r\n    }\r\n\r\n    // Need to copy / clone the ._ value\r\n\r\n    'clone'() {\r\n        return this.toImmutable();\r\n    }\r\n\r\n    // This is important to the running of jsgui3.\r\n    //   Move to the lower level of Data_Model?\r\n\r\n\r\n    '_id'() {\r\n        if (this.__id) return this.__id;\r\n        if (this.context) {\r\n            //console.log('this.__type ' + this.__type);\r\n            //throw 'stop';\r\n            this.__id = this.context.new_id(this.__type_name || this.__type);\r\n        } else {\r\n            if (!is_defined(this.__id)) {\r\n                throw 'Data_Value should have context';\r\n                this.__id = new_data_value_id();\r\n            }\r\n        }\r\n        return this.__id;\r\n    }\r\n\r\n    'toObject'() {\r\n        return this._;\r\n\r\n    }\r\n};\r\n\r\n\r\nif (util) {\r\n    Immutable_Data_Value.prototype[util.inspect.custom] = function(depth, opts) {\r\n        //return 'foo = ' + this.foo.toUpperCase();\r\n\r\n        // But then display it in a specific color....\r\n\r\n        //return ldarkPurple(this.value);\r\n\r\n        const {value} = this;\r\n\r\n        if (value instanceof Array) {\r\n            // could go through each item in that array.\r\n\r\n            let res = ldarkPurple('[ ');\r\n            let first = true;\r\n\r\n            each(value, item => {\r\n                if (!first) {\r\n                    res = res + ldarkPurple(', ');\r\n                } else {\r\n                    first = false;\r\n                }\r\n\r\n                if (item instanceof Data_Model) {\r\n                    const item_value = item.value;\r\n                    res = res + ldarkPurple(item_value)\r\n\r\n                } else [\r\n                    res = res + ldarkPurple(item)\r\n                ]\r\n\r\n            })\r\n            res = res + ldarkPurple(' ]');\r\n            return res;\r\n\r\n        } else {\r\n            return ldarkPurple(this.value);\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = Immutable_Data_Value;\r\n", "var jsgui = require('lang-mini');\r\nconst {more_general_equals} = require('./tools');\r\nconst Base_Data_Value = require('./Base_Data_Value');\r\nconst Value_Set_Attempt = require('./Value_Set_Attempt');\r\nconst Data_Model = require('../Data_Model');\r\nconst Immutable_Data_Model = require('./Immutable_Data_Model');\r\nconst Immutable_Data_Value = require('./Immutable_Data_Value');\r\nconst {is_defined, input_processors, field, tof, each, is_array, Data_Type} = jsgui;\r\n\r\nconst setup_data_value_data_type_set = (data_value, data_type) => {\r\n    let local_js_value;\r\n\r\n    const define_string_value_property = () => {\r\n\r\n        Object.defineProperty(data_value, 'value', {\r\n            get() {\r\n                return local_js_value;\r\n            },\r\n            set(value) {\r\n\r\n                // Than in 'inner set'???\r\n                \r\n\r\n\r\n\r\n\r\n                //console.log('1) set(value)');\r\n\r\n                const old_value = local_js_value;\r\n\r\n                //console.log('old_value (local_js_value)', old_value);\r\n\r\n                const immu = data_value.toImmutable();\r\n\r\n                //console.log('immu', immu);\r\n                //console.log('value', value);\r\n\r\n                const value_equals_current = immu.equals(value);\r\n                //console.log('value_equals_current', value_equals_current);\r\n                if (!value_equals_current) {\r\n                    const t_value = tof(value);\r\n                    //console.log('t_value', t_value);\r\n                    let made_change = false;\r\n                    if (t_value === 'string') {\r\n                        if (local_js_value instanceof Base_Data_Value) {\r\n                            console.log('existing local_js_value instanceof Data_Value');\r\n                            console.log('local_js_value.value', local_js_value.value);\r\n                            console.log('local_js_value.data_type.name', local_js_value.data_type.name);\r\n                            console.trace();\r\n                            throw 'NYI';\r\n                        } else if (local_js_value === undefined) {\r\n                            local_js_value = value;\r\n                            made_change = true;\r\n                        } else if (typeof local_js_value === 'string') {\r\n                            local_js_value = value;\r\n                            made_change = true;\r\n                        } else {\r\n                            console.trace();\r\n                            throw 'stop';\r\n                        }\r\n                    } else {\r\n                        if (value instanceof Base_Data_Value) {\r\n                            console.log('t_value', t_value);\r\n                            console.log('value', value);\r\n                            console.trace();\r\n                            throw 'stop';\r\n                        } else {\r\n\r\n\r\n                            const tval = tof(value);\r\n\r\n                            if (tval === 'number') {\r\n                                local_js_value = value + '';\r\n                                made_change = true;\r\n\r\n                            } else {\r\n\r\n                                console.log('-- INVALID TYPE --');\r\n\r\n                                // Maybe need more handling here though....\r\n\r\n                                console.log('tof(old_value)', tof(old_value));\r\n                                console.log('tof(value)', tof(value));\r\n\r\n\r\n\r\n                                data_value.raise('validate', {\r\n                                    valid: false,\r\n                                    reason: 'Invalid Type',\r\n                                    value,\r\n                                    old: local_js_value\r\n                                });\r\n\r\n                            }\r\n\r\n                            \r\n                        }\r\n                    }\r\n                    if (made_change) {\r\n                        const my_e = {\r\n                            name: 'value',\r\n                            old: old_value,\r\n                            value: local_js_value\r\n                        }\r\n                        data_value.raise('change', my_e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    const define_data_type_typed_value_property = () => {\r\n        const {wrap_properties, property_names, property_data_types, wrap_value_inner_values, value_js_type,\r\n            abbreviated_property_names, named_property_access, numbered_property_access, parse_string} = data_type;\r\n        let num_properties;\r\n        if (property_names && property_data_types) {\r\n            if (property_names.length === property_data_types.length) {\r\n                num_properties = property_names.length;\r\n                if (numbered_property_access) {\r\n                }\r\n            }\r\n        } else if (property_names) {\r\n            num_properties = property_names.length;\r\n        }\r\n        let _current_immutable_value, _previous_immutable_value;\r\n        let prev_outer_value, current_outer_value;\r\n        let _numbered_property_access_has_been_set_up = false, _named_property_access_has_been_set_up = false;\r\n\r\n\r\n\r\n        Object.defineProperty(data_value, 'value', {\r\n            get() {\r\n                return local_js_value;\r\n            },\r\n            set(value) {\r\n                const immu = data_value.toImmutable();\r\n                const value_equals_current = immu.equals(value);\r\n                //console.log('2) set(value)');\r\n\r\n                if (value_equals_current) {\r\n\r\n                    //console.log('value_equals_current', value_equals_current);\r\n\r\n                    // Don't even validate. Maybe raise event saying set-refused?\r\n                    //   set_to_current event possibly???\r\n\r\n\r\n                } else {\r\n                    const passed_first_validation = data_type.validate(value);\r\n                    //console.log('value', value);\r\n                    //console.log('passed_first_validation', passed_first_validation);\r\n\r\n\r\n                    let passed_validation = passed_first_validation;\r\n                    if (!passed_first_validation) {\r\n                        const t_value = tof(value);\r\n                        //console.log('failed first validation t_value:', t_value);\r\n                        if (t_value === 'string' && data_type.parse_string) {\r\n                            const parsed_value = data_type.parse_string(value);\r\n                            if (parsed_value !== undefined) {\r\n                                if (data_type.validate(parsed_value)) {\r\n                                    if (!immu.equals(parsed_value)) {\r\n                                        value = parsed_value;\r\n                                        passed_validation = true;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        // \r\n                    }\r\n                    //console.log('passed_validation', passed_validation);\r\n                    if (passed_validation) {\r\n                        data_value.raise('validate', {\r\n                            valid: true,\r\n                            value\r\n                        });\r\n                    } else {\r\n                        data_value.raise('validate', {\r\n                            valid: false,\r\n                            value\r\n                        });\r\n                    }\r\n\r\n\r\n                    if (passed_validation) {\r\n                        const do_actual_set = (value) => {\r\n                            //console.log('do_actual_set');\r\n                            const array_specific_value_processing = () => {\r\n                                if (value_js_type === Array) {\r\n                                    let t = tof(local_js_value);\r\n                                    if (t === 'undefined') {\r\n                                        const create_array_with_wrapped_items = () => {\r\n                                            if (num_properties) {\r\n                                                if (wrap_value_inner_values) {\r\n                                                    if (property_data_types) {\r\n                                                        let i = 0;\r\n                                                        if (value.__immutable) {\r\n                                                            const l = value.length;\r\n                                                            const arr_wrapped_value_values = new Array(l);\r\n                                                            const value_value = value.value;\r\n                                                            do_actual_set(value_value);\r\n                                                        } else {\r\n                                                            if (value instanceof Data_Value) {\r\n                                                                const arr_wrapped_value_values = new Array(num_properties);\r\n                                                                const arr_dv_value = value.value;\r\n                                                                console.log('arr_dv_value', arr_dv_value);\r\n                                                                console.trace();\r\n                                                                throw 'stop';\r\n                                                            } else if (is_array(value)) {\r\n                                                                const arr_wrapped_value_values = value.map(value => {\r\n                                                                    const property_index = i;\r\n                                                                    let property_name;\r\n                                                                    if (property_names) {\r\n                                                                        property_name = property_names[property_index];\r\n                                                                    }\r\n                                                                    const wrapped_value = new Data_Value({context, value, data_type: property_data_types[i]});\r\n                                                                    wrapped_value.on('change', e => {\r\n                                                                        const {name} = e;\r\n                                                                        if (name === 'value') {\r\n                                                                            current_outer_value = data_value.toImmutable();\r\n                                                                            const my_e = {\r\n                                                                                name,\r\n                                                                                event_originator: wrapped_value,\r\n                                                                                parent_event: e,\r\n                                                                                value: current_outer_value\r\n                                                                            }\r\n                                                                            if (property_name) {\r\n                                                                                my_e.property_name = property_name;\r\n                                                                            }\r\n                                                                            my_e.property_index = property_index;\r\n                                                                            data_value.raise('change', my_e);\r\n                                                                            prev_outer_value = current_outer_value;\r\n                                                                        }\r\n                                                                    })\r\n                                                                    i++;\r\n                                                                    return wrapped_value;\r\n                                                                });\r\n                                                                local_js_value = arr_wrapped_value_values;\r\n                                                                const my_e = {\r\n                                                                    name: 'value',\r\n                                                                    old: _previous_immutable_value,\r\n                                                                    value: data_value.toImmutable()\r\n                                                                }\r\n                                                                data_value.raise('change', my_e);\r\n                                                            }\r\n                                                        }\r\n                                                    } else {\r\n                                                        let i = 0;\r\n                                                        const arr_wrapped_value_values = value.map(value => {\r\n                                                            const property_index = i;\r\n                                                            let property_name;\r\n                                                            if (property_names) {\r\n                                                                property_name = property_names[property_index];\r\n                                                            }\r\n                                                            const wrapped_value = new Data_Value({context, value});\r\n                                                            wrapped_value.on('change', e => {\r\n                                                                const {name} = e;\r\n                                                                if (name === 'value') {\r\n                                                                    const my_e = {\r\n                                                                        name,\r\n                                                                        event_originator: wrapped_value,\r\n                                                                        parent_event: e,\r\n                                                                        value: data_value.toImmutable()\r\n                                                                    }\r\n                                                                    if (property_name) {\r\n                                                                        my_e.property_name = property_name;\r\n                                                                    }\r\n                                                                    my_e.property_index = property_index;\r\n                                                                    data_value.raise('change', my_e);\r\n                                                                }\r\n                                                            })\r\n                                                            i++;\r\n                                                            return wrapped_value;\r\n                                                        });\r\n                                                        local_js_value = arr_wrapped_value_values;\r\n                                                    }\r\n                                                } else {\r\n                                                    local_js_value = value;\r\n                                                }\r\n                                            } else {\r\n                                                console.trace();\r\n                                                throw 'stop - number of properties not found';\r\n                                            }\r\n                                        }\r\n                                        create_array_with_wrapped_items();\r\n                                    } else if (t === 'array') {\r\n                                        const t_value = tof(value);\r\n                                        if (t_value === 'data_value') {\r\n                                            if (is_array(value.value)) {\r\n                                                if (value.value.length === local_js_value.length) {\r\n                                                    each(value.value, (inner_value, idx) => {\r\n                                                        if (inner_value instanceof Data_Model) {\r\n                                                            const matching_local_inner_value = local_js_value[idx];\r\n                                                            if (inner_value.equals(matching_local_inner_value)) {\r\n                                                            } else {\r\n                                                                matching_local_inner_value.value = inner_value;\r\n                                                            }\r\n                                                        } else {\r\n                                                            console.trace();\r\n                                                            throw 'NYI';\r\n                                                        }\r\n                                                    })\r\n                                                } else {\r\n                                                    console.trace();\r\n                                                    throw 'NYI';\r\n                                                }\r\n                                            } else {\r\n                                                console.trace();\r\n                                                throw 'NYI';\r\n                                            }\r\n                                        } else {\r\n                                            if (t_value === 'array') {\r\n                                                if (local_js_value.length === value.length) {\r\n                                                    const l = value.length;\r\n                                                    let all_local_js_items_are_data_model = true, c = 0;\r\n                                                    do {\r\n                                                        const local_item = local_js_value[c];\r\n                                                        if (!(local_item instanceof Data_Model)) {\r\n                                                            all_local_js_items_are_data_model = false;\r\n                                                        }\r\n                                                        c++;\r\n                                                    } while (all_local_js_items_are_data_model && c < l);\r\n                                                    if (all_local_js_items_are_data_model) {\r\n                                                        let c = 0;\r\n                                                        do {\r\n                                                            const local_item = local_js_value[c];\r\n                                                            local_item.value = value[c];\r\n                                                            c++;\r\n                                                        } while (c < l);\r\n                                                    } else {\r\n                                                        console.trace();\r\n                                                        throw 'NYI';\r\n                                                    }\r\n                                                } else {\r\n                                                    console.trace();\r\n                                                    throw 'NYI';\r\n                                                }\r\n                                            } else {\r\n                                                console.log('value', value);\r\n                                                console.trace();\r\n                                                throw 'NYI';\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                    }\r\n                                } else {\r\n                                }\r\n                            }\r\n                            array_specific_value_processing();\r\n                            const general_value_processing = () => {\r\n                                if (local_js_value instanceof Base_Data_Value) {\r\n                                    console.log('existing local_js_value instanceof Data_Value');\r\n                                    console.log('local_js_value.value', local_js_value.value);\r\n                                    console.log('local_js_value.data_type.name', local_js_value.data_type.name);\r\n                                    console.trace();\r\n                                    throw 'NYI';\r\n                                } else if (local_js_value instanceof Array) {\r\n                                    if (value instanceof Data_Model) { \r\n                                        if (value.equals(local_js_value)) {\r\n                                        } else {\r\n                                            console.log('value', value);\r\n                                            console.log('local_js_value', local_js_value);\r\n                                            console.trace();\r\n                                            throw 'NYI';\r\n                                        }\r\n                                    } else if (value instanceof Array) {\r\n                                        if (property_names.length === value.length) {\r\n                                            if (property_data_types) {\r\n                                                const num_properties = property_names.length;\r\n                                                for (let i_property = 0; i_property < num_properties; i_property++) {\r\n                                                    const name = property_names[i_property];\r\n                                                    const data_type = property_data_types[i_property];\r\n                                                    if (local_js_value[i_property] instanceof Data_Value) {\r\n                                                        local_js_value[i_property].value = value[i_property];\r\n                                                    } else {\r\n                                                        console.trace();\r\n                                                        throw 'NYI';\r\n                                                    }\r\n                                                }\r\n                                                if (numbered_property_access && !_numbered_property_access_has_been_set_up) {\r\n                                                    for (let i_property = 0; i_property < num_properties; i_property++) {\r\n                                                        const name = property_names[i_property];\r\n                                                        const data_type = property_data_types[i_property];\r\n                                                        Object.defineProperty(data_value, i_property, {\r\n                                                            get() {\r\n                                                                return local_js_value[i_property];\r\n                                                            },\r\n                                                            set(value) {\r\n                                                                const item_already_there = local_js_value[i_property];\r\n                                                                if (item_already_there instanceof Data_Model) {\r\n                                                                    item_already_there.value = value;\r\n                                                                } else {\r\n                                                                    console.log('item_already_there', item_already_there);\r\n                                                                    console.trace();\r\n                                                                    throw 'stop';\r\n                                                                }\r\n                                                                if (value instanceof Data_Model) {\r\n                                                                } else {\r\n                                                                }\r\n                                                            }\r\n                                                        })\r\n                                                    }\r\n                                                    Object.defineProperty(data_value, 'length', {\r\n                                                        get() {\r\n                                                            return local_js_value.length;\r\n                                                        }\r\n                                                    });\r\n                                                    _numbered_property_access_has_been_set_up = true;\r\n                                                }\r\n                                                if (named_property_access && !_named_property_access_has_been_set_up) {\r\n                                                    if (numbered_property_access) {\r\n                                                        if (property_names) {\r\n                                                            for (let i_property = 0; i_property < num_properties; i_property++) {\r\n                                                                const name = property_names[i_property];\r\n                                                                const data_type = property_data_types[i_property];\r\n                                                                Object.defineProperty(data_value, name, {\r\n                                                                    get() {\r\n                                                                        return local_js_value[i_property];\r\n                                                                    },\r\n                                                                    set(value) {\r\n                                                                        const item_already_there = local_js_value[i_property];\r\n                                                                        if (item_already_there instanceof Data_Model) {\r\n                                                                            item_already_there.value = value;\r\n                                                                        } else {\r\n                                                                            console.log('item_already_there', item_already_there);\r\n                                                                            console.trace();\r\n                                                                            throw 'stop';\r\n                                                                        }\r\n                                                                    }\r\n                                                                })\r\n                                                            }\r\n                                                        }\r\n                                                        if (abbreviated_property_names) {\r\n                                                            for (let i_property = 0; i_property < num_properties; i_property++) {\r\n                                                                const name = abbreviated_property_names[i_property];\r\n                                                                const data_type = property_data_types[i_property];\r\n                                                                Object.defineProperty(data_value, name, {\r\n                                                                    get() {\r\n                                                                        return local_js_value[i_property];\r\n                                                                    },\r\n                                                                    set(value) {\r\n                                                                        const item_already_there = local_js_value[i_property];\r\n                                                                        if (item_already_there instanceof Data_Model) {\r\n                                                                            item_already_there.value = value;\r\n                                                                        } else {\r\n                                                                            console.log('item_already_there', item_already_there);\r\n                                                                            console.trace();\r\n                                                                            throw 'stop';\r\n                                                                        }\r\n                                                                        if (value instanceof Data_Model) {\r\n                                                                        } else {\r\n                                                                        }\r\n                                                                    }\r\n                                                                })\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                    _named_property_access_has_been_set_up = true;\r\n                                                }\r\n                                            }\r\n                                        } else {\r\n                                            console.trace();\r\n                                            throw 'NYI';\r\n                                        }\r\n                                    } else {\r\n                                        console.log('value', value);\r\n                                        console.log('local_js_value', local_js_value);\r\n                                        console.log('value_equals_current', value_equals_current);\r\n                                        console.log('immu', immu);\r\n                                        console.trace();\r\n                                        throw 'NYI';\r\n                                    }\r\n                                } else {\r\n                                    if (value instanceof Data_Model) {\r\n                                        if (value.data_type === data_value.data_type) {\r\n                                            const tvv = tof(value.value);\r\n                                            if (tvv === 'number' || tvv === 'string' || tvv === 'boolean') {\r\n                                                local_js_value = value.value;\r\n                                            } else {\r\n                                                console.trace();\r\n                                                throw 'NYI';\r\n                                            }\r\n                                        } else {\r\n                                            console.trace();\r\n                                            throw 'NYI';\r\n                                        }\r\n                                    } else {\r\n                                        local_js_value = value;\r\n                                    }\r\n                                    data_value.raise('change', {\r\n                                        name: 'value',\r\n                                        old: immu,\r\n                                        value: value\r\n                                    });\r\n                                    prev_outer_value = current_outer_value;\r\n                                }\r\n                            }\r\n                            general_value_processing();\r\n                        }\r\n\r\n                        do_actual_set(value);\r\n\r\n\r\n                    } else {\r\n                    }\r\n                    \r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    if (data_type === String) {\r\n        define_string_value_property();\r\n    } else if (data_type instanceof Data_Type) {\r\n        define_data_type_typed_value_property();\r\n    } else {\r\n        console.trace();\r\n        throw 'NYI';\r\n    }\r\n\r\n\r\n}\r\n\r\nmodule.exports = setup_data_value_data_type_set;", "var jsgui = require('lang-mini');\r\nconst {more_general_equals} = require('./tools');\r\nconst Base_Data_Value = require('./Base_Data_Value');\r\nconst Value_Set_Attempt = require('./Value_Set_Attempt');\r\nconst Data_Model = require('../Data_Model');\r\nconst Immutable_Data_Model = require('./Immutable_Data_Model');\r\nconst Immutable_Data_Value = require('./Immutable_Data_Value');\r\nconst {is_defined, input_processors, field, tof, each, is_array, Data_Type} = jsgui;\r\n\r\n\r\n\r\nconst setup_data_value_data_type_set = require('./setup_data_value_data_type_set');\r\n// Maybe make a more universal Data_Model system???\r\n\r\n\r\n// For the moment improve, test, and refactor this.\r\n\r\n// Do want to have some kind of validation status updates.\r\n\r\n// Maybe deal with 2 models as a pair.\r\n//   Synced, but possibly different data types.\r\nlet util;\r\nif (typeof window === 'undefined') {\r\n    const str_utl = 'util';\r\n    util = require(str_utl);    \r\n}\r\nconst lpurple = x => '\\x1b[38;5;129m' + x + '\\x1b[0m';\r\nconst validate_data_value = data_value => {\r\n    const {data_type} = data_value;\r\n    if (data_type) {\r\n        return data_type.validate(data_value);\r\n    } else {\r\n        return true;\r\n    }\r\n}\r\n\r\n// And attempt_set_value...\r\n\r\n// Maybe we need a Value_Set_Operator class?\r\n// Operator class carries out an operation on something.\r\n\r\n// Data_Value_Set_Operator???\r\n//  Data_Value_Set_Operator_Validator\r\n//  Data_Value_Set_Operator_Input_Transformer (eg parser)\r\n//  \r\n\r\n// Data_Model_Property class even???\r\n\r\n// data value synchronisation....????\r\n\r\n\r\n// And a Base_Data_Value too perhaps, that Data_Number and Data_String would inherit from???\r\n\r\n\r\n\r\n// Want to define relatively simply what this needs to do.\r\n//   Store a value.\r\n//   Store a value with a specified type.\r\n//   Validate changes\r\n//   Raise change events when the value is changed\r\n\r\n\r\n// May well be worth reimplementing this with simpler code.\r\n//   However, want to better test this, and syncing them where types differ.\r\n\r\n// Automatic conversion of types - while keeping the code simple / compact?\r\n\r\n// How could parts of this be moved to a separate file?\r\n//  eg setup_Data_Value_typed_set ????\r\n\r\n// Maybe when .set is called, always run create_set, always make a Value_Set_Attempt object, raise various events concerning setting\r\n// eg begin-set-attempt\r\n//    validate-set-attempt\r\n\r\n// ????\r\n\r\n\r\n\r\n\r\n\r\n// Making a Data_Array or Data_Object could help a lot here, keeping the Data_Value code itself simple.\r\n//   Or continue with this, making the test cases, and fixing the error(s) that stops it working properly.\r\n//   Refactoring code to helper file(s) could help a lot.\r\n\r\n// Maybe something like a mixin for Data_Value functionality?\r\n//   Only uses the mixin function if appropriate to the data_type / other settings.\r\n\r\n// // Want a really simple high-level API if possible.\r\n// See about making a greatly simplified Data_Value.\r\n//   Maybe working on some lower level code will help most, such as field, property?\r\n//   Data types and validation in lang-mini, use it here????\r\n\r\n// Supporting Data_Type should be relatively simple, see what functionality in Data_Type will help.\r\n//   Should be able to avoid needing hugh functions and code paths.\r\n\r\n// Maybe need a bit more API complexity to do with imput parsing / transformations.\r\n\r\n// or a plan_set function, produces a set_plan, which would include the parsing having been done already.\r\n\r\n// \r\n\r\nclass Data_Value extends Base_Data_Value {\r\n    constructor(spec = {}) {\r\n\r\n        //let using_value_as_spec;\r\n        if (typeof spec !== 'object') {\r\n            spec = {\r\n                value: spec\r\n            }\r\n        }\r\n\r\n        super(spec);\r\n\r\n\r\n        this.__data_value = true;\r\n        this.__type_name = 'data_value';\r\n        const that = this;\r\n        if (spec.data_type) {\r\n            this.data_type = spec.data_type;\r\n        } else if (spec.value?.data_type) {\r\n            this.data_type = spec.value.data_type;\r\n        }\r\n        if (spec.context) {\r\n            this.context = spec.context;\r\n        }\r\n        const {data_type, context} = this;\r\n        \r\n\r\n        // If it previously did not validate, but it then does....\r\n        // Maybe some other issues with why 'set' is not working properly accross cases.\r\n\r\n        // Sure gets complex here!!!!\r\n\r\n        // Maybe better to break down the parts into smaller and separate and named logic.\r\n        //   Typed_Data_Value perhaps????\r\n        //     Then the type specific coding in there...???\r\n\r\n\r\n\r\n        if (data_type) {\r\n            //console.log('data_type', data_type);\r\n\r\n\r\n            setup_data_value_data_type_set(this, data_type);\r\n\r\n            // string typed??? String typed????\r\n\r\n            \r\n            if (spec.value) {\r\n                this.value = spec.value;\r\n            }\r\n            \r\n        } else {\r\n\r\n            // just a field????\r\n            //   maybe it's not properly recohered on the client-side.\r\n\r\n            //console.log('* Data_Value setting .value as a field');\r\n            //  does not seem to be working properly here.\r\n            //    maybe look into this further, when not using a data_type.\r\n\r\n            // A more advanced system here than just 'field'?\r\n\r\n            // Some kind of pre-set event. Validation could then take place, and send something back to the code that would\r\n            //   do the set, giving a reason why the set operation will / should not take place.\r\n\r\n\r\n            field(this, 'value', spec.value);\r\n        }\r\n        \r\n\r\n        // This could use some functions that get generalised from the setter.\r\n        //   Could use the same code paths / use attempt_set_value when set is called.\r\n\r\n        // maybe a .last_set_succeeded value.\r\n        //   also the 'validate' event.\r\n\r\n        // Should break things up into their more logical pieces, allowing code reuse.\r\n        //   Being much more explicit would help with some things too.\r\n\r\n\r\n\r\n\r\n        \r\n        const attempt_set_value = this.attempt_set_value = (value) => {\r\n            const get_local_js_value_copy = () => {\r\n                // TODO <BUG001>: local_js_value is not defined - should this be 'value' or 'this._'?\r\n                // See BUGS.md for details and proposed fixes\r\n                const tljsv = tof(local_js_value);\r\n                if (tljsv === 'undefined' || tljsv === 'string' || tljsv === 'number') {\r\n                    return local_js_value;\r\n                } else {\r\n                    console.log('local_js_value', local_js_value);\r\n                    console.log('tljsv', tljsv);\r\n                    console.trace();\r\n                    throw 'stop';\r\n                }\r\n            }\r\n\r\n            // There will be some kind of parsing going on somehow.\r\n\r\n            const old_local_js_value = get_local_js_value_copy();\r\n            const old_equals_new = more_general_equals(old_local_js_value, value);\r\n            if (old_equals_new === true) {\r\n\r\n                // But no validation event raised....\r\n\r\n                return new Value_Set_Attempt({success: false, equal_values: true});\r\n            } else {\r\n                if (this.data_type === undefined) {\r\n                    local_js_value = value;\r\n                    const o_change = {\r\n                        name: 'value',\r\n                        old: old_local_js_value,\r\n                        value\r\n                    }\r\n                    this.raise('change', o_change);\r\n                    return new Value_Set_Attempt({success: true, value});\r\n                } else if (this.data_type instanceof Data_Type) {\r\n                    const t_value = tof(value);\r\n                    if (t_value === 'string') {\r\n                        if (this.data_type.parse_string) {\r\n                            const parsed_value = this.data_type.parse_string(value);\r\n                            if (parsed_value !== undefined) {\r\n                                const res = attempt_set_value(parsed_value);\r\n                                res.parsed = true;\r\n                                return res;\r\n                            } else {\r\n                                return new Value_Set_Attempt({success: false, value});\r\n                            }\r\n                        } else {\r\n                            console.trace();\r\n                            throw 'NYI';\r\n                        }\r\n                    } else {\r\n                        if (t_value === 'number') {\r\n                            const validation = this.data_type.validate(value);\r\n                            if (validation === true) {\r\n                                local_js_value = value;\r\n                                const o_change = {\r\n                                    name: 'value',\r\n                                    old: old_local_js_value,\r\n                                    value\r\n                                }\r\n                                this.raise('change', o_change);\r\n                                return new Value_Set_Attempt({success: true, old: old_local_js_value, value});\r\n                            } else {\r\n                                return new Value_Set_Attempt({success: false, value});\r\n                            }\r\n                        } else {\r\n                            console.log('t_value', t_value);\r\n                            console.trace();\r\n                            throw 'NYI';\r\n                        }\r\n                    }\r\n                } else if (this.data_type === String) {\r\n                    if (typeof value === 'number') {\r\n                        const res = attempt_set_value(value + '');\r\n                        res.data_type_transformation = ['number', 'string'];\r\n                        return res;\r\n                    } else if (typeof value === 'string') {\r\n                        local_js_value = value;\r\n                        const o_change = {\r\n                            name: 'value',\r\n                            old: old_local_js_value,\r\n                            value\r\n                        }\r\n                        this.raise('change', o_change);\r\n                        return new Value_Set_Attempt({success: true, old: old_local_js_value, value});\r\n                    } else {\r\n                        console.trace();\r\n                        throw 'NYI';\r\n                    }\r\n                } else {\r\n                    console.log('this.data_type', this.data_type);\r\n                    console.trace();\r\n                    throw 'NYI';\r\n                }\r\n            }\r\n        }\r\n        this.__type = 'data_value';\r\n        this._relationships = {};\r\n    }\r\n    toImmutable() {\r\n        const {context, data_type, value} = this;\r\n        const res = new Immutable_Data_Value({\r\n            context, data_type, value\r\n        });\r\n        return res;\r\n    }\r\n    'toObject'() {\r\n        return this._;\r\n    }\r\n    'set'(val) {\r\n        this.value = val;\r\n    }\r\n    'get'() {\r\n        return this.value;\r\n    }\r\n    equals(other) {\r\n        return more_general_equals(this, other);\r\n    }\r\n    'toString'() {\r\n        return this.get() + '';\r\n    }\r\n    'toJSON'() {\r\n        const t_value = tof(this.value);\r\n        if (t_value === 'string') {\r\n            return JSON.stringify(this.value);\r\n        } else\r\n        if (t_value === 'number') {\r\n            return this.value + '';\r\n        } else if (t_value === 'boolean' ) {\r\n            this.value ? 'true' : 'false'\r\n        } else if (t_value === 'array') {\r\n            return JSON.stringify(this.value);\r\n        } else if (t_value === 'data_value') {\r\n            return this.value.toJSON();\r\n        } else if (t_value === 'undefined') {\r\n            return 'null'\r\n        } else if (t_value === 'null') {\r\n            return 'null'\r\n        } else {\r\n            console.log('toJSON this.value', this.value);\r\n            console.log('t_value', t_value);\r\n            console.trace();\r\n            throw 'NYI';\r\n        }\r\n    }\r\n    'clone'() {\r\n        console.trace();\r\n        throw 'NYI';\r\n        var res = new Data_Value({\r\n            'value': this._\r\n        });\r\n        return res;\r\n    }\r\n    '_id'() {\r\n        if (this.__id) return this.__id;\r\n        if (this.context) {\r\n            this.__id = this.context.new_id(this.__type_name || this.__type);\r\n        } else {\r\n            if (!is_defined(this.__id)) {\r\n                throw 'Data_Value should have context';\r\n                this.__id = new_data_value_id();\r\n            }\r\n        }\r\n        return this.__id;\r\n    }\r\n};\r\n\r\nData_Value.sync = (a, b) => {\r\n    if (a instanceof Base_Data_Value && b instanceof Base_Data_Value) {\r\n\r\n        a.on('change', e => {\r\n            const {name, old, value} = e;\r\n            if (name === 'value') {\r\n                b.value = value;\r\n            }\r\n        });\r\n\r\n        b.on('change', e => {\r\n            const {name, old, value} = e;\r\n            if (name === 'value') {\r\n                a.value = value;\r\n            }\r\n        });\r\n\r\n    } else {\r\n        console.trace();\r\n        throw 'Unexpected types';\r\n    }\r\n\r\n}\r\n\r\nif (util) {\r\n    Data_Value.prototype[util.inspect.custom] = function(depth, opts) {\r\n        const {value} = this;\r\n        const tv = tof(value);\r\n        if (tv === 'number' || tv === 'string' || tv === 'boolean') {\r\n            return lpurple(value);\r\n        } else {\r\n            if (value instanceof Array) {\r\n                let res = lpurple('[ ');\r\n                let first = true;\r\n                each(value, item => {\r\n                    if (!first) {\r\n                        res = res + lpurple(', ');\r\n                    } else {\r\n                        first = false;\r\n                    }\r\n                    if (item instanceof Data_Model) {\r\n                        const item_value = item.value;\r\n                        res = res + lpurple(item_value)\r\n                    } else [\r\n                        res = res + lpurple(item)\r\n                    ]\r\n                })\r\n                res = res + lpurple(' ]');\r\n                return res;\r\n            } else if (value instanceof Data_Model) {\r\n                return value[util.inspect.custom]();\r\n            } else {\r\n                return lpurple(this.value);\r\n            }\r\n        }\r\n    }\r\n}\r\nmodule.exports = Data_Value;\r\n", "module.exports = require('./new/Data_Value')", "class Node {\r\n\tconstructor(spec) {\r\n\t\t// previous and next held as an array.\r\n\r\n\t\t// neighbours\r\n\t\t//  it could have no neighbours.\r\n\t\t//   a list will be empty, with no nodes.\r\n\t\t//   then it will have a node with no neighbours, which is both the first and the last node.\r\n\t\t//   then 2 nodes, 1 with each neighbour\r\n\t\t//   then 3 nodes, with the end nodes still having no neighbours.\r\n\r\n\t\t// This will just be for iterating through the list, adding, removing, doing basic operations.\r\n\t\t//  I may leave inefficient operations out, so the linked list gets used for what it is best at.\r\n\t\t//   But the inefficient/less efficient operations may be done to lower amounts, such as 12, by maintaining small LLs in data structures such as B+ trees.\r\n\r\n\t\tthis.neighbours = spec.neighbours || [];\r\n\r\n\t\t// Adding and removing while maintaining an order?\r\n\t\tthis.value = spec.value;\r\n\r\n\t\t// parent\r\n\r\n\t}\r\n\t'previous'() {\r\n\t\treturn this.neighbours[0];\r\n\t}\r\n\t'next'() {\r\n\t\treturn this.neighbours[1];\r\n\t}\r\n};\r\n\r\n// Do these linked list nodes need to have anything?\r\n//  Just the means to insert their nodes etc?\r\n//   Then their nodes could be made to carry other data by other components.\r\n\r\n// Doubly_Linked_List could extend Node.\r\n//  That way it can be put in a tree, and used for holding the data in a tree.\r\n//  Want a B+ tree so that items can get put in correctly.\r\n\r\n// Having a whole tree made up of a doubly linked list, with other structures indexing it?\r\n//  Need some more fundamental data structures. The Collection and Data_Object will be good, but it will be good to store the fields in an appropriate object.\r\n\r\n\r\n// Ordered_KVS - may be a useful one.\r\n//  Would have the double linked list inside and map.\r\n\r\n\r\n// Mapped_Linked_List? would need to know what field to look at.\r\n\r\n/*\r\nvar nodify = function(fn) {\r\n\r\n\tvar res = function(val) {\r\n\t\tif (val instanceof Node) {\r\n\t\t\treturn fn(val);\r\n\t\t} else {\r\n\t\t\tvar node = new Node({'value': val});\r\n\t\t\treturn fn(node);\r\n\t\t}\r\n\r\n\t};\r\n\treturn res;\r\n\r\n}\r\n*/\r\n\r\nclass Doubly_Linked_List {\r\n\tconstructor(spec) {\r\n\t\t// spec could be the initial items for the list.\r\n\r\n\t\tthis.first = null;\r\n\t\tthis.last = null;\r\n\r\n\t\tthis.length = 0;\r\n\t\t// harder to maintain the length when nodes could be moved around the list.\r\n\t\t//  would need to be able to see if a node is in the list to begin with...\r\n\t\t//   so each node could have a container object, and if it is set to the list already when an insert is done, then the list will be able to keep track of\r\n\t\t//    its length. That would be better than having to count them.\r\n\r\n\t}\r\n\r\n\t'each_node'(callback) {\r\n\t\t//console.log('each_node this.length ' + this.length);\r\n\r\n\t\tvar node = this.first;\r\n\t\tvar ctu = true;\r\n\t\tvar stop = function () {\r\n\t\t\tctu = false;\r\n\t\t};\r\n\t\twhile (node && ctu) {\r\n\t\t\tcallback(node, stop);\r\n\t\t\tnode = node.neighbours[1];\r\n\t\t}\r\n\t}\r\n\r\n\t'each'(callback) {\r\n\t\tthis.each_node(function (node, stop) {\r\n\t\t\tcallback(node.value, stop);\r\n\t\t});\r\n\t}\r\n\r\n\t'remove'(node) {\r\n\r\n\t\t// can not remove a value... have to remove a node.\r\n\t\t//  this will be more useful when there is a map of values.\r\n\r\n\t\tif (node.neighbours[0]) {\r\n\t\t\tnode.neighbours[0].neighbours[1] = node.neighbours[1];\r\n\t\t} else {\r\n\t\t\tthis.first = node.neighbours[1];\r\n\t\t}\r\n\r\n\t\tif (node.neighbours[1]) {\r\n\t\t\tnode.neighbours[1].neighbours[0] = node.neighbours[0];\r\n\t\t} else {\r\n\t\t\tthis.last = node.neighbours[0];\r\n\t\t}\r\n\r\n\t\tnode.neighbours = [];\r\n\r\n\t\tif (node.parent == this) {\r\n\t\t\tdelete node.parent;\r\n\t\t\tthis.length--;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// check to see if the item is a 'node' object.\r\n\t//  if it is, can insert it as a node, otherwise create the node object and insert it.\r\n\t//   a bit like wrapping values in Data_Value.\r\n\r\n\t'insert_beginning'(val) {\r\n\t\tif (val instanceof Node) {\r\n\t\t\tif (this.first == null) {\r\n\t\t\t\tthis.first = val;\r\n\t\t\t\tthis.last = val;\r\n\t\t\t\tval.neighbours = [];\r\n\t\t\t\tif (val.parent != this) {\r\n\t\t\t\t\tval.parent = this;\r\n\t\t\t\t\tthis.length++;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// insert it before first item.\r\n\t\t\t\tthis.insert_before(val, this.first);\r\n\t\t\t}\r\n\t\t\treturn val;\r\n\t\t} else {\r\n\t\t\tvar node = new Node({ 'value': val });\r\n\t\t\treturn this.insert_beginning(node);\r\n\t\t}\r\n\t}\r\n\r\n\t// could use a nodify function.\r\n\t//  or ensure_data_wrapper\r\n\r\n\t'insert_before'(val, node) {\r\n\t\t// check to see if the new value is a node.\r\n\r\n\t\tif (val instanceof Node) {\r\n\t\t\tval.neighbours = [node.neighbours[0], node];\r\n\t\t\tif (node.neighbours[0] == null) {\r\n\t\t\t\tthis.first = val;\r\n\t\t\t} else {\r\n\t\t\t\tnode.neighbours[0].neighbours[1] = val;\r\n\t\t\t}\r\n\t\t\tnode.neighbours[0] = val;\r\n\r\n\t\t\tif (val.parent != this) {\r\n\t\t\t\tval.parent = this;\r\n\t\t\t\tthis.length++;\r\n\t\t\t}\r\n\t\t\treturn val;\r\n\t\t} else {\r\n\t\t\tvar new_node = new Node({ 'value': val });\r\n\t\t\treturn this.insert_before(new_node, node);\r\n\t\t}\r\n\t}\r\n\r\n\t'insert_after'(val, node) {\r\n\t\tif (val instanceof Node) {\r\n\t\t\t//console.log('insert after node ' + node);\r\n\r\n\t\t\tval.neighbours = [node, node.neighbours[1]];\r\n\t\t\tif (node.neighbours[1] == null) {\r\n\t\t\t\tthis.last = val;\r\n\t\t\t} else {\r\n\t\t\t\tnode.neighbours[1].neighbours[0] = val;\r\n\r\n\t\t\t}\r\n\t\t\tnode.neighbours[1] = val;\r\n\r\n\t\t\t//node.neighbours[0].neighbours[1] = val;\r\n\t\t\tif (val.parent != this) {\r\n\t\t\t\tval.parent = this;\r\n\t\t\t\tthis.length++;\r\n\t\t\t}\r\n\t\t\treturn val;\r\n\t\t} else {\r\n\t\t\tvar new_node = new Node({ 'value': val });\r\n\t\t\treturn this.insert_after(new_node, node);\r\n\t\t}\r\n\t}\r\n\t// not wrapping the item in a node?\r\n\r\n\t// want one where we are not pushing nodes, but items stored in nodes.\r\n\t//  Perhaps this is a Data_Value?\r\n\t// Or a doubly_linked_node.\r\n\r\n\t// Doubly_Linked_Node could take the form [prev, item, next]\r\n\t//  [prev, item, key, next]? probably not\r\n\r\n\t//  Maybe we could put more private variables, such as 'neighbours' as a var within the init statement.\r\n\r\n\t'push'(val) {\r\n\r\n\t\tif (val instanceof Node) {\r\n\t\t\tif (this.last == null) {\r\n\t\t\t\tthis.insert_beginning(val);\r\n\t\t\t} else {\r\n\t\t\t\treturn this.insert_after(val, this.last);\r\n\t\t\t\t/*\r\n\t\t\t\t var last = this.last;\r\n\t\t\t\t last.neighbours[1] = val;\r\n\t\t\t\t this.last = val;\r\n\r\n\t\t\t\t //console.log('val.parent ' + val.parent);\r\n\t\t\t\t //console.log('this ' + this);\r\n\r\n\t\t\t\t if (val.parent != this) {\r\n\t\t\t\t val.parent = this;\r\n\t\t\t\t this.length++;\r\n\t\t\t\t }\r\n\t\t\t\t */\r\n\t\t\t}\r\n\t\t\treturn val;\r\n\t\t} else {\r\n\t\t\tvar new_node = new Node({ 'value': val });\r\n\t\t\treturn this.push(new_node);\r\n\t\t}\r\n\t\t// the item gets wrapped in a node.?\r\n\t}\r\n};\r\n\r\nDoubly_Linked_List.Node = Node;\r\n\r\nmodule.exports = Doubly_Linked_List;\r\n", "/**\r\n * Created by James on 16/09/2016.\r\n */\r\n\r\nvar Doubly_Linked_List = require('./doubly-linked-list');\r\n\r\nclass Ordered_KVS {\r\n\tconstructor() {\r\n\t\tthis.dll = new Doubly_Linked_List();\r\n\t\tthis.node_map = {};\r\n\t}\r\n\t'length'() {\r\n\t\treturn this.dll.length;\r\n\t}\r\n\t'put'(key, value) {\r\n\t\t// does it already exist with that key - if so that item gets replaced, stays in the same position?\r\n\t\t// or maybe push - that means the item that goes in gets added to the end.\r\n\t\treturn this.push(key, value);\r\n\t}\r\n\t'get'(key) {\r\n\t\t//console.log('get key ' + key);\r\n\t\tvar kvs_node = this.node_map[key];\r\n\t\tif (kvs_node) {\r\n\t\t\treturn kvs_node.value;\r\n\t\t} else {\r\n\t\t\treturn undefined;\r\n\t\t\t//throw 'Missing KVS node: ' + key;\r\n\t\t}\r\n\t}\r\n\t'push'(key, value) {\r\n\t\t// does it already have a node with that key?\r\n\t\tvar node = this.dll.push(value);\r\n\t\tnode.key = key;\r\n\t\tthis.node_map[key] = node;\r\n\t}\r\n\t'out'(key) {\r\n\t\tvar node = this.node_map[key];\r\n\t\t//delete node.key;\r\n\t\tdelete this.node_map[key]\r\n\r\n\t\tthis.dll.remove(node);\r\n\t}\r\n\t'each'(callback) {\r\n\t\t// return the key as well as the value in the callback.\r\n\t\tthis.dll.each_node(function (node, stop) {\r\n\t\t\tcallback(node.key, node.value, stop);\r\n\t\t});\r\n\t\t//this.dll.each(callback);\r\n\t}\r\n\t'values'() {\r\n\t\tvar res = [];\r\n\t\tthis.each(function (key, value) {\r\n\t\t\tres.push(value);\r\n\t\t});\r\n\t\treturn res;\r\n\t}\r\n\t'keys'() {\r\n\t\tvar res = [];\r\n\t\tthis.each(function (key, value) {\r\n\t\t\tres.push(key);\r\n\t\t});\r\n\t\treturn res;\r\n\t}\r\n\t'keys_and_values'() {\r\n\t\tvar res = [];\r\n\t\tthis.each(function (key, value) {\r\n\t\t\tres.push([key, value]);\r\n\t\t});\r\n\t\treturn res;\r\n\t}\r\n\t// will not need to deal with nodes on the user level.\r\n\t// want to be able to add and remove items, normally items will get pushed to the end of the list.\r\n\r\n\t// will provide a key and value in order to do this.\r\n};\r\n\r\nmodule.exports = Ordered_KVS;", "/**\r\n * Created by James on 16/09/2016.\r\n */\r\n\r\n\r\n// This could be useful for a few things, like storing tables in a DB\r\n// schema.\r\n// Maybe quite a few more things.\r\n\r\n// May make some objects with friendlier interfaces...\r\n//  And may use collection for this to store lists of strings.\r\n//  Like CSS flags at the moment.\r\n\r\n// Uses private variables.\r\nclass Ordered_String_List {\r\n\tconstructor() {\r\n\t\t// console.log('init osl sig ' + sig);\r\n\r\n\t\tvar arr = [];\r\n\t\tvar dict_indexes = {};\r\n\r\n\t\tvar reindex_dict_indexes = function () {\r\n\t\t\tdict_indexes = {};\r\n\t\t\tfor (var c = 0, l = arr.length; c < l; c++) {\r\n\t\t\t\tdict_indexes[arr[c]] = c;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// (add), remove, get, get_all, has, put, move, splice\r\n\t\tthis.has = function (value) {\r\n\t\t\treturn (typeof dict_indexes[value] !== 'undefined');\r\n\t\t}\r\n\r\n\t\tthis.put = function (value) {\r\n\t\t\t// by default puts it at the end.\r\n\t\t\tif (this.has(value)) {\r\n\t\t\t\t// stays in same place.\r\n\t\t\t\t// arr[dict_indexes[value]]\r\n\t\t\t\t// do nothing\r\n\t\t\t} else {\r\n\t\t\t\tvar index = arr.length;\r\n\t\t\t\tarr.push(value);\r\n\t\t\t\tdict_indexes[value] = index;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.out = function (value) {\r\n\t\t\tif (this.has(value)) {\r\n\t\t\t\tvar idx = dict_indexes[value];\r\n\t\t\t\tarr.splice(idx, 1);\r\n\r\n\t\t\t\tdelete dict_indexes[value];\r\n\r\n\t\t\t\tfor (var c = idx, l = arr.length; c < l; c++) {\r\n\t\t\t\t\tvar i = arr[c];\r\n\t\t\t\t\tdict_indexes[i]--;\r\n\t\t\t\t}\r\n\t\t\t\t// will need the items after it and lower their indexes.\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.toggle = function (value) {\r\n\t\t\tif (this.has(value)) {\r\n\t\t\t\tthis.out(value);\r\n\t\t\t} else {\r\n\t\t\t\tthis.put(value);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.move_value = function (value, index) {\r\n\t\t\tif (this.has(value) && dict_indexes[value] != index) {\r\n\r\n\t\t\t\t// gets removed from current position, causes items after it\r\n\t\t\t\t// to move back.\r\n\t\t\t\t// gets put in new position, gets items after that to move\r\n\t\t\t\t// forwards.\r\n\r\n\t\t\t\tvar old_index = dict_indexes[value];\r\n\t\t\t\tarr.splice(old_index, 1);\r\n\r\n\t\t\t\tarr.splice(index, 0, value);\r\n\r\n\t\t\t\tif (index < old_index) {\r\n\t\t\t\t\t// moving back.\r\n\t\t\t\t\t// dict_indexes[]\r\n\t\t\t\t\tdict_indexes[arr[index]] = index;\r\n\t\t\t\t\t// the index object of the one it\r\n\r\n\t\t\t\t\t// for (var c = index, l = arr.length; c < l; c++) {\r\n\t\t\t\t\tfor (var c = index + 1; c <= old_index; c++) {\r\n\t\t\t\t\t\tdict_indexes[arr[c]]++;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (index > old_index) {\r\n\t\t\t\t\tdict_indexes[arr[index]] = index;\r\n\t\t\t\t\tfor (var c = old_index; c < index; c++) {\r\n\t\t\t\t\t\tdict_indexes[arr[c]]--;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\t// for testing\r\n\r\n\t\tthis._index_scan = function () {\r\n\t\t\tfor (var c = 0, l = arr.length; c < l; c++) {\r\n\t\t\t\tconsole.log('c ' + c + ' arr[c] ' + arr[c] + ' idx '\r\n\t\t\t\t\t+ dict_indexes[arr[c]]);\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tthis.toString = function () {\r\n\t\t\tvar res = arr.join(' ');\r\n\t\t\treturn res;\r\n\t\t}\r\n\r\n\t\tthis.toString.stringify = true;\r\n\r\n\t\tthis.set = (function (val) {\r\n\r\n\t\t\tif (typeof val === 'string') {\r\n\t\t\t\tarr = val.split(' ');\r\n\t\t\t\treindex_dict_indexes();\r\n\t\t\t}\r\n\r\n\t\t\t//if (sig == '[s]') {\r\n\t\t\t//\tarr = a[0].split(' ');\r\n\t\t\t//\t// console.log('arr ' + jsgui.stringify(arr));\r\n\t\t\t//\treindex_dict_indexes();\r\n\t\t\t//}\r\n\t\t});\r\n\r\n\t\t// if (sig == '[s]') {\r\n\t\t// this.set(a[0]);\r\n\t\t// }\r\n\r\n\t\tvar a = arguments;\r\n\t\tif (a.length == 1) {\r\n\t\t\tvar spec = a[0];\r\n\t\t\tif (typeof spec === 'string') {\r\n\t\t\t\t// console.log('setting');\r\n\t\t\t\tthis.set(spec);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n};\r\n\r\nmodule.exports = Ordered_String_List;", "module.exports = require('./old/Collection');", "/**\r\n * Created by James on 16/09/2016.\r\n */\r\n\r\nvar jsgui = require('lang-mini');\r\n//var Data_Structures = require('./jsgui-data-structures');\r\nvar Collection = require('./Data_Model/Collection');\r\n\r\n//var Data_Grid = require('jsgui2-data-grid');\r\n\r\nvar j = jsgui;\r\nvar each = j.each;\r\nvar tof = j.tof;\r\nvar atof = j.atof;\r\nvar is_defined = j.is_defined;\r\nvar fp = j.fp;\r\nvar arrayify = j.arrayify;\r\nvar mapify = j.mapify;\r\nvar get_item_sig = j.get_item_sig;\r\n\r\n\r\n// ta-utils?\r\n// ta-matrix\r\n// ta-tensor\r\n\r\n// Maybe expand lang-mini?\r\n// Could spin out a lang-tools project.\r\n// or jsgui3-lang, which uses lang-tools\r\n//  maybe adds some jsgui specific features.\r\n\r\n// A Matrix or Tensor data type could be very useful for single images.\r\n// A Tensor data type could conveniently hold multiple images\r\n\r\n// A Manifold Nexus would be able to store a Tensor within different storage devices / network addresses, and process them too.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//var B_Plus_Tree = Data_Structures.B_Plus_Tree;\r\n\r\n// would prefer a version that applies to typed arrays.\r\n// uses typed arrays internally\r\n\r\nvar vectorify = function(n_fn) {\r\n\t// Creates a new polymorphic function around the original one.\r\n\r\n\tvar fn_res = fp(function(a, sig) {\r\n\t\t//console.log('vectorified sig ' + sig);\r\n\t\tif (a.l > 2) {\r\n\t\t\tvar res = a[0];\r\n\t\t\tfor ( var c = 1, l = a.l; c < l; c++) {\r\n\t\t\t\tres = fn_res(res, a[c]);\r\n\t\t\t\t// console.log('res ' + res);\r\n\t\t\t}\r\n\t\t\treturn res;\r\n\t\t} else {\r\n\t\t\tif (sig == '[n,n]') {\r\n\t\t\t\treturn n_fn(a[0], a[1]);\r\n\t\t\t} else {\r\n\t\t\t\t// will need go through the first array, and the 2nd... but\r\n\t\t\t\t// will need to compare them.\r\n\t\t\t\tvar ats = atof(a);\r\n\t\t\t\t//console.log('ats ' + stringify(ats));\r\n\t\t\t\tif (ats[0] == 'array') {\r\n\t\t\t\t\tif (ats[1] == 'number') {\r\n\t\t\t\t\t\tvar res = [], n = a[1];\r\n\t\t\t\t\t\teach(a[0], function(v, i) {\r\n\t\t\t\t\t\t\tres.push(fn_res(v, n));\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\treturn res;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (ats[1] == 'array') {\r\n\t\t\t\t\t\tif (ats[0].length != ats[1].length) {\r\n\t\t\t\t\t\t\tthrow 'vector array lengths mismatch';\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvar res = [], arr2 = a[1];\r\n\t\t\t\t\t\t\teach(a[0], function(v, i) {\r\n\t\t\t\t\t\t\t\tres.push(fn_res(v, arr2[i]));\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\treturn res;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\treturn fn_res;\r\n};\r\n\r\nvar n_add = function(n1, n2) {\r\n\treturn n1 + n2;\r\n}, n_subtract = function(n1, n2) {\r\n\treturn n1 - n2;\r\n}, n_multiply = function(n1, n2) {\r\n\treturn n1 * n2;\r\n}, n_divide = function(n1, n2) {\r\n\treturn n1 / n2;\r\n};\r\n\r\n// Simple and fast vector and tensor maths would help.\r\n\r\n// new Vector(4, 3)\r\n//  new Uint8Vector(4, 3);\r\n//  new Uint8Matrix(40, 30);\r\n//  new Uint8Tensor(40, 30, 3, 60);\r\n\r\n\r\nvar v_add = vectorify(n_add), v_subtract = vectorify(n_subtract);\r\n\r\n// these are not the standard, established vector or matrix operations. They\r\n// can be used for scaling of arrays of vectors.\r\nvar v_multiply = vectorify(n_multiply), v_divide = vectorify(n_divide);\r\n\r\nvar vector_magnitude = function(vector) {\r\n\t// may calculate magnitudes of larger dimension vectors too.\r\n\t// alert(tof(vector[0]));\r\n\t// alert(vector[0] ^ 2);\r\n\r\n\tvar res = Math.sqrt((Math.pow(vector[0], 2)) + (Math.pow(vector[1], 2)));\r\n\treturn res;\r\n\r\n};\r\n\r\nvar distance_between_points = function(points) {\r\n\tvar offset = v_subtract(points[1], points[0]);\r\n\t//console.log('offset ' + stringify(offset));\r\n\treturn vector_magnitude(offset);\r\n}\r\n\r\n\r\nvar execute_on_each_simple = function(items, fn) {\r\n\t// currently no arguments provided, there may be in the future / future\r\n\t// versions\r\n\tvar res = [], that = this;\r\n\teach(items, function(i, v) {  // Note: for arrays, each() calls with (value, index)\r\n\t\tres.push(fn.call(that, i)); // function called with item as its only\r\n\t\t\t\t\t\t\t\t\t// parameter (i is the value, v is the index)\r\n\t});\r\n\treturn res;\r\n};\r\n\r\nvar filter_map_by_regex = function(map, regex) {\r\n\tvar res = {};\r\n\teach(map, function(v, i) {  // Note: each() calls with (value, key) for objects\r\n\t\t// if (regex.match(i)) {\r\n\t\tif (i.match(regex)) {\r\n\t\t\tres[i] = v;\r\n\t\t}\r\n\t});\r\n\treturn res;\r\n}\r\n\r\n// May be replaced by a more veristile replacement system, ie input transformation and parsing in schemas.\r\nvar npx = arrayify(function(value) {\r\n\t// don't think we can use arrayify?\r\n\r\n\t// good candidate for pf? but how it deals with array trees...\r\n\t// could have another one, like sf or spf that is simpler in terms of\r\n\t// treating an array in the signature as just one array?\r\n\r\n\tvar res, a = arguments, t = tof(a[0]);\r\n\r\n\t// fn sigs??? performance?\r\n\r\n\tif (t === 'string') {\r\n\t\tres = a[0];\r\n\t} else if (t === 'number') {\r\n\t\tres = a[0] + 'px';\r\n\t}\r\n\treturn res;\r\n});\r\n\r\nvar no_px = arrayify(fp(function(a, sig) {\r\n\t// no_px - removes the 'px' if it ends with px\r\n\t// Generally returns a number.\r\n\t// value\r\n\tvar re = /px$/, res;\r\n\tif (sig == '[s]' && re.test(a[0])) {\r\n\t\tres = parseInt(a[0]);\r\n\t} else {\r\n\t\tres = a[0];\r\n\t}\r\n\t;\r\n\treturn res;\r\n}));\r\n\r\nvar arr_ltrb = [ 'left', 'top', 'right', 'bottom' ];\r\n\r\nvar str_arr_mapify = function(fn) {\r\n\tvar res = fp(function(a, sig) {\r\n\t\tif (a.l == 1) {\r\n\t\t\tif (sig == '[s]') {\r\n\t\t\t\tvar s_pn = a[0].split(' ');\r\n\t\t\t\t// console.log('s_pn ' + s_pn.length);\r\n\r\n\t\t\t\tif (s_pn.length > 1) {\r\n\t\t\t\t\treturn res.call(this, s_pn);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn fn.call(this, a[0]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (tof(a[0]) == 'array') {\r\n\t\t\t\tvar res2 = {}, that = this;\r\n\r\n\t\t\t\teach(a[0], function(i, v) {\r\n\t\t\t\t\tres2[v] = fn.call(that, v);\r\n\t\t\t\t});\r\n\t\t\t\treturn res2;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\treturn res;\r\n};\r\n\r\n\r\nvar arr_hex_chars = [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\r\n\t'A', 'B', 'C', 'D', 'E', 'F' ];\r\nvar dict_hex_to_bin = {\r\n\t'0' : 0,\r\n\t'1' : 1,\r\n\t'2' : 2,\r\n\t'3' : 3,\r\n\t'4' : 4,\r\n\t'5' : 5,\r\n\t'6' : 6,\r\n\t'7' : 7,\r\n\t'8' : 8,\r\n\t'9' : 9,\r\n\t'A' : 10,\r\n\t'B' : 11,\r\n\t'C' : 12,\r\n\t'D' : 13,\r\n\t'E' : 14,\r\n\t'F' : 15\r\n};\r\nvar str_hex_to_int = function(str_hex) {\r\n\tstr_hex = str_hex.toUpperCase();\r\n\tvar i = str_hex.length; // or 10\r\n\tvar res = 0, exp = 1;\r\n\twhile (i--) {\r\n\t\tvar i_part = dict_hex_to_bin[str_hex.charAt(i)];\r\n\t\tvar ip2 = i_part * exp;\r\n\t\tres = res + ip2;\r\n\t\texp = exp * 16;\r\n\t\t// ...\r\n\t}\r\n\t;\r\n\treturn res;\r\n};\r\nvar byte_int_to_str_hex_2 = function(byte_int) {\r\n\tvar a = Math.floor(byte_int / 16), b = byte_int % 16, sa = arr_hex_chars[a], sb = arr_hex_chars[b], res = sa\r\n\t\t+ sb;\r\n\treturn res;\r\n};\r\nvar arr_rgb_to_str_hex_6 = function(arr_rgb) {\r\n\tvar r = byte_int_to_str_hex_2(arr_rgb[0]);\r\n\tvar res = r + byte_int_to_str_hex_2(arr_rgb[1])\r\n\t\t+ byte_int_to_str_hex_2(arr_rgb[2]);\r\n\treturn res;\r\n};\r\nvar arr_rgb_to_css_hex_6 = function(arr_rgb) {\r\n\t// a / b // divide a by b\r\n\t// a % b // find the remainder of division of a by b\r\n\treturn '#' + arr_rgb_to_str_hex_6(arr_rgb);\r\n};\r\n\r\nvar input_processors = {};\r\n\r\nvar output_processors = {};\r\n\r\nvar validators = {\r\n\t'number' : function(value) {\r\n\t\treturn tof(value) == 'number';\r\n\t}\r\n};\r\n\r\nvar referred_object_is_defined = function(object_reference) {\r\n\treturn is_defined(object_reference[0][object_reference[1]]);\r\n}\r\n\r\nvar set_vals = function(obj, map) {\r\n\teach(map, function(i, v) {\r\n\t\tobj[i] = v;\r\n\t});\r\n};\r\n\r\n\r\nvar extend = jsgui.extend, fp = jsgui.fp, stringify = jsgui.stringify, tof = jsgui.tof;\r\n// Connecting these input processors in this instance to the Enhanced_Data_Object?\r\n// So keep the color declaration here. Outside of HTML?\r\n// color is an indexed array.\r\n//  Does that mean it should be stored as a Data_Value?\r\n\r\nvar data_types_info = {\r\n\t'color': ['indexed_array', [\r\n\t\t['red', 'number'],\r\n\t\t['green', 'number'],\r\n\t\t['blue', 'number']\r\n\t]],\r\n\t'oltrb': ['optional_array', ['left', 'top', 'right', 'bottom']]\r\n}\r\n\r\njsgui.data_types_info = data_types_info;\r\n\r\n// Will use better (ES6) factory methods than create_input_function_from_data_type_info\r\n\r\nvar color_preprocessor_parser = fp(function(a, sig) {\r\n\t//console.log('color_preprocessor_parser a ' + stringify(a));\r\n\t//console.log('color_preprocessor_parser sig ' + sig);\r\n\tif (sig == '[s]') {\r\n\t\tvar input = a[0];\r\n\t\tvar rx_hex = /(#([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})([0-9A-Fa-f]{2}))/;\r\n\t\tvar m = input.match(rx_hex);\r\n\t\t//console.log('m ' + stringify(m));\r\n\r\n\t\tif (m) {\r\n\t\t\t// Could use arrayify or something to make the conversion quicker... will do that in more places, mainly want to get the code working now.\r\n\r\n\t\t\tvar r = jsgui.str_hex_to_int(m[2]);\r\n\t\t\tvar g = jsgui.str_hex_to_int(m[3]);\r\n\t\t\tvar b = jsgui.str_hex_to_int(m[4]);\r\n\r\n\t\t\tvar res = [r, g, b];\r\n\t\t\treturn res;\r\n\t\t}\r\n\t}\r\n})\r\n\r\n\r\nvar color_preprocessor = (function (fn_color_processor) {\r\n\tvar that = this;\r\n\t//throw '!stop';\r\n\tvar res = fp(function (a, sig) {\r\n\r\n\t\t//console.log('color_preprocessor sig ' + sig);\r\n\r\n\t\tif (sig == '[[s]]') {\r\n\t\t\t//var new_input =\r\n\t\t\t// use regexes to detect / read the string.\r\n\r\n\t\t\t//var rx_hex = /^#?[a-fA-F0-9][a-fA-F0-9][a-fA-F0-9]$/;\r\n\t\t\tvar rx_hex = /(#([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})([0-9A-Fa-f]{2}))/;\r\n\t\t\t//var rx_hex = /(#(([0-9A-Fa-f]{2}){3}))/;\r\n\t\t\t//var rx_hex = /(#([0-9A-Fa-f]{2}){3})/;\r\n\t\t\tvar input = a[0][0];\r\n\r\n\t\t\t//var m = rx_hex.match(input);\r\n\t\t\tvar m = input.match(rx_hex);\r\n\t\t\t//console.log('m ' + stringify(m));\r\n\r\n\t\t\tif (m) {\r\n\t\t\t\t// Could use arrayify or something to make the conversion quicker... will do that in more places, mainly want to get the code working now.\r\n\r\n\t\t\t\tvar r = jsgui.str_hex_to_int(m[2]);\r\n\t\t\t\tvar g = jsgui.str_hex_to_int(m[3]);\r\n\t\t\t\tvar b = jsgui.str_hex_to_int(m[4]);\r\n\r\n\t\t\t\tvar res = [r, g, b];\r\n\t\t\t\treturn res;\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\t// call with the same arguments.\r\n\t\t\t//console.log('calling normal...');\r\n\t\t\treturn fn_color_processor.apply(that, a);\r\n\r\n\t\t}\r\n\t});\r\n\treturn res;\r\n});\r\n\r\n// In previous modules, it won't keep the same input_processors.\r\n//  Is there a way of retrieving that from the most inner modules?\r\n//test_Color();\r\n\r\n// And inputting an indexed array.\r\n//  Will need to accept 2d size inputs.\r\n// Size could possibly be 3d, maybe 1d? A line has a size, which is also its length (though in the world of GUI it could also have\r\n//  a thickness).\r\n\r\n// Optional array looks more like a language feature (enhancement).\r\n//  Or even a core language feature?\r\n\r\n\r\n// There will be different types of optional arrays, will have different input parameters.\r\ninput_processors['optional_array'] = fp(function (a, sig) {\r\n\r\n\tif (a.l == 2) {\r\n\t\tvar oa_params = a[0],\r\n\t\t\tinput = a[1];\r\n\t\tif (tof(input) == 'array') {\r\n\t\t\t// check it is within the right number.\r\n\t\t\tif (input.length <= oa_params.length) {\r\n\t\t\t\treturn input;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn input;\r\n\t\t}\r\n\t}\r\n\tif (a.l == 3) {\r\n\t\tvar oa_params = a[0],\r\n\t\t\titems_data_type_name = a[1],\r\n\t\t\tinput = a[2];\r\n\t\t// now need to get every item in the array or the item to conform to the given type.\r\n\t\tvar input_processor_for_items = jsgui.input_processors[items_data_type_name];\r\n\t\t//console.log('input_processor_for_items ' + input_processor_for_items);\r\n\t\t//console.log('tof(input) ' + tof(input));\r\n\t\tif (tof(input) == 'array') {\r\n\t\t\t// check it is within the right number.\r\n\t\t\tif (input.length <= oa_params.length) {\r\n\t\t\t\tvar res = [];\r\n\t\t\t\teach(input, function (i, v) {\r\n\t\t\t\t\tres.push(input_processor_for_items(v));\r\n\t\t\t\t});\r\n\t\t\t\treturn res;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn input_processor_for_items(input);\r\n\t\t}\r\n\t}\r\n\t//console.log('oa_params ' + stringify(oa_params));\r\n});\r\n\r\ninput_processors['indexed_array'] = fp(function (a, sig) {\r\n\t// it may be taking some kind of data type that things need to be applied to.\r\n\t// eg 'size': ['indexed_array', ['distance', ['width', 'height']]],\r\n\t// would need to take in objects with the names of the properties as well.\r\n\r\n\tconsole.log('indexed_array sig', sig);\r\n\r\n\tif (a.l == 2) {\r\n\t\tvar ia_params = a[0],\r\n\t\t\tinput = a[1];\r\n\t\t//console.log('ia_params ' + stringify(ia_params));\r\n\r\n\t\tif (tof(input) == 'array') {\r\n\t\t\tif (input.length <= ia_params.length) {\r\n\t\t\t\treturn input;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (a.l == 3) {\r\n\t\tvar ia_params = a[0],\r\n\t\t\titems_data_type_name = a[1],\r\n\t\t\tinput = a[2];\r\n\t\tvar input_processor_for_items = jsgui.input_processors[items_data_type_name];\r\n\t\tif (tof(input) == 'array') {\r\n\t\t\t// check it is within the right number.\r\n\t\t\tif (input.length <= ia_params.length) {\r\n\t\t\t\tvar res = [];\r\n\t\t\t\teach(input, function (i, v) {\r\n\t\t\t\t\tres.push(input_processor_for_items(v));\r\n\t\t\t\t});\r\n\t\t\t\treturn res;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n});\r\n\r\ninput_processors['n_units'] = function (str_units, input) {\r\n\t// this will change things to have both the number of units and a string with the unit in an array.\r\n\t//  will make it easier to do maths on the distances.\r\n\r\n\tif (tof(input) == 'number') {\r\n\t\treturn [input, str_units];\r\n\t}\r\n\tif (tof(input) == 'string') {\r\n\t\t//var rx_n_units = /^(?:(\\d+)(\\w+))|(?:(\\d*)\\.(\\d+)(\\w+))$/;\r\n\t\tvar rx_n_units = /^(\\d+)(\\w+)$/;\r\n\t\t// then match it, should be multiple parts to the match.\r\n\r\n\t\t// Do want to get the various pieces working for the Control system.\r\n\t\t//  Then will be very nice indeed when compacted for a mobile-client.\r\n\r\n\t\tvar match = input.match(rx_n_units);\r\n\t\t//console.log('match ' + stringify(match));\r\n\r\n\t\tif (match) {\r\n\t\t\treturn [parseInt(match[1]), match[2]];\r\n\t\t}\r\n\r\n\t\trx_n_units = /^(\\d*\\.\\d+)(\\w+)$/;\r\n\t\tmatch = input.match(rx_n_units);\r\n\t\t//console.log('match ' + stringify(match));\r\n\t\tif (match) {\r\n\t\t\treturn [parseFloat(match[1]), match[2]];\r\n\t\t}\r\n\t\t//throw('stop');\r\n\t}\r\n};\r\n\r\n\r\n\r\n// Previously...\r\n//var ensure_data_type_data_object_constructor = function (data_type_name) {\r\n// Will use a Factory instead (I think)\r\n//  Simpler coding pattern\r\n//   Not needing such a huge word, or huge words to describe it.\r\n//    Don't need unique constructors anyway, will have far more convenient factory methods\r\n\r\n\r\n//console.log('jsgui.input_processors ' + stringify(Object.keys(jsgui.input_processors)));\r\nvar dti_color = jsgui.data_types_info['color'];\r\n\r\ninput_processors['color'] = function(input) {\r\n\r\n\r\n\tvar res;\r\n\tconsole.log('processing color input: ' + stringify(input));\r\n\r\n\tvar input_sig = get_item_sig(input, 2);\r\n\t//console.log('input_sig ' + input_sig);\r\n\r\n\t//var i;\r\n\r\n\tif (input_sig == '[s]') {\r\n\t\t//i = input[0];\r\n\t\tres = color_preprocessor_parser(input[0]);\r\n\t}\r\n\r\n\tif (input_sig == '[n,n,n]') {\r\n\t\t//input = input[0];\r\n\t\t//i = input[0];\r\n\t\t//var res = color_preprocessor_parser(input);\r\n\t\tres = input;\r\n\t}\r\n\r\n\r\n\r\n\r\n\t// not sure that using the preprocessor is right...\r\n\t//  it returns a function, I think it applies to a function.\r\n\t//throw '!!stop';\r\n\tconsole.log('res ' + stringify(res));\r\n\r\n\t// So, the 'color' property gets set.\r\n\t//  Then would need to set the CSS background-color property?\r\n\t//   Depening on what type of Control it is.\r\n\r\n\r\n\tconsole.log('color input_processors output', res);\r\n\r\n\r\n\r\n\treturn res;\r\n}\r\n\r\n//color_preprocessor(create_input_function_from_data_type_info(dti_color));\r\n//jsgui.ensure_data_type_data_object_constructor('color');\r\n\r\njsgui.output_processors['color'] = function (jsgui_color) {\r\n\tvar res = jsgui.arr_rgb_to_css_hex_6(jsgui_color);\r\n\treturn res;\r\n};\r\n\r\n// collection needs a context...\r\n//  can get the context from the first object.\r\n\r\n// Grouping not working so well so far... ???? Still the case 2016?\r\n//  Maybe a less reflective way of making the group function?\r\n\r\n\r\n\r\nvar group = function() {\r\n\r\n\t// Hope this grouping system is not too slow.\r\n\t//  May be able to optimize / selectively make the grouping functions.\r\n\r\n\tvar a = arguments;\r\n\r\n\tif (a.length == 1 && tof(a[0]) == 'array') {\r\n\t\treturn group.apply(this, a[0]);\r\n\t}\r\n\r\n\t//var res = new Collection();\r\n\tvar res;\r\n\tfor (var c = 0, l = a.length; c < l; c++) {\r\n\t\tvar item = a[c];\r\n\r\n\t\tif (c == 0) {\r\n\t\t\tres = new Collection({'context': item.context});\r\n\r\n\t\t}\r\n\t\tres.push(item);\r\n\r\n\t}\r\n\r\n\tvar C = a[0].constructor;\r\n\tvar p = C.prototype;\r\n\r\n\t//console.log('C ' + C);\r\n\t//console.log('p ' + p);\r\n\tvar i;\r\n\tfor (i in p) {\r\n\t\tvar tpi = tof(p[i]);\r\n\t\tif (tpi == 'function') {\r\n\t\t\t// make a group version.\r\n\t\t\t(function(i) {\r\n\t\t\t\t//console.log('i ' + i);\r\n\r\n\t\t\t\tif (i != 'each' && i != 'get' && i != 'add_event_listener') {\r\n\t\t\t\t\tres[i] = function() {\r\n\t\t\t\t\t\tvar a = arguments;\r\n\t\t\t\t\t\tres.each(function(v, i2) {\r\n\t\t\t\t\t\t\tv[i].apply(v, a);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})(i)\r\n\t\t}\r\n\t}\r\n\treturn res;\r\n};\r\n\r\nvar true_vals = function(map) {\r\n\tvar res = [];\r\n\tfor (var i in map) {\r\n\t\tif (map[i]) res.push(map[i]);\r\n\t}\r\n\treturn res;\r\n};\r\n\r\n\r\nconst Ui16toUi32 = (ui16) => {\r\n    let res = new Uint32Array(ui16.length / 2);\r\n    let dv = new DataView(ui16.buffer);\r\n    let l = ui16.length;\r\n    let hl = l / 2;\r\n    //console.log('l', l);\r\n    //console.log('hl', hl);\r\n    let resw = 0;\r\n    for (let c = 0; c < hl; c++) {\r\n        //console.log('c', c);\r\n        res[resw++] = dv.getUint32(c * 4);\r\n    }\r\n    //console.log('res', res);\r\n    return res;\r\n}\r\n\r\nconst Ui32toUi16 = (ui32) => {\r\n    let res = new Uint16Array(ui32.length * 2);\r\n    let dv = new DataView(ui32.buffer);\r\n    let l = ui32.length;\r\n    //let dl = l * 2;\r\n    //console.log('l', l);\r\n    //console.log('dl', dl);\r\n    let resw = 0;\r\n    for (let c = 0; c < l; c++) {\r\n        //console.log('c', c);\r\n        //console.log('dv.getUint16(c)', dv.getUint16(c * 4 + 2));\r\n        //console.log('dv.getUint16(c)', dv.getUint16(c * 4));\r\n\r\n        res[resw++] = dv.getUint16(c * 4 + 2);\r\n        res[resw++] = dv.getUint16(c * 4);\r\n        //res[resw++] = dv.getUint16(c * 2 + 1);\r\n        //res[resw++] = dv.getUint16(c * 2);\r\n    }\r\n    console.log('res', res);\r\n    return res;\r\n}\r\n\r\nvar util = {\r\n\t'Ui16toUi32': Ui16toUi32,\r\n\t'Ui32toUi16': Ui32toUi16,\r\n\t'vectorify' : vectorify,\r\n\t'v_add' : v_add,\r\n\t'v_subtract' : v_subtract,\r\n\t'v_multiply' : v_multiply,\r\n\t'v_divide' : v_divide,\r\n\t'vector_magnitude' : vector_magnitude,\r\n\t'distance_between_points' : distance_between_points,\r\n\r\n\t\r\n\t'execute_on_each_simple' : execute_on_each_simple,\r\n\t'mapify' : mapify,\r\n\t'filter_map_by_regex' : filter_map_by_regex,\r\n\t'atof' : atof,\r\n\t'npx' : npx,\r\n\t'no_px' : no_px,\r\n\t'str_arr_mapify' : str_arr_mapify,\r\n\t'arr_ltrb' : arr_ltrb,\r\n\t'true_vals': true_vals,\r\n\t'validators' : validators,\r\n\t'__data_id_method' : 'lazy',\r\n\t'str_hex_to_int' : str_hex_to_int,\r\n\t'arr_rgb_to_css_hex_6' : arr_rgb_to_css_hex_6,\r\n\t'group': group\r\n};\r\n\r\nmodule.exports = util;\r\n\r\n\r\n\r\n", "/*\r\n    Should make lang-tools module.\r\n    // Get lang_mini using that instead.\r\n    //  And this will use lang-mini.\r\n    //  Cut down on number of code references in some cases.\r\n*/\r\n\r\n\r\nconst lang_mini = require('lang-mini');\r\nconst collective = require('./collective');\r\n\r\nconst {more_general_equals} = require('./Data_Model/new/tools');\r\n\r\nlang_mini.equals = more_general_equals;\r\n\r\nlang_mini.collective = collective;\r\nlang_mini.collect = collective;\r\n\r\nconst Evented_Class = lang_mini.Evented_Class;\r\n//var Evented_Class = require('./_evented-class');\r\n// Could use lang-mini for this.\r\n//  Keep the code consisten\r\n//  lang-ext\r\n//  lang-enh\r\n//  flang\r\n\r\nconst B_Plus_Tree = require('./b-plus-tree/b-plus-tree');\r\nconst Collection = require('./Data_Model/old/Collection');\r\nconst Data_Object = require('./Data_Model/Data_Object');\r\nconst Data_Value = require('././Data_Model/Data_Value');\r\nconst Data_Model = require('././Data_Model/Data_Model');\r\nconst Immutable_Data_Value = require('././Data_Model/new/Immutable_Data_Value');\r\nconst Immutable_Data_Model = require('././Data_Model/new/Immutable_Data_Model');\r\nconst Doubly_Linked_List = require('./doubly-linked-list');\r\n\r\nconst Ordered_KVS = require('./ordered-kvs');\r\nconst Ordered_String_List = require('./ordered-string-list');\r\nconst Sorted_KVS = require('./sorted-kvs');\r\n\r\n// util...\r\n\r\nconst util = require('./util');\r\n\r\n// merge util into lang_mini?\r\n\r\nlang_mini.util = util;\r\n\r\nlang_mini.B_Plus_Tree = B_Plus_Tree;\r\nlang_mini.Collection = Collection;\r\nlang_mini.Data_Object = Data_Object;\r\nlang_mini.Data_Value = Data_Value;\r\nlang_mini.Immutable_Data_Model = Immutable_Data_Model;\r\nlang_mini.Immutable_Data_Value = Immutable_Data_Value;\r\nlang_mini.Data_Model = Data_Model;\r\nlang_mini.Doubly_Linked_List = Doubly_Linked_List;\r\n//lang_mini.Evented_Class = Evented_Class;\r\nlang_mini.Ordered_KVS = Ordered_KVS;\r\nlang_mini.Ordered_String_List = Ordered_String_List;\r\nlang_mini.Sorted_KVS = Sorted_KVS;\r\n// remake it as an ec\r\n\r\nconst ec = new Evented_Class();\r\nObject.assign(ec, lang_mini);\r\n\r\n// Nothing here particularly about Resources.\r\n//  Some resources may need to access the internet.\r\n//   Less clearly lang specific?\r\n\r\n// Or a data-transformer / transformer\r\n//  compiler being a subset of transformer.\r\n//  codec also being a subset of transformer.\r\n\r\n\r\n\r\n\r\n\r\n// a compile command too, for command line usage.\r\n\r\n\r\n// lang_mini.compilers.load('babel', babel.transform) ???\r\n//  but will need to be able to send options through to compilers too.\r\n//  Could have named option sets, easier shorthands.\r\n\r\n\r\n\r\n\r\n\r\n\r\nmodule.exports = ec;", "/**\r\n * Analysis Progress Bar Component\r\n * Compact, real-time progress visualization for analysis runs\r\n */\r\n\r\nconst { is_defined, tof } = require('lang-tools');\r\n\r\n/**\r\n * Format duration in seconds to human-readable string\r\n * @param {number} seconds - Duration in seconds\r\n * @returns {string} Formatted duration (e.g., \"2m 30s\", \"1h 5m\")\r\n */\r\nfunction formatDuration(seconds) {\r\n  if (!Number.isFinite(seconds) || seconds < 0) return '\u2014';\r\n  \r\n  const hours = Math.floor(seconds / 3600);\r\n  const minutes = Math.floor((seconds % 3600) / 60);\r\n  const secs = Math.floor(seconds % 60);\r\n  \r\n  if (hours > 0) {\r\n    return minutes > 0 ? `${hours}h ${minutes}m` : `${hours}h`;\r\n  }\r\n  if (minutes > 0) {\r\n    return secs > 0 ? `${minutes}m ${secs}s` : `${minutes}m`;\r\n  }\r\n  return `${secs}s`;\r\n}\r\n\r\n/**\r\n * Format number with thousand separators\r\n * @param {number} num - Number to format\r\n * @returns {string} Formatted number\r\n */\r\nfunction formatNumber(num) {\r\n  if (!Number.isFinite(num)) return '\u2014';\r\n  return num.toLocaleString();\r\n}\r\n\r\n/**\r\n * Calculate ETA based on current progress\r\n * @param {Object} progress - Progress object\r\n * @param {number} progress.processed - Items processed\r\n * @param {number} progress.total - Total items\r\n * @param {number} elapsedMs - Elapsed time in milliseconds\r\n * @returns {number|null} Estimated seconds remaining\r\n */\r\nfunction calculateETA(progress, elapsedMs) {\r\n  if (!progress || !progress.total || !progress.processed) return null;\r\n  if (progress.processed === 0 || progress.processed >= progress.total) return null;\r\n  \r\n  const rate = progress.processed / (elapsedMs / 1000); // items per second\r\n  const remaining = progress.total - progress.processed;\r\n  return Math.ceil(remaining / rate);\r\n}\r\n\r\n/**\r\n * Create and render analysis progress bar\r\n * @param {HTMLElement} container - Container element\r\n * @param {Object} options - Configuration options\r\n * @param {string} options.runId - Analysis run ID\r\n * @param {number} options.startedAt - Start timestamp (ms)\r\n * @param {Function} options.onCancel - Cancel callback\r\n * @returns {Object} Progress bar controller\r\n */\r\nfunction createAnalysisProgressBar(container, options = {}) {\r\n  if (!container) throw new Error('createAnalysisProgressBar requires container element');\r\n  \r\n  const { runId, startedAt, onCancel, compact = false } = options;\r\n  \r\n  // State\r\n  let currentProgress = null;\r\n  let currentStatus = 'running';\r\n  let updateTimer = null;\r\n  \r\n  // Create elements\r\n  const wrapper = document.createElement('div');\r\n  wrapper.className = compact ? 'analysis-progress-bar analysis-progress-bar--compact' : 'analysis-progress-bar';\r\n  wrapper.innerHTML = `\r\n    <div class=\"analysis-progress-bar__header\">\r\n      <div class=\"analysis-progress-bar__title\">\r\n        <span class=\"analysis-progress-bar__run-id\">${runId || 'Analysis'}</span>\r\n        <span class=\"analysis-progress-bar__status\" data-status=\"running\">Running</span>\r\n      </div>\r\n      <div class=\"analysis-progress-bar__actions\">\r\n        <button class=\"analysis-progress-bar__cancel-btn\" title=\"Cancel analysis\">\r\n          <svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"currentColor\">\r\n            <path d=\"M14 1.41L12.59 0L7 5.59L1.41 0L0 1.41L5.59 7L0 12.59L1.41 14L7 8.41L12.59 14L14 12.59L8.41 7L14 1.41Z\"/>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"analysis-progress-bar__bar-container\">\r\n      <div class=\"analysis-progress-bar__bar\">\r\n        <div class=\"analysis-progress-bar__bar-fill\" style=\"width: 0%\"></div>\r\n      </div>\r\n      <div class=\"analysis-progress-bar__percentage\">0%</div>\r\n    </div>\r\n    \r\n    <div class=\"analysis-progress-bar__metrics\">\r\n      <div class=\"analysis-progress-bar__metric\">\r\n        <span class=\"analysis-progress-bar__metric-label\">Processed:</span>\r\n        <span class=\"analysis-progress-bar__metric-value\" data-metric=\"processed\" data-label=\"P\">0</span>\r\n      </div>\r\n      <div class=\"analysis-progress-bar__metric\">\r\n        <span class=\"analysis-progress-bar__metric-label\">Updated:</span>\r\n        <span class=\"analysis-progress-bar__metric-value\" data-metric=\"updated\" data-label=\"U\">0</span>\r\n      </div>\r\n      <div class=\"analysis-progress-bar__metric\">\r\n        <span class=\"analysis-progress-bar__metric-label\">Total:</span>\r\n        <span class=\"analysis-progress-bar__metric-value\" data-metric=\"total\" data-label=\"T\">\u2014</span>\r\n      </div>\r\n      <div class=\"analysis-progress-bar__metric\">\r\n        <span class=\"analysis-progress-bar__metric-label\">Elapsed:</span>\r\n        <span class=\"analysis-progress-bar__metric-value\" data-metric=\"elapsed\" data-label=\"Time\">0s</span>\r\n      </div>\r\n      <div class=\"analysis-progress-bar__metric\">\r\n        <span class=\"analysis-progress-bar__metric-label\">ETA:</span>\r\n        <span class=\"analysis-progress-bar__metric-value\" data-metric=\"eta\" data-label=\"ETA\">\u2014</span>\r\n      </div>\r\n    </div>\r\n  `;\r\n  \r\n  // Add to container\r\n  container.appendChild(wrapper);\r\n  \r\n  // Get element references\r\n  const statusEl = wrapper.querySelector('.analysis-progress-bar__status');\r\n  const barFill = wrapper.querySelector('.analysis-progress-bar__bar-fill');\r\n  const percentageEl = wrapper.querySelector('.analysis-progress-bar__percentage');\r\n  const cancelBtn = wrapper.querySelector('.analysis-progress-bar__cancel-btn');\r\n  const metricEls = {\r\n    processed: wrapper.querySelector('[data-metric=\"processed\"]'),\r\n    updated: wrapper.querySelector('[data-metric=\"updated\"]'),\r\n    total: wrapper.querySelector('[data-metric=\"total\"]'),\r\n    elapsed: wrapper.querySelector('[data-metric=\"elapsed\"]'),\r\n    eta: wrapper.querySelector('[data-metric=\"eta\"]')\r\n  };\r\n  \r\n  // Cancel button handler\r\n  if (cancelBtn && typeof onCancel === 'function') {\r\n    cancelBtn.addEventListener('click', () => {\r\n      if (confirm('Cancel this analysis run?')) {\r\n        onCancel(runId);\r\n      }\r\n    });\r\n  } else if (cancelBtn) {\r\n    cancelBtn.style.display = 'none';\r\n  }\r\n  \r\n  /**\r\n   * Update display based on current state\r\n   */\r\n  function render() {\r\n    const now = Date.now();\r\n    const elapsedMs = startedAt ? now - startedAt : 0;\r\n    const elapsedSec = Math.floor(elapsedMs / 1000);\r\n    \r\n    // Update elapsed time\r\n    if (metricEls.elapsed) {\r\n      metricEls.elapsed.textContent = formatDuration(elapsedSec);\r\n    }\r\n    \r\n    // Update progress metrics\r\n    if (currentProgress) {\r\n      const { processed, updated, total, percentage } = currentProgress;\r\n      \r\n      // Progress bar\r\n      const pct = percentage != null ? percentage : 0;\r\n      if (barFill) {\r\n        barFill.style.width = `${pct}%`;\r\n      }\r\n      if (percentageEl) {\r\n        percentageEl.textContent = `${pct}%`;\r\n      }\r\n      \r\n      // Metrics\r\n      if (metricEls.processed && is_defined(processed)) {\r\n        metricEls.processed.textContent = formatNumber(processed);\r\n      }\r\n      if (metricEls.updated && is_defined(updated)) {\r\n        metricEls.updated.textContent = formatNumber(updated);\r\n      }\r\n      if (metricEls.total && is_defined(total)) {\r\n        metricEls.total.textContent = formatNumber(total);\r\n      }\r\n      \r\n      // Calculate and display ETA\r\n      if (metricEls.eta) {\r\n        const etaSec = calculateETA(currentProgress, elapsedMs);\r\n        metricEls.eta.textContent = etaSec != null ? formatDuration(etaSec) : '\u2014';\r\n      }\r\n    }\r\n    \r\n    // Update status\r\n    if (statusEl) {\r\n      statusEl.textContent = currentStatus === 'running' ? 'Running' :\r\n                            currentStatus === 'completed' ? 'Completed' :\r\n                            currentStatus === 'failed' ? 'Failed' :\r\n                            currentStatus;\r\n      statusEl.setAttribute('data-status', currentStatus);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Start auto-update timer\r\n   */\r\n  function startTimer() {\r\n    if (updateTimer) return;\r\n    updateTimer = setInterval(() => {\r\n      if (currentStatus === 'running') {\r\n        render();\r\n      } else {\r\n        stopTimer();\r\n      }\r\n    }, 1000); // Update every second\r\n  }\r\n  \r\n  /**\r\n   * Stop auto-update timer\r\n   */\r\n  function stopTimer() {\r\n    if (updateTimer) {\r\n      clearInterval(updateTimer);\r\n      updateTimer = null;\r\n    }\r\n  }\r\n  \r\n  // Start timer\r\n  startTimer();\r\n  \r\n  // Return controller\r\n  return {\r\n    /**\r\n     * Update progress data\r\n     * @param {Object} progress - Progress data\r\n     */\r\n    updateProgress(progress) {\r\n      if (!progress) return;\r\n      currentProgress = { ...progress };\r\n      render();\r\n    },\r\n    \r\n    /**\r\n     * Update status\r\n     * @param {string} status - New status\r\n     */\r\n    updateStatus(status) {\r\n      if (tof(status) === 'string') {\r\n        currentStatus = status;\r\n        render();\r\n        \r\n        if (status !== 'running') {\r\n          stopTimer();\r\n        }\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Destroy progress bar\r\n     */\r\n    destroy() {\r\n      stopTimer();\r\n      if (wrapper && wrapper.parentNode) {\r\n        wrapper.parentNode.removeChild(wrapper);\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Get wrapper element\r\n     */\r\n    getElement() {\r\n      return wrapper;\r\n    }\r\n  };\r\n}\r\n\r\nmodule.exports = {\r\n  createAnalysisProgressBar\r\n};\r\n"],
  "mappings": "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",
  "names": ["stream", "context", "res", "c", "obj", "item", "get_a_sig", "arr", "vals", "a", "that", "prop_name", "delay", "res2", "target", "item_params", "options", "p", "test_evented_class", "test_data", "name", "res", "target", "res", "item", "that", "res", "c", "item", "res", "key", "prefix", "Data_Value", "res", "obj", "that", "res", "Data_Value", "get_a_sig", "obj", "res", "item", "that", "input_processors", "Data_Value", "get_a_sig", "Data_Object", "res", "item", "obj", "c", "l", "require_Data_Object", "local_js_value", "context", "context", "context", "res", "c", "local_js_value", "item", "local_js_value", "value", "my_e", "c", "num_properties", "data_type", "require_Data_Value", "Data_Value", "that", "context", "res", "item", "require_Data_Value", "res", "c", "res", "require_Collection", "res", "c", "that", "res2", "item", "i", "a", "i2", "Data_Value"]
}
