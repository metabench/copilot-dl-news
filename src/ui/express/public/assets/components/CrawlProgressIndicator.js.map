{
  "version": 3,
  "sources": ["../../components/CrawlProgressIndicator.js"],
  "sourcesContent": ["/**\r\n * CrawlProgressIndicator.js\r\n * \r\n * Reusable component for displaying crawl progress with:\r\n * - Dual-level progress bars (main task + sub-task)\r\n * - Determinate progress (with known totals)\r\n * - Indeterminate progress (spinners)\r\n * - Stage labels and status indicators\r\n * - Telemetry integration\r\n * \r\n * Usage:\r\n *   const indicator = createCrawlProgressIndicator({\r\n *     container: document.getElementById('progress-container'),\r\n *     jobId: '2025-10-08_12-34-56',\r\n *     onStateChange: (state) => console.log('State changed:', state)\r\n *   });\r\n *   \r\n *   indicator.updateProgress({ visited: 10, total: 100, stage: 'crawling' });\r\n *   indicator.updateSubTask({ current: 5, total: 50, label: 'Processing countries' });\r\n *   indicator.setStage('analyzing');\r\n *   indicator.destroy();\r\n */\r\n\r\n/**\r\n * Create a crawl progress indicator instance\r\n * \r\n * @param {Object} options\r\n * @param {HTMLElement} options.container - Container element\r\n * @param {string} [options.jobId] - Job identifier\r\n * @param {Function} [options.onStateChange] - Callback when state changes\r\n * @returns {Object} Progress indicator API\r\n */\r\nfunction createCrawlProgressIndicator(options = {}) {\r\n  const {\r\n    container,\r\n    jobId = null,\r\n    onStateChange = null\r\n  } = options;\r\n\r\n  if (!container) {\r\n    throw new Error('CrawlProgressIndicator requires a container element');\r\n  }\r\n\r\n  // Internal state\r\n  const state = {\r\n    jobId,\r\n    mainTask: {\r\n      current: 0,\r\n      total: null,\r\n      percentage: 0,\r\n      stage: 'initializing',\r\n      stageLabel: 'Initializing',\r\n      status: 'running'\r\n    },\r\n    subTask: {\r\n      current: 0,\r\n      total: null,\r\n      percentage: 0,\r\n      label: null,\r\n      visible: false\r\n    },\r\n    telemetry: [],\r\n    lastUpdate: Date.now()\r\n  };\r\n\r\n  // Create DOM structure\r\n  const root = document.createElement('div');\r\n  root.className = 'crawl-progress-indicator';\r\n  root.dataset.jobId = jobId || '';\r\n\r\n  const header = document.createElement('div');\r\n  header.className = 'crawl-progress-indicator__header';\r\n  \r\n  const stageLabel = document.createElement('div');\r\n  stageLabel.className = 'crawl-progress-indicator__stage-label';\r\n  stageLabel.textContent = state.mainTask.stageLabel;\r\n  \r\n  const statusBadge = document.createElement('span');\r\n  statusBadge.className = 'crawl-progress-indicator__status-badge';\r\n  statusBadge.dataset.status = state.mainTask.status;\r\n  statusBadge.textContent = state.mainTask.status;\r\n  \r\n  header.appendChild(stageLabel);\r\n  header.appendChild(statusBadge);\r\n\r\n  // Main progress bar\r\n  const mainProgressContainer = document.createElement('div');\r\n  mainProgressContainer.className = 'crawl-progress-indicator__main-progress';\r\n  \r\n  const mainBar = document.createElement('div');\r\n  mainBar.className = 'progress-bar-container';\r\n  \r\n  const mainBarFill = document.createElement('div');\r\n  mainBarFill.className = 'progress-bar-fill';\r\n  mainBarFill.style.width = '0%';\r\n  \r\n  const mainBarLabel = document.createElement('div');\r\n  mainBarLabel.className = 'progress-bar-label';\r\n  mainBarLabel.textContent = '0%';\r\n  \r\n  mainBar.appendChild(mainBarFill);\r\n  mainBar.appendChild(mainBarLabel);\r\n  mainProgressContainer.appendChild(mainBar);\r\n\r\n  // Sub-task progress bar (initially hidden)\r\n  const subProgressContainer = document.createElement('div');\r\n  subProgressContainer.className = 'crawl-progress-indicator__sub-progress';\r\n  subProgressContainer.style.display = 'none';\r\n  \r\n  const subTaskLabel = document.createElement('div');\r\n  subTaskLabel.className = 'crawl-progress-indicator__sub-label';\r\n  \r\n  const subBar = document.createElement('div');\r\n  subBar.className = 'progress-bar-container progress-bar-container--small';\r\n  \r\n  const subBarFill = document.createElement('div');\r\n  subBarFill.className = 'progress-bar-fill progress-bar-fill--sub';\r\n  subBarFill.style.width = '0%';\r\n  \r\n  const subBarLabel = document.createElement('div');\r\n  subBarLabel.className = 'progress-bar-label progress-bar-label--small';\r\n  subBarLabel.textContent = '0%';\r\n  \r\n  subBar.appendChild(subBarFill);\r\n  subBar.appendChild(subBarLabel);\r\n  subProgressContainer.appendChild(subTaskLabel);\r\n  subProgressContainer.appendChild(subBar);\r\n\r\n  // Assemble\r\n  root.appendChild(header);\r\n  root.appendChild(mainProgressContainer);\r\n  root.appendChild(subProgressContainer);\r\n  container.appendChild(root);\r\n\r\n  /**\r\n   * Update main task progress\r\n   * \r\n   * @param {Object} progress\r\n   * @param {number} [progress.current] - Current value\r\n   * @param {number} [progress.total] - Total value (null for indeterminate)\r\n   * @param {string} [progress.stage] - Stage identifier\r\n   * @param {string} [progress.stageLabel] - Human-readable stage label\r\n   * @param {string} [progress.status] - Status (running, paused, completed, failed)\r\n   */\r\n  function updateProgress(progress = {}) {\r\n    if (progress.stage && progress.stage !== state.mainTask.stage) {\r\n      state.mainTask.stage = progress.stage;\r\n      state.mainTask.stageLabel = progress.stageLabel || capitalizeStage(progress.stage);\r\n      stageLabel.textContent = state.mainTask.stageLabel;\r\n    }\r\n\r\n    if (progress.stageLabel) {\r\n      state.mainTask.stageLabel = progress.stageLabel;\r\n      stageLabel.textContent = progress.stageLabel;\r\n    }\r\n\r\n    if (progress.status && progress.status !== state.mainTask.status) {\r\n      state.mainTask.status = progress.status;\r\n      statusBadge.textContent = progress.status;\r\n      statusBadge.dataset.status = progress.status;\r\n    }\r\n\r\n    if (typeof progress.current === 'number') {\r\n      state.mainTask.current = progress.current;\r\n    }\r\n\r\n    if (typeof progress.total === 'number' || progress.total === null) {\r\n      state.mainTask.total = progress.total;\r\n    }\r\n\r\n    // Calculate percentage\r\n    if (state.mainTask.total && state.mainTask.total > 0) {\r\n      state.mainTask.percentage = Math.round((state.mainTask.current / state.mainTask.total) * 100);\r\n      mainBarFill.style.width = `${state.mainTask.percentage}%`;\r\n      mainBarLabel.textContent = `${state.mainTask.current} / ${state.mainTask.total} (${state.mainTask.percentage}%)`;\r\n      mainBarFill.classList.remove('progress-bar-fill--indeterminate');\r\n    } else {\r\n      // Indeterminate\r\n      mainBarFill.classList.add('progress-bar-fill--indeterminate');\r\n      mainBarLabel.textContent = state.mainTask.current > 0 \r\n        ? `${state.mainTask.current} processed` \r\n        : 'Processing...';\r\n    }\r\n\r\n    state.lastUpdate = Date.now();\r\n    notifyStateChange();\r\n  }\r\n\r\n  /**\r\n   * Update sub-task progress\r\n   * \r\n   * @param {Object} subTask\r\n   * @param {number} [subTask.current] - Current value\r\n   * @param {number} [subTask.total] - Total value (null for indeterminate)\r\n   * @param {string} [subTask.label] - Sub-task label\r\n   * @param {boolean} [subTask.visible] - Show/hide sub-task bar\r\n   */\r\n  function updateSubTask(subTask = {}) {\r\n    if (typeof subTask.visible === 'boolean') {\r\n      state.subTask.visible = subTask.visible;\r\n      subProgressContainer.style.display = subTask.visible ? 'block' : 'none';\r\n    }\r\n\r\n    if (subTask.label !== undefined) {\r\n      state.subTask.label = subTask.label;\r\n      subTaskLabel.textContent = subTask.label || '';\r\n    }\r\n\r\n    if (typeof subTask.current === 'number') {\r\n      state.subTask.current = subTask.current;\r\n    }\r\n\r\n    if (typeof subTask.total === 'number' || subTask.total === null) {\r\n      state.subTask.total = subTask.total;\r\n    }\r\n\r\n    // Calculate percentage\r\n    if (state.subTask.total && state.subTask.total > 0) {\r\n      state.subTask.percentage = Math.round((state.subTask.current / state.subTask.total) * 100);\r\n      subBarFill.style.width = `${state.subTask.percentage}%`;\r\n      subBarLabel.textContent = `${state.subTask.current} / ${state.subTask.total} (${state.subTask.percentage}%)`;\r\n      subBarFill.classList.remove('progress-bar-fill--indeterminate');\r\n    } else if (state.subTask.visible) {\r\n      // Indeterminate\r\n      subBarFill.classList.add('progress-bar-fill--indeterminate');\r\n      subBarLabel.textContent = state.subTask.current > 0 \r\n        ? `${state.subTask.current} processed` \r\n        : 'Processing...';\r\n    }\r\n\r\n    // Auto-show if not explicitly hidden\r\n    if (state.subTask.label && typeof subTask.visible !== 'boolean') {\r\n      state.subTask.visible = true;\r\n      subProgressContainer.style.display = 'block';\r\n    }\r\n\r\n    state.lastUpdate = Date.now();\r\n    notifyStateChange();\r\n  }\r\n\r\n  /**\r\n   * Set stage without updating progress\r\n   * \r\n   * @param {string} stage - Stage identifier\r\n   * @param {string} [label] - Human-readable label\r\n   */\r\n  function setStage(stage, label = null) {\r\n    updateProgress({ stage, stageLabel: label });\r\n  }\r\n\r\n  /**\r\n   * Set status\r\n   * \r\n   * @param {string} status - Status (running, paused, completed, failed)\r\n   */\r\n  function setStatus(status) {\r\n    updateProgress({ status });\r\n  }\r\n\r\n  /**\r\n   * Hide sub-task bar\r\n   */\r\n  function hideSubTask() {\r\n    updateSubTask({ visible: false });\r\n  }\r\n\r\n  /**\r\n   * Show sub-task bar\r\n   */\r\n  function showSubTask() {\r\n    updateSubTask({ visible: true });\r\n  }\r\n\r\n  /**\r\n   * Get current state\r\n   * \r\n   * @returns {Object} Current state snapshot\r\n   */\r\n  function getState() {\r\n    return JSON.parse(JSON.stringify(state));\r\n  }\r\n\r\n  /**\r\n   * Destroy the indicator and clean up\r\n   */\r\n  function destroy() {\r\n    if (root && root.parentNode) {\r\n      root.parentNode.removeChild(root);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Capitalize stage name\r\n   * \r\n   * @param {string} stage\r\n   * @returns {string}\r\n   */\r\n  function capitalizeStage(stage) {\r\n    if (!stage) return 'Processing';\r\n    return stage\r\n      .split(/[-_]/)\r\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n      .join(' ');\r\n  }\r\n\r\n  /**\r\n   * Notify state change callback\r\n   */\r\n  function notifyStateChange() {\r\n    if (typeof onStateChange === 'function') {\r\n      try {\r\n        onStateChange(getState());\r\n      } catch (_) {}\r\n    }\r\n  }\r\n\r\n  // Public API\r\n  return {\r\n    updateProgress,\r\n    updateSubTask,\r\n    setStage,\r\n    setStatus,\r\n    hideSubTask,\r\n    showSubTask,\r\n    getState,\r\n    destroy,\r\n    // Direct element access for custom styling\r\n    elements: {\r\n      root,\r\n      header,\r\n      stageLabel,\r\n      statusBadge,\r\n      mainBar,\r\n      mainBarFill,\r\n      mainBarLabel,\r\n      subProgressContainer,\r\n      subTaskLabel,\r\n      subBar,\r\n      subBarFill,\r\n      subBarLabel\r\n    }\r\n  };\r\n}\r\n\r\n// Export for module usage\r\nif (typeof module !== 'undefined' && module.exports) {\r\n  module.exports = { createCrawlProgressIndicator };\r\n}\r\n\r\n// Export for browser\r\nif (typeof window !== 'undefined') {\r\n  window.createCrawlProgressIndicator = createCrawlProgressIndicator;\r\n}\r\n"],
  "mappings": ";;;;;;AAAA;AAAA;AAgCA,aAAS,6BAA6B,UAAU,CAAC,GAAG;AAClD,YAAM;AAAA,QACJ;AAAA,QACA,QAAQ;AAAA,QACR,gBAAgB;AAAA,MAClB,IAAI;AAEJ,UAAI,CAAC,WAAW;AACd,cAAM,IAAI,MAAM,qDAAqD;AAAA,MACvE;AAGA,YAAM,QAAQ;AAAA,QACZ;AAAA,QACA,UAAU;AAAA,UACR,SAAS;AAAA,UACT,OAAO;AAAA,UACP,YAAY;AAAA,UACZ,OAAO;AAAA,UACP,YAAY;AAAA,UACZ,QAAQ;AAAA,QACV;AAAA,QACA,SAAS;AAAA,UACP,SAAS;AAAA,UACT,OAAO;AAAA,UACP,YAAY;AAAA,UACZ,OAAO;AAAA,UACP,SAAS;AAAA,QACX;AAAA,QACA,WAAW,CAAC;AAAA,QACZ,YAAY,KAAK,IAAI;AAAA,MACvB;AAGA,YAAM,OAAO,SAAS,cAAc,KAAK;AACzC,WAAK,YAAY;AACjB,WAAK,QAAQ,QAAQ,SAAS;AAE9B,YAAM,SAAS,SAAS,cAAc,KAAK;AAC3C,aAAO,YAAY;AAEnB,YAAM,aAAa,SAAS,cAAc,KAAK;AAC/C,iBAAW,YAAY;AACvB,iBAAW,cAAc,MAAM,SAAS;AAExC,YAAM,cAAc,SAAS,cAAc,MAAM;AACjD,kBAAY,YAAY;AACxB,kBAAY,QAAQ,SAAS,MAAM,SAAS;AAC5C,kBAAY,cAAc,MAAM,SAAS;AAEzC,aAAO,YAAY,UAAU;AAC7B,aAAO,YAAY,WAAW;AAG9B,YAAM,wBAAwB,SAAS,cAAc,KAAK;AAC1D,4BAAsB,YAAY;AAElC,YAAM,UAAU,SAAS,cAAc,KAAK;AAC5C,cAAQ,YAAY;AAEpB,YAAM,cAAc,SAAS,cAAc,KAAK;AAChD,kBAAY,YAAY;AACxB,kBAAY,MAAM,QAAQ;AAE1B,YAAM,eAAe,SAAS,cAAc,KAAK;AACjD,mBAAa,YAAY;AACzB,mBAAa,cAAc;AAE3B,cAAQ,YAAY,WAAW;AAC/B,cAAQ,YAAY,YAAY;AAChC,4BAAsB,YAAY,OAAO;AAGzC,YAAM,uBAAuB,SAAS,cAAc,KAAK;AACzD,2BAAqB,YAAY;AACjC,2BAAqB,MAAM,UAAU;AAErC,YAAM,eAAe,SAAS,cAAc,KAAK;AACjD,mBAAa,YAAY;AAEzB,YAAM,SAAS,SAAS,cAAc,KAAK;AAC3C,aAAO,YAAY;AAEnB,YAAM,aAAa,SAAS,cAAc,KAAK;AAC/C,iBAAW,YAAY;AACvB,iBAAW,MAAM,QAAQ;AAEzB,YAAM,cAAc,SAAS,cAAc,KAAK;AAChD,kBAAY,YAAY;AACxB,kBAAY,cAAc;AAE1B,aAAO,YAAY,UAAU;AAC7B,aAAO,YAAY,WAAW;AAC9B,2BAAqB,YAAY,YAAY;AAC7C,2BAAqB,YAAY,MAAM;AAGvC,WAAK,YAAY,MAAM;AACvB,WAAK,YAAY,qBAAqB;AACtC,WAAK,YAAY,oBAAoB;AACrC,gBAAU,YAAY,IAAI;AAY1B,eAAS,eAAe,WAAW,CAAC,GAAG;AACrC,YAAI,SAAS,SAAS,SAAS,UAAU,MAAM,SAAS,OAAO;AAC7D,gBAAM,SAAS,QAAQ,SAAS;AAChC,gBAAM,SAAS,aAAa,SAAS,cAAc,gBAAgB,SAAS,KAAK;AACjF,qBAAW,cAAc,MAAM,SAAS;AAAA,QAC1C;AAEA,YAAI,SAAS,YAAY;AACvB,gBAAM,SAAS,aAAa,SAAS;AACrC,qBAAW,cAAc,SAAS;AAAA,QACpC;AAEA,YAAI,SAAS,UAAU,SAAS,WAAW,MAAM,SAAS,QAAQ;AAChE,gBAAM,SAAS,SAAS,SAAS;AACjC,sBAAY,cAAc,SAAS;AACnC,sBAAY,QAAQ,SAAS,SAAS;AAAA,QACxC;AAEA,YAAI,OAAO,SAAS,YAAY,UAAU;AACxC,gBAAM,SAAS,UAAU,SAAS;AAAA,QACpC;AAEA,YAAI,OAAO,SAAS,UAAU,YAAY,SAAS,UAAU,MAAM;AACjE,gBAAM,SAAS,QAAQ,SAAS;AAAA,QAClC;AAGA,YAAI,MAAM,SAAS,SAAS,MAAM,SAAS,QAAQ,GAAG;AACpD,gBAAM,SAAS,aAAa,KAAK,MAAO,MAAM,SAAS,UAAU,MAAM,SAAS,QAAS,GAAG;AAC5F,sBAAY,MAAM,QAAQ,GAAG,MAAM,SAAS,UAAU;AACtD,uBAAa,cAAc,GAAG,MAAM,SAAS,OAAO,MAAM,MAAM,SAAS,KAAK,KAAK,MAAM,SAAS,UAAU;AAC5G,sBAAY,UAAU,OAAO,kCAAkC;AAAA,QACjE,OAAO;AAEL,sBAAY,UAAU,IAAI,kCAAkC;AAC5D,uBAAa,cAAc,MAAM,SAAS,UAAU,IAChD,GAAG,MAAM,SAAS,OAAO,eACzB;AAAA,QACN;AAEA,cAAM,aAAa,KAAK,IAAI;AAC5B,0BAAkB;AAAA,MACpB;AAWA,eAAS,cAAc,UAAU,CAAC,GAAG;AACnC,YAAI,OAAO,QAAQ,YAAY,WAAW;AACxC,gBAAM,QAAQ,UAAU,QAAQ;AAChC,+BAAqB,MAAM,UAAU,QAAQ,UAAU,UAAU;AAAA,QACnE;AAEA,YAAI,QAAQ,UAAU,QAAW;AAC/B,gBAAM,QAAQ,QAAQ,QAAQ;AAC9B,uBAAa,cAAc,QAAQ,SAAS;AAAA,QAC9C;AAEA,YAAI,OAAO,QAAQ,YAAY,UAAU;AACvC,gBAAM,QAAQ,UAAU,QAAQ;AAAA,QAClC;AAEA,YAAI,OAAO,QAAQ,UAAU,YAAY,QAAQ,UAAU,MAAM;AAC/D,gBAAM,QAAQ,QAAQ,QAAQ;AAAA,QAChC;AAGA,YAAI,MAAM,QAAQ,SAAS,MAAM,QAAQ,QAAQ,GAAG;AAClD,gBAAM,QAAQ,aAAa,KAAK,MAAO,MAAM,QAAQ,UAAU,MAAM,QAAQ,QAAS,GAAG;AACzF,qBAAW,MAAM,QAAQ,GAAG,MAAM,QAAQ,UAAU;AACpD,sBAAY,cAAc,GAAG,MAAM,QAAQ,OAAO,MAAM,MAAM,QAAQ,KAAK,KAAK,MAAM,QAAQ,UAAU;AACxG,qBAAW,UAAU,OAAO,kCAAkC;AAAA,QAChE,WAAW,MAAM,QAAQ,SAAS;AAEhC,qBAAW,UAAU,IAAI,kCAAkC;AAC3D,sBAAY,cAAc,MAAM,QAAQ,UAAU,IAC9C,GAAG,MAAM,QAAQ,OAAO,eACxB;AAAA,QACN;AAGA,YAAI,MAAM,QAAQ,SAAS,OAAO,QAAQ,YAAY,WAAW;AAC/D,gBAAM,QAAQ,UAAU;AACxB,+BAAqB,MAAM,UAAU;AAAA,QACvC;AAEA,cAAM,aAAa,KAAK,IAAI;AAC5B,0BAAkB;AAAA,MACpB;AAQA,eAAS,SAAS,OAAO,QAAQ,MAAM;AACrC,uBAAe,EAAE,OAAO,YAAY,MAAM,CAAC;AAAA,MAC7C;AAOA,eAAS,UAAU,QAAQ;AACzB,uBAAe,EAAE,OAAO,CAAC;AAAA,MAC3B;AAKA,eAAS,cAAc;AACrB,sBAAc,EAAE,SAAS,MAAM,CAAC;AAAA,MAClC;AAKA,eAAS,cAAc;AACrB,sBAAc,EAAE,SAAS,KAAK,CAAC;AAAA,MACjC;AAOA,eAAS,WAAW;AAClB,eAAO,KAAK,MAAM,KAAK,UAAU,KAAK,CAAC;AAAA,MACzC;AAKA,eAAS,UAAU;AACjB,YAAI,QAAQ,KAAK,YAAY;AAC3B,eAAK,WAAW,YAAY,IAAI;AAAA,QAClC;AAAA,MACF;AAQA,eAAS,gBAAgB,OAAO;AAC9B,YAAI,CAAC,MAAO,QAAO;AACnB,eAAO,MACJ,MAAM,MAAM,EACZ,IAAI,UAAQ,KAAK,OAAO,CAAC,EAAE,YAAY,IAAI,KAAK,MAAM,CAAC,CAAC,EACxD,KAAK,GAAG;AAAA,MACb;AAKA,eAAS,oBAAoB;AAC3B,YAAI,OAAO,kBAAkB,YAAY;AACvC,cAAI;AACF,0BAAc,SAAS,CAAC;AAAA,UAC1B,SAAS,GAAG;AAAA,UAAC;AAAA,QACf;AAAA,MACF;AAGA,aAAO;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA;AAAA,QAEA,UAAU;AAAA,UACR;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAGA,QAAI,OAAO,WAAW,eAAe,OAAO,SAAS;AACnD,aAAO,UAAU,EAAE,6BAA6B;AAAA,IAClD;AAGA,QAAI,OAAO,WAAW,aAAa;AACjC,aAAO,+BAA+B;AAAA,IACxC;AAAA;AAAA;",
  "names": []
}
